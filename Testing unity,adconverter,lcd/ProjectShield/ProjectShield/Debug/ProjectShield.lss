
ProjectShield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008d0c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00088d0c  00088d0c  00018d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae0  20070000  00088d14  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000214  20070ae0  000897f4  00020ae0  2**2
                  ALLOC
  4 .stack        00002004  20070cf4  00089a08  00020ae0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020ae0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b09  2**0
                  CONTENTS, READONLY
  7 .debug_info   00023a32  00000000  00000000  00020b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004ed2  00000000  00000000  00044594  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000084bb  00000000  00000000  00049466  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000eb8  00000000  00000000  00051921  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f80  00000000  00000000  000527d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001f10d  00000000  00000000  00053759  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001a365  00000000  00000000  00072866  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007029a  00000000  00000000  0008cbcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003454  00000000  00000000  000fce68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	f8 2c 07 20 b1 20 08 00 ad 20 08 00 ad 20 08 00     .,. . ... ... ..
   80010:	ad 20 08 00 ad 20 08 00 ad 20 08 00 00 00 00 00     . ... ... ......
	...
   8002c:	ad 20 08 00 ad 20 08 00 00 00 00 00 ad 20 08 00     . ... ....... ..
   8003c:	ad 20 08 00 ad 20 08 00 ad 20 08 00 ad 20 08 00     . ... ... ... ..
   8004c:	ad 20 08 00 ad 20 08 00 ad 20 08 00 ad 20 08 00     . ... ... ... ..
   8005c:	ad 20 08 00 ad 20 08 00 ad 20 08 00 00 00 00 00     . ... ... ......
   8006c:	21 1f 08 00 35 1f 08 00 49 1f 08 00 5d 1f 08 00     !...5...I...]...
	...
   80084:	99 04 08 00 ad 20 08 00 ad 20 08 00 ad 20 08 00     ..... ... ... ..
   80094:	ad 20 08 00 ad 20 08 00 ad 20 08 00 ad 20 08 00     . ... ... ... ..
   800a4:	00 00 00 00 ad 20 08 00 ad 20 08 00 ad 20 08 00     ..... ... ... ..
   800b4:	ad 20 08 00 ad 20 08 00 ad 20 08 00 ad 20 08 00     . ... ... ... ..
   800c4:	ad 20 08 00 ad 20 08 00 ad 20 08 00 ad 20 08 00     . ... ... ... ..
   800d4:	ad 20 08 00 ad 20 08 00 ad 20 08 00 ad 20 08 00     . ... ... ... ..
   800e4:	ad 20 08 00 ad 20 08 00 ad 20 08 00 ad 20 08 00     . ... ... ... ..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070ae0 	.word	0x20070ae0
   80110:	00000000 	.word	0x00000000
   80114:	00088d14 	.word	0x00088d14

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00088d14 	.word	0x00088d14
   80154:	20070ae4 	.word	0x20070ae4
   80158:	00088d14 	.word	0x00088d14
   8015c:	00000000 	.word	0x00000000

00080160 <analogInit>:
#include <inttypes.h>
#include <asf.h>
#include "adcFunctions.h"

int analogInit(int pinNumber)
{
   80160:	b538      	push	{r3, r4, r5, lr}
	 *
	 * See code example http://asf.atmel.com/docs/latest/sam.drivers.adc.adc_example.arduino_due_x/html/sam_adc_quickstart.html
	 * It is assumed that the AD-converter is using 12 bits
	 */
	
	pmc_enable_periph_clk(ID_ADC);	/* power the clock for the ADC with pmc_enable_periph_clk(ID_ADC) */
   80162:	2025      	movs	r0, #37	; 0x25
   80164:	4b13      	ldr	r3, [pc, #76]	; (801b4 <analogInit+0x54>)
   80166:	4798      	blx	r3
	
	adc_init(ADC, sysclk_get_main_hz(), sysclk_get_main_hz()/4, 8);
   80168:	4c13      	ldr	r4, [pc, #76]	; (801b8 <analogInit+0x58>)
   8016a:	2308      	movs	r3, #8
   8016c:	4a13      	ldr	r2, [pc, #76]	; (801bc <analogInit+0x5c>)
   8016e:	4914      	ldr	r1, [pc, #80]	; (801c0 <analogInit+0x60>)
   80170:	4620      	mov	r0, r4
   80172:	4d14      	ldr	r5, [pc, #80]	; (801c4 <analogInit+0x64>)
   80174:	47a8      	blx	r5

	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);
   80176:	2301      	movs	r3, #1
   80178:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   8017c:	2100      	movs	r1, #0
   8017e:	4620      	mov	r0, r4
   80180:	4d11      	ldr	r5, [pc, #68]	; (801c8 <analogInit+0x68>)
   80182:	47a8      	blx	r5

	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   80184:	2100      	movs	r1, #0
   80186:	4620      	mov	r0, r4
   80188:	4b10      	ldr	r3, [pc, #64]	; (801cc <analogInit+0x6c>)
   8018a:	4798      	blx	r3

	adc_enable_channel(ADC, ADC_CHANNEL_7);
   8018c:	2107      	movs	r1, #7
   8018e:	4620      	mov	r0, r4
   80190:	4b0f      	ldr	r3, [pc, #60]	; (801d0 <analogInit+0x70>)
   80192:	4798      	blx	r3

	adc_enable_interrupt(ADC, ADC_IER_DRDY);
   80194:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   80198:	4620      	mov	r0, r4
   8019a:	4b0e      	ldr	r3, [pc, #56]	; (801d4 <analogInit+0x74>)
   8019c:	4798      	blx	r3

	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   8019e:	2200      	movs	r2, #0
   801a0:	4611      	mov	r1, r2
   801a2:	4620      	mov	r0, r4
   801a4:	4b0c      	ldr	r3, [pc, #48]	; (801d8 <analogInit+0x78>)
   801a6:	4798      	blx	r3

	
	/* Write code here */
	
	adc_start(ADC);
   801a8:	4620      	mov	r0, r4
   801aa:	4b0c      	ldr	r3, [pc, #48]	; (801dc <analogInit+0x7c>)
   801ac:	4798      	blx	r3

	return 0;	/* if everything is ok */
}
   801ae:	2000      	movs	r0, #0
   801b0:	bd38      	pop	{r3, r4, r5, pc}
   801b2:	bf00      	nop
   801b4:	00082059 	.word	0x00082059
   801b8:	400c0000 	.word	0x400c0000
   801bc:	0280de80 	.word	0x0280de80
   801c0:	0a037a00 	.word	0x0a037a00
   801c4:	00080359 	.word	0x00080359
   801c8:	000803ab 	.word	0x000803ab
   801cc:	0008038d 	.word	0x0008038d
   801d0:	000803cd 	.word	0x000803cd
   801d4:	000803db 	.word	0x000803db
   801d8:	0008039d 	.word	0x0008039d
   801dc:	000803c7 	.word	0x000803c7

000801e0 <analogRead>:

uint32_t analogRead(int pinNumber)
{
   801e0:	b538      	push	{r3, r4, r5, lr}
	/* Write code here */
	uint32_t result = adc_get_latest_value(ADC);
   801e2:	4c05      	ldr	r4, [pc, #20]	; (801f8 <analogRead+0x18>)
   801e4:	4620      	mov	r0, r4
   801e6:	4b05      	ldr	r3, [pc, #20]	; (801fc <analogRead+0x1c>)
   801e8:	4798      	blx	r3
   801ea:	4605      	mov	r5, r0
	adc_start(ADC);
   801ec:	4620      	mov	r0, r4
   801ee:	4b04      	ldr	r3, [pc, #16]	; (80200 <analogRead+0x20>)
   801f0:	4798      	blx	r3
	
	
	return result;	/* Replace with actual value read from A/D input*/
   801f2:	4628      	mov	r0, r5
   801f4:	bd38      	pop	{r3, r4, r5, pc}
   801f6:	bf00      	nop
   801f8:	400c0000 	.word	0x400c0000
   801fc:	000803d7 	.word	0x000803d7
   80200:	000803c7 	.word	0x000803c7

00080204 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   80204:	2a00      	cmp	r2, #0
   80206:	d051      	beq.n	802ac <usart_serial_read_packet+0xa8>
{
   80208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8020c:	b083      	sub	sp, #12
   8020e:	4605      	mov	r5, r0
   80210:	460c      	mov	r4, r1
   80212:	4692      	mov	sl, r2
   80214:	448a      	add	sl, r1

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80216:	4f26      	ldr	r7, [pc, #152]	; (802b0 <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   80218:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 802c4 <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8021c:	4e25      	ldr	r6, [pc, #148]	; (802b4 <usart_serial_read_packet+0xb0>)
   8021e:	e01d      	b.n	8025c <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   80220:	4621      	mov	r1, r4
   80222:	4638      	mov	r0, r7
   80224:	47c8      	blx	r9
   80226:	2800      	cmp	r0, #0
   80228:	d1fa      	bne.n	80220 <usart_serial_read_packet+0x1c>
   8022a:	e021      	b.n	80270 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   8022c:	469b      	mov	fp, r3
   8022e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 802c8 <usart_serial_read_packet+0xc4>
   80232:	a901      	add	r1, sp, #4
   80234:	4658      	mov	r0, fp
   80236:	47c0      	blx	r8
   80238:	2800      	cmp	r0, #0
   8023a:	d1fa      	bne.n	80232 <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   8023c:	9b01      	ldr	r3, [sp, #4]
   8023e:	7023      	strb	r3, [r4, #0]
   80240:	e019      	b.n	80276 <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   80242:	469b      	mov	fp, r3
   80244:	f8df 8080 	ldr.w	r8, [pc, #128]	; 802c8 <usart_serial_read_packet+0xc4>
   80248:	a901      	add	r1, sp, #4
   8024a:	4658      	mov	r0, fp
   8024c:	47c0      	blx	r8
   8024e:	2800      	cmp	r0, #0
   80250:	d1fa      	bne.n	80248 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   80252:	9b01      	ldr	r3, [sp, #4]
   80254:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   80256:	3401      	adds	r4, #1
	while (len) {
   80258:	4554      	cmp	r4, sl
   8025a:	d023      	beq.n	802a4 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   8025c:	2300      	movs	r3, #0
   8025e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   80260:	42bd      	cmp	r5, r7
   80262:	d0dd      	beq.n	80220 <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   80264:	4b14      	ldr	r3, [pc, #80]	; (802b8 <usart_serial_read_packet+0xb4>)
   80266:	429d      	cmp	r5, r3
   80268:	d0e0      	beq.n	8022c <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   8026a:	4b14      	ldr	r3, [pc, #80]	; (802bc <usart_serial_read_packet+0xb8>)
   8026c:	429d      	cmp	r5, r3
   8026e:	d0e8      	beq.n	80242 <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   80270:	4b13      	ldr	r3, [pc, #76]	; (802c0 <usart_serial_read_packet+0xbc>)
   80272:	429d      	cmp	r5, r3
   80274:	d00b      	beq.n	8028e <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   80276:	42b5      	cmp	r5, r6
   80278:	d1ed      	bne.n	80256 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8027a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 802c8 <usart_serial_read_packet+0xc4>
   8027e:	a901      	add	r1, sp, #4
   80280:	4630      	mov	r0, r6
   80282:	47c0      	blx	r8
   80284:	2800      	cmp	r0, #0
   80286:	d1fa      	bne.n	8027e <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80288:	9b01      	ldr	r3, [sp, #4]
   8028a:	7023      	strb	r3, [r4, #0]
   8028c:	e7e3      	b.n	80256 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8028e:	469b      	mov	fp, r3
   80290:	f8df 8034 	ldr.w	r8, [pc, #52]	; 802c8 <usart_serial_read_packet+0xc4>
   80294:	a901      	add	r1, sp, #4
   80296:	4658      	mov	r0, fp
   80298:	47c0      	blx	r8
   8029a:	2800      	cmp	r0, #0
   8029c:	d1fa      	bne.n	80294 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   8029e:	9b01      	ldr	r3, [sp, #4]
   802a0:	7023      	strb	r3, [r4, #0]
   802a2:	e7d8      	b.n	80256 <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   802a4:	2000      	movs	r0, #0
   802a6:	b003      	add	sp, #12
   802a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   802ac:	2000      	movs	r0, #0
   802ae:	4770      	bx	lr
   802b0:	400e0800 	.word	0x400e0800
   802b4:	400a4000 	.word	0x400a4000
   802b8:	40098000 	.word	0x40098000
   802bc:	4009c000 	.word	0x4009c000
   802c0:	400a0000 	.word	0x400a0000
   802c4:	0008045b 	.word	0x0008045b
   802c8:	00080481 	.word	0x00080481

000802cc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   802cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   802d0:	b980      	cbnz	r0, 802f4 <_read+0x28>
   802d2:	460c      	mov	r4, r1
   802d4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   802d6:	2a00      	cmp	r2, #0
   802d8:	dd0f      	ble.n	802fa <_read+0x2e>
   802da:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   802dc:	4e08      	ldr	r6, [pc, #32]	; (80300 <_read+0x34>)
   802de:	4d09      	ldr	r5, [pc, #36]	; (80304 <_read+0x38>)
   802e0:	6830      	ldr	r0, [r6, #0]
   802e2:	4621      	mov	r1, r4
   802e4:	682b      	ldr	r3, [r5, #0]
   802e6:	4798      	blx	r3
		ptr++;
   802e8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   802ea:	42bc      	cmp	r4, r7
   802ec:	d1f8      	bne.n	802e0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   802ee:	4640      	mov	r0, r8
   802f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   802f4:	f04f 38ff 	mov.w	r8, #4294967295
   802f8:	e7f9      	b.n	802ee <_read+0x22>
	for (; len > 0; --len) {
   802fa:	4680      	mov	r8, r0
   802fc:	e7f7      	b.n	802ee <_read+0x22>
   802fe:	bf00      	nop
   80300:	20070c4c 	.word	0x20070c4c
   80304:	20070c44 	.word	0x20070c44

00080308 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80308:	3801      	subs	r0, #1
   8030a:	2802      	cmp	r0, #2
   8030c:	d815      	bhi.n	8033a <_write+0x32>
{
   8030e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80312:	460e      	mov	r6, r1
   80314:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   80316:	b19a      	cbz	r2, 80340 <_write+0x38>
   80318:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8031a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80354 <_write+0x4c>
   8031e:	4f0c      	ldr	r7, [pc, #48]	; (80350 <_write+0x48>)
   80320:	f8d8 0000 	ldr.w	r0, [r8]
   80324:	f815 1b01 	ldrb.w	r1, [r5], #1
   80328:	683b      	ldr	r3, [r7, #0]
   8032a:	4798      	blx	r3
   8032c:	2800      	cmp	r0, #0
   8032e:	db0a      	blt.n	80346 <_write+0x3e>
   80330:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   80332:	3c01      	subs	r4, #1
   80334:	d1f4      	bne.n	80320 <_write+0x18>
   80336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8033a:	f04f 30ff 	mov.w	r0, #4294967295
   8033e:	4770      	bx	lr
	for (; len != 0; --len) {
   80340:	4610      	mov	r0, r2
   80342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   80346:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8034a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8034e:	bf00      	nop
   80350:	20070c48 	.word	0x20070c48
   80354:	20070c4c 	.word	0x20070c4c

00080358 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80358:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   8035a:	2401      	movs	r4, #1
   8035c:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   8035e:	2400      	movs	r4, #0
   80360:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   80362:	f240 2502 	movw	r5, #514	; 0x202
   80366:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   8036a:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   8036e:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80372:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   80374:	0052      	lsls	r2, r2, #1
   80376:	fbb1 f2f2 	udiv	r2, r1, r2
   8037a:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8037c:	0212      	lsls	r2, r2, #8
   8037e:	b292      	uxth	r2, r2
   80380:	432b      	orrs	r3, r5
   80382:	431a      	orrs	r2, r3
   80384:	6042      	str	r2, [r0, #4]
	return 0;
}
   80386:	4620      	mov	r0, r4
   80388:	bc30      	pop	{r4, r5}
   8038a:	4770      	bx	lr

0008038c <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   8038c:	6843      	ldr	r3, [r0, #4]
   8038e:	f023 0310 	bic.w	r3, r3, #16
   80392:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   80394:	6843      	ldr	r3, [r0, #4]
   80396:	4319      	orrs	r1, r3
   80398:	6041      	str	r1, [r0, #4]
   8039a:	4770      	bx	lr

0008039c <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   8039c:	6843      	ldr	r3, [r0, #4]
   8039e:	01d2      	lsls	r2, r2, #7
   803a0:	b2d2      	uxtb	r2, r2
   803a2:	4319      	orrs	r1, r3
   803a4:	430a      	orrs	r2, r1
   803a6:	6042      	str	r2, [r0, #4]
   803a8:	4770      	bx	lr

000803aa <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   803aa:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   803ac:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   803ae:	0609      	lsls	r1, r1, #24
   803b0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   803b4:	4321      	orrs	r1, r4
   803b6:	430a      	orrs	r2, r1
   803b8:	0719      	lsls	r1, r3, #28
   803ba:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
   803be:	4311      	orrs	r1, r2
   803c0:	6041      	str	r1, [r0, #4]
}
   803c2:	bc10      	pop	{r4}
   803c4:	4770      	bx	lr

000803c6 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   803c6:	2302      	movs	r3, #2
   803c8:	6003      	str	r3, [r0, #0]
   803ca:	4770      	bx	lr

000803cc <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   803cc:	2301      	movs	r3, #1
   803ce:	fa03 f101 	lsl.w	r1, r3, r1
   803d2:	6101      	str	r1, [r0, #16]
   803d4:	4770      	bx	lr

000803d6 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   803d6:	6a00      	ldr	r0, [r0, #32]
}
   803d8:	4770      	bx	lr

000803da <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
   803da:	6241      	str	r1, [r0, #36]	; 0x24
   803dc:	4770      	bx	lr

000803de <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   803de:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   803e0:	0189      	lsls	r1, r1, #6
   803e2:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   803e4:	2402      	movs	r4, #2
   803e6:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   803e8:	f04f 31ff 	mov.w	r1, #4294967295
   803ec:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   803ee:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   803f0:	605a      	str	r2, [r3, #4]
}
   803f2:	bc10      	pop	{r4}
   803f4:	4770      	bx	lr

000803f6 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   803f6:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   803fa:	4770      	bx	lr

000803fc <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   803fc:	0189      	lsls	r1, r1, #6
   803fe:	2305      	movs	r3, #5
   80400:	5043      	str	r3, [r0, r1]
   80402:	4770      	bx	lr

00080404 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   80404:	0189      	lsls	r1, r1, #6
   80406:	2302      	movs	r3, #2
   80408:	5043      	str	r3, [r0, r1]
   8040a:	4770      	bx	lr

0008040c <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   8040c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80410:	6908      	ldr	r0, [r1, #16]
}
   80412:	4770      	bx	lr

00080414 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80414:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80416:	23ac      	movs	r3, #172	; 0xac
   80418:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8041a:	680b      	ldr	r3, [r1, #0]
   8041c:	684a      	ldr	r2, [r1, #4]
   8041e:	fbb3 f3f2 	udiv	r3, r3, r2
   80422:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80424:	1e5c      	subs	r4, r3, #1
   80426:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8042a:	4294      	cmp	r4, r2
   8042c:	d80b      	bhi.n	80446 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   8042e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80430:	688b      	ldr	r3, [r1, #8]
   80432:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80434:	f240 2302 	movw	r3, #514	; 0x202
   80438:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8043c:	2350      	movs	r3, #80	; 0x50
   8043e:	6003      	str	r3, [r0, #0]

	return 0;
   80440:	2000      	movs	r0, #0
}
   80442:	bc10      	pop	{r4}
   80444:	4770      	bx	lr
		return 1;
   80446:	2001      	movs	r0, #1
   80448:	e7fb      	b.n	80442 <uart_init+0x2e>

0008044a <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8044a:	6943      	ldr	r3, [r0, #20]
   8044c:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80450:	bf1a      	itte	ne
   80452:	61c1      	strne	r1, [r0, #28]
	return 0;
   80454:	2000      	movne	r0, #0
		return 1;
   80456:	2001      	moveq	r0, #1
}
   80458:	4770      	bx	lr

0008045a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8045a:	6943      	ldr	r3, [r0, #20]
   8045c:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80460:	bf1d      	ittte	ne
   80462:	6983      	ldrne	r3, [r0, #24]
   80464:	700b      	strbne	r3, [r1, #0]
	return 0;
   80466:	2000      	movne	r0, #0
		return 1;
   80468:	2001      	moveq	r0, #1
}
   8046a:	4770      	bx	lr

0008046c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8046c:	6943      	ldr	r3, [r0, #20]
   8046e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80472:	bf1d      	ittte	ne
   80474:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80478:	61c1      	strne	r1, [r0, #28]
	return 0;
   8047a:	2000      	movne	r0, #0
		return 1;
   8047c:	2001      	moveq	r0, #1
}
   8047e:	4770      	bx	lr

00080480 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80480:	6943      	ldr	r3, [r0, #20]
   80482:	f013 0f01 	tst.w	r3, #1
   80486:	d005      	beq.n	80494 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80488:	6983      	ldr	r3, [r0, #24]
   8048a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8048e:	600b      	str	r3, [r1, #0]

	return 0;
   80490:	2000      	movs	r0, #0
   80492:	4770      	bx	lr
		return 1;
   80494:	2001      	movs	r0, #1
}
   80496:	4770      	bx	lr

00080498 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80498:	b500      	push	{lr}
   8049a:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   8049c:	2201      	movs	r2, #1
   8049e:	f10d 0107 	add.w	r1, sp, #7
   804a2:	4810      	ldr	r0, [pc, #64]	; (804e4 <USART0_Handler+0x4c>)
   804a4:	4b10      	ldr	r3, [pc, #64]	; (804e8 <USART0_Handler+0x50>)
   804a6:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   804a8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   804aa:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   804ae:	2200      	movs	r2, #0
   804b0:	4b0e      	ldr	r3, [pc, #56]	; (804ec <USART0_Handler+0x54>)
   804b2:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   804b4:	4b0e      	ldr	r3, [pc, #56]	; (804f0 <USART0_Handler+0x58>)
   804b6:	781b      	ldrb	r3, [r3, #0]
   804b8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   804bc:	4a0d      	ldr	r2, [pc, #52]	; (804f4 <USART0_Handler+0x5c>)
   804be:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   804c0:	2b9b      	cmp	r3, #155	; 0x9b
   804c2:	d00b      	beq.n	804dc <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   804c4:	3301      	adds	r3, #1
   804c6:	4a0a      	ldr	r2, [pc, #40]	; (804f0 <USART0_Handler+0x58>)
   804c8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   804ca:	2201      	movs	r2, #1
   804cc:	4b07      	ldr	r3, [pc, #28]	; (804ec <USART0_Handler+0x54>)
   804ce:	701a      	strb	r2, [r3, #0]
   804d0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   804d4:	b662      	cpsie	i
}
   804d6:	b003      	add	sp, #12
   804d8:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   804dc:	2200      	movs	r2, #0
   804de:	4b04      	ldr	r3, [pc, #16]	; (804f0 <USART0_Handler+0x58>)
   804e0:	701a      	strb	r2, [r3, #0]
   804e2:	e7f2      	b.n	804ca <USART0_Handler+0x32>
   804e4:	40098000 	.word	0x40098000
   804e8:	00080205 	.word	0x00080205
   804ec:	2007012c 	.word	0x2007012c
   804f0:	20070b98 	.word	0x20070b98
   804f4:	20070afc 	.word	0x20070afc

000804f8 <readLCDbutton>:
 */ 

#include "buttons.h"
#include "adcFunctions.h"	/* Must use the value from the ADC to figure out which button */
buttonType readLCDbutton(void)
{
   804f8:	b500      	push	{lr}
   804fa:	b083      	sub	sp, #12
	/* Write code here */
	
	volatile int adcValue = (int)analogRead(0);
   804fc:	2000      	movs	r0, #0
   804fe:	4b20      	ldr	r3, [pc, #128]	; (80580 <readLCDbutton+0x88>)
   80500:	4798      	blx	r3
   80502:	9001      	str	r0, [sp, #4]
	if (adcValue <1700 && adcValue > 1500){return btnDOWN;}
   80504:	9a01      	ldr	r2, [sp, #4]
   80506:	f240 63a3 	movw	r3, #1699	; 0x6a3
   8050a:	429a      	cmp	r2, r3
   8050c:	dc08      	bgt.n	80520 <readLCDbutton+0x28>
   8050e:	9a01      	ldr	r2, [sp, #4]
   80510:	f240 53dc 	movw	r3, #1500	; 0x5dc
   80514:	429a      	cmp	r2, r3
   80516:	dd03      	ble.n	80520 <readLCDbutton+0x28>
   80518:	2002      	movs	r0, #2
	if (adcValue > 3500 && adcValue < 3800){return btnNONE;}
	if (adcValue > 2900 && adcValue < 3400){return btnSELECT;}
	if (adcValue > 500 && adcValue<900){return btnUP;}
	
	return btnRIGHT;/* Change to actual value */
   8051a:	b003      	add	sp, #12
   8051c:	f85d fb04 	ldr.w	pc, [sp], #4
	if (adcValue > 2000 && adcValue < 2300){return btnLEFT;}
   80520:	9b01      	ldr	r3, [sp, #4]
   80522:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   80526:	dd06      	ble.n	80536 <readLCDbutton+0x3e>
   80528:	9a01      	ldr	r2, [sp, #4]
   8052a:	f640 03fb 	movw	r3, #2299	; 0x8fb
   8052e:	429a      	cmp	r2, r3
   80530:	dc01      	bgt.n	80536 <readLCDbutton+0x3e>
   80532:	2003      	movs	r0, #3
   80534:	e7f1      	b.n	8051a <readLCDbutton+0x22>
	if (adcValue > 3500 && adcValue < 3800){return btnNONE;}
   80536:	9a01      	ldr	r2, [sp, #4]
   80538:	f640 53ac 	movw	r3, #3500	; 0xdac
   8053c:	429a      	cmp	r2, r3
   8053e:	dd06      	ble.n	8054e <readLCDbutton+0x56>
   80540:	9a01      	ldr	r2, [sp, #4]
   80542:	f640 63d7 	movw	r3, #3799	; 0xed7
   80546:	429a      	cmp	r2, r3
   80548:	dc01      	bgt.n	8054e <readLCDbutton+0x56>
   8054a:	2005      	movs	r0, #5
   8054c:	e7e5      	b.n	8051a <readLCDbutton+0x22>
	if (adcValue > 2900 && adcValue < 3400){return btnSELECT;}
   8054e:	9a01      	ldr	r2, [sp, #4]
   80550:	f640 3354 	movw	r3, #2900	; 0xb54
   80554:	429a      	cmp	r2, r3
   80556:	dd06      	ble.n	80566 <readLCDbutton+0x6e>
   80558:	9a01      	ldr	r2, [sp, #4]
   8055a:	f640 5347 	movw	r3, #3399	; 0xd47
   8055e:	429a      	cmp	r2, r3
   80560:	dc01      	bgt.n	80566 <readLCDbutton+0x6e>
   80562:	2004      	movs	r0, #4
   80564:	e7d9      	b.n	8051a <readLCDbutton+0x22>
	if (adcValue > 500 && adcValue<900){return btnUP;}
   80566:	9b01      	ldr	r3, [sp, #4]
   80568:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   8056c:	dd06      	ble.n	8057c <readLCDbutton+0x84>
   8056e:	9801      	ldr	r0, [sp, #4]
	if (adcValue <1700 && adcValue > 1500){return btnDOWN;}
   80570:	f5b0 7f61 	cmp.w	r0, #900	; 0x384
   80574:	bfac      	ite	ge
   80576:	2000      	movge	r0, #0
   80578:	2001      	movlt	r0, #1
   8057a:	e7ce      	b.n	8051a <readLCDbutton+0x22>
	return btnRIGHT;/* Change to actual value */
   8057c:	2000      	movs	r0, #0
   8057e:	e7cc      	b.n	8051a <readLCDbutton+0x22>
   80580:	000801e1 	.word	0x000801e1

00080584 <usart_serial_getchar>:
{
   80584:	b5f0      	push	{r4, r5, r6, r7, lr}
   80586:	b083      	sub	sp, #12
   80588:	4604      	mov	r4, r0
   8058a:	460d      	mov	r5, r1
	uint32_t val = 0;
   8058c:	2300      	movs	r3, #0
   8058e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   80590:	4b20      	ldr	r3, [pc, #128]	; (80614 <usart_serial_getchar+0x90>)
   80592:	4298      	cmp	r0, r3
   80594:	d00d      	beq.n	805b2 <usart_serial_getchar+0x2e>
	if (USART0 == p_usart) {
   80596:	4b20      	ldr	r3, [pc, #128]	; (80618 <usart_serial_getchar+0x94>)
   80598:	4298      	cmp	r0, r3
   8059a:	d012      	beq.n	805c2 <usart_serial_getchar+0x3e>
	if (USART1 == p_usart) {
   8059c:	4b1f      	ldr	r3, [pc, #124]	; (8061c <usart_serial_getchar+0x98>)
   8059e:	4298      	cmp	r0, r3
   805a0:	d019      	beq.n	805d6 <usart_serial_getchar+0x52>
	if (USART2 == p_usart) {
   805a2:	4b1f      	ldr	r3, [pc, #124]	; (80620 <usart_serial_getchar+0x9c>)
   805a4:	429c      	cmp	r4, r3
   805a6:	d020      	beq.n	805ea <usart_serial_getchar+0x66>
	if (USART3 == p_usart) {
   805a8:	4b1e      	ldr	r3, [pc, #120]	; (80624 <usart_serial_getchar+0xa0>)
   805aa:	429c      	cmp	r4, r3
   805ac:	d027      	beq.n	805fe <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   805ae:	b003      	add	sp, #12
   805b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   805b2:	461f      	mov	r7, r3
   805b4:	4e1c      	ldr	r6, [pc, #112]	; (80628 <usart_serial_getchar+0xa4>)
   805b6:	4629      	mov	r1, r5
   805b8:	4638      	mov	r0, r7
   805ba:	47b0      	blx	r6
   805bc:	2800      	cmp	r0, #0
   805be:	d1fa      	bne.n	805b6 <usart_serial_getchar+0x32>
   805c0:	e7ef      	b.n	805a2 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   805c2:	461f      	mov	r7, r3
   805c4:	4e19      	ldr	r6, [pc, #100]	; (8062c <usart_serial_getchar+0xa8>)
   805c6:	a901      	add	r1, sp, #4
   805c8:	4638      	mov	r0, r7
   805ca:	47b0      	blx	r6
   805cc:	2800      	cmp	r0, #0
   805ce:	d1fa      	bne.n	805c6 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   805d0:	9b01      	ldr	r3, [sp, #4]
   805d2:	702b      	strb	r3, [r5, #0]
   805d4:	e7e8      	b.n	805a8 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   805d6:	461e      	mov	r6, r3
   805d8:	4c14      	ldr	r4, [pc, #80]	; (8062c <usart_serial_getchar+0xa8>)
   805da:	a901      	add	r1, sp, #4
   805dc:	4630      	mov	r0, r6
   805de:	47a0      	blx	r4
   805e0:	2800      	cmp	r0, #0
   805e2:	d1fa      	bne.n	805da <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   805e4:	9b01      	ldr	r3, [sp, #4]
   805e6:	702b      	strb	r3, [r5, #0]
   805e8:	e7e1      	b.n	805ae <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   805ea:	461e      	mov	r6, r3
   805ec:	4c0f      	ldr	r4, [pc, #60]	; (8062c <usart_serial_getchar+0xa8>)
   805ee:	a901      	add	r1, sp, #4
   805f0:	4630      	mov	r0, r6
   805f2:	47a0      	blx	r4
   805f4:	2800      	cmp	r0, #0
   805f6:	d1fa      	bne.n	805ee <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   805f8:	9b01      	ldr	r3, [sp, #4]
   805fa:	702b      	strb	r3, [r5, #0]
   805fc:	e7d7      	b.n	805ae <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   805fe:	461e      	mov	r6, r3
   80600:	4c0a      	ldr	r4, [pc, #40]	; (8062c <usart_serial_getchar+0xa8>)
   80602:	a901      	add	r1, sp, #4
   80604:	4630      	mov	r0, r6
   80606:	47a0      	blx	r4
   80608:	2800      	cmp	r0, #0
   8060a:	d1fa      	bne.n	80602 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   8060c:	9b01      	ldr	r3, [sp, #4]
   8060e:	702b      	strb	r3, [r5, #0]
}
   80610:	e7cd      	b.n	805ae <usart_serial_getchar+0x2a>
   80612:	bf00      	nop
   80614:	400e0800 	.word	0x400e0800
   80618:	40098000 	.word	0x40098000
   8061c:	4009c000 	.word	0x4009c000
   80620:	400a0000 	.word	0x400a0000
   80624:	400a4000 	.word	0x400a4000
   80628:	0008045b 	.word	0x0008045b
   8062c:	00080481 	.word	0x00080481

00080630 <usart_serial_putchar>:
{
   80630:	b570      	push	{r4, r5, r6, lr}
   80632:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   80634:	4b1e      	ldr	r3, [pc, #120]	; (806b0 <usart_serial_putchar+0x80>)
   80636:	4298      	cmp	r0, r3
   80638:	d00d      	beq.n	80656 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   8063a:	4b1e      	ldr	r3, [pc, #120]	; (806b4 <usart_serial_putchar+0x84>)
   8063c:	4298      	cmp	r0, r3
   8063e:	d013      	beq.n	80668 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   80640:	4b1d      	ldr	r3, [pc, #116]	; (806b8 <usart_serial_putchar+0x88>)
   80642:	4298      	cmp	r0, r3
   80644:	d019      	beq.n	8067a <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   80646:	4b1d      	ldr	r3, [pc, #116]	; (806bc <usart_serial_putchar+0x8c>)
   80648:	4298      	cmp	r0, r3
   8064a:	d01f      	beq.n	8068c <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   8064c:	4b1c      	ldr	r3, [pc, #112]	; (806c0 <usart_serial_putchar+0x90>)
   8064e:	4298      	cmp	r0, r3
   80650:	d025      	beq.n	8069e <usart_serial_putchar+0x6e>
	return 0;
   80652:	2000      	movs	r0, #0
}
   80654:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   80656:	461e      	mov	r6, r3
   80658:	4d1a      	ldr	r5, [pc, #104]	; (806c4 <usart_serial_putchar+0x94>)
   8065a:	4621      	mov	r1, r4
   8065c:	4630      	mov	r0, r6
   8065e:	47a8      	blx	r5
   80660:	2800      	cmp	r0, #0
   80662:	d1fa      	bne.n	8065a <usart_serial_putchar+0x2a>
		return 1;
   80664:	2001      	movs	r0, #1
   80666:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80668:	461e      	mov	r6, r3
   8066a:	4d17      	ldr	r5, [pc, #92]	; (806c8 <usart_serial_putchar+0x98>)
   8066c:	4621      	mov	r1, r4
   8066e:	4630      	mov	r0, r6
   80670:	47a8      	blx	r5
   80672:	2800      	cmp	r0, #0
   80674:	d1fa      	bne.n	8066c <usart_serial_putchar+0x3c>
		return 1;
   80676:	2001      	movs	r0, #1
   80678:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8067a:	461e      	mov	r6, r3
   8067c:	4d12      	ldr	r5, [pc, #72]	; (806c8 <usart_serial_putchar+0x98>)
   8067e:	4621      	mov	r1, r4
   80680:	4630      	mov	r0, r6
   80682:	47a8      	blx	r5
   80684:	2800      	cmp	r0, #0
   80686:	d1fa      	bne.n	8067e <usart_serial_putchar+0x4e>
		return 1;
   80688:	2001      	movs	r0, #1
   8068a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8068c:	461e      	mov	r6, r3
   8068e:	4d0e      	ldr	r5, [pc, #56]	; (806c8 <usart_serial_putchar+0x98>)
   80690:	4621      	mov	r1, r4
   80692:	4630      	mov	r0, r6
   80694:	47a8      	blx	r5
   80696:	2800      	cmp	r0, #0
   80698:	d1fa      	bne.n	80690 <usart_serial_putchar+0x60>
		return 1;
   8069a:	2001      	movs	r0, #1
   8069c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8069e:	461e      	mov	r6, r3
   806a0:	4d09      	ldr	r5, [pc, #36]	; (806c8 <usart_serial_putchar+0x98>)
   806a2:	4621      	mov	r1, r4
   806a4:	4630      	mov	r0, r6
   806a6:	47a8      	blx	r5
   806a8:	2800      	cmp	r0, #0
   806aa:	d1fa      	bne.n	806a2 <usart_serial_putchar+0x72>
		return 1;
   806ac:	2001      	movs	r0, #1
   806ae:	bd70      	pop	{r4, r5, r6, pc}
   806b0:	400e0800 	.word	0x400e0800
   806b4:	40098000 	.word	0x40098000
   806b8:	4009c000 	.word	0x4009c000
   806bc:	400a0000 	.word	0x400a0000
   806c0:	400a4000 	.word	0x400a4000
   806c4:	0008044b 	.word	0x0008044b
   806c8:	0008046d 	.word	0x0008046d

000806cc <configureConsole>:
#include "consoleFunctions.h"

void configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   806cc:	b530      	push	{r4, r5, lr}
   806ce:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   806d0:	2008      	movs	r0, #8
   806d2:	4d15      	ldr	r5, [pc, #84]	; (80728 <configureConsole+0x5c>)
   806d4:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   806d6:	4c15      	ldr	r4, [pc, #84]	; (8072c <configureConsole+0x60>)
   806d8:	4b15      	ldr	r3, [pc, #84]	; (80730 <configureConsole+0x64>)
   806da:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   806dc:	4a15      	ldr	r2, [pc, #84]	; (80734 <configureConsole+0x68>)
   806de:	4b16      	ldr	r3, [pc, #88]	; (80738 <configureConsole+0x6c>)
   806e0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   806e2:	4a16      	ldr	r2, [pc, #88]	; (8073c <configureConsole+0x70>)
   806e4:	4b16      	ldr	r3, [pc, #88]	; (80740 <configureConsole+0x74>)
   806e6:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   806e8:	4b16      	ldr	r3, [pc, #88]	; (80744 <configureConsole+0x78>)
   806ea:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   806ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   806f0:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   806f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   806f6:	9303      	str	r3, [sp, #12]
   806f8:	2008      	movs	r0, #8
   806fa:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   806fc:	a901      	add	r1, sp, #4
   806fe:	4620      	mov	r0, r4
   80700:	4b11      	ldr	r3, [pc, #68]	; (80748 <configureConsole+0x7c>)
   80702:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80704:	4d11      	ldr	r5, [pc, #68]	; (8074c <configureConsole+0x80>)
   80706:	682b      	ldr	r3, [r5, #0]
   80708:	2100      	movs	r1, #0
   8070a:	6898      	ldr	r0, [r3, #8]
   8070c:	4c10      	ldr	r4, [pc, #64]	; (80750 <configureConsole+0x84>)
   8070e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80710:	682b      	ldr	r3, [r5, #0]
   80712:	2100      	movs	r1, #0
   80714:	6858      	ldr	r0, [r3, #4]
   80716:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   80718:	480e      	ldr	r0, [pc, #56]	; (80754 <configureConsole+0x88>)
   8071a:	4c0f      	ldr	r4, [pc, #60]	; (80758 <configureConsole+0x8c>)
   8071c:	47a0      	blx	r4
	printf("=============\n");
   8071e:	480f      	ldr	r0, [pc, #60]	; (8075c <configureConsole+0x90>)
   80720:	47a0      	blx	r4
   80722:	b005      	add	sp, #20
   80724:	bd30      	pop	{r4, r5, pc}
   80726:	bf00      	nop
   80728:	00082059 	.word	0x00082059
   8072c:	400e0800 	.word	0x400e0800
   80730:	20070c4c 	.word	0x20070c4c
   80734:	00080631 	.word	0x00080631
   80738:	20070c48 	.word	0x20070c48
   8073c:	00080585 	.word	0x00080585
   80740:	20070c44 	.word	0x20070c44
   80744:	0501bd00 	.word	0x0501bd00
   80748:	00080415 	.word	0x00080415
   8074c:	20070134 	.word	0x20070134
   80750:	000823c5 	.word	0x000823c5
   80754:	00088694 	.word	0x00088694
   80758:	00082301 	.word	0x00082301
   8075c:	000886a4 	.word	0x000886a4

00080760 <delayInit>:

#include "asf.h"
#include "DelayFunctions.h"

int delayInit(void)		/* Initializes the timer used for delays */
{
   80760:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);	/* power on the peripheral clock for timers */
   80762:	201b      	movs	r0, #27
   80764:	4b08      	ldr	r3, [pc, #32]	; (80788 <delayInit+0x28>)
   80766:	4798      	blx	r3
	tc_init(TC0,0,0);				/* TC0, channel 0, TCLK1 och capturemode */
   80768:	4c08      	ldr	r4, [pc, #32]	; (8078c <delayInit+0x2c>)
   8076a:	2200      	movs	r2, #0
   8076c:	4611      	mov	r1, r2
   8076e:	4620      	mov	r0, r4
   80770:	4b07      	ldr	r3, [pc, #28]	; (80790 <delayInit+0x30>)
   80772:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   80774:	2100      	movs	r1, #0
   80776:	4620      	mov	r0, r4
   80778:	4b06      	ldr	r3, [pc, #24]	; (80794 <delayInit+0x34>)
   8077a:	4798      	blx	r3
	tc_stop(TC0,0);					/* making sure the timer does not run  */
   8077c:	2100      	movs	r1, #0
   8077e:	4620      	mov	r0, r4
   80780:	4b05      	ldr	r3, [pc, #20]	; (80798 <delayInit+0x38>)
   80782:	4798      	blx	r3
	return 0;						/* evertyhing is ok, typical response */
}
   80784:	2000      	movs	r0, #0
   80786:	bd10      	pop	{r4, pc}
   80788:	00082059 	.word	0x00082059
   8078c:	40080000 	.word	0x40080000
   80790:	000803df 	.word	0x000803df
   80794:	000803f7 	.word	0x000803f7
   80798:	00080405 	.word	0x00080405

0008079c <delayMicroseconds>:


void delayMicroseconds(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   8079c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8079e:	4605      	mov	r5, r0
	tc_start(TC0,0);
   807a0:	2100      	movs	r1, #0
   807a2:	4809      	ldr	r0, [pc, #36]	; (807c8 <delayMicroseconds+0x2c>)
   807a4:	4b09      	ldr	r3, [pc, #36]	; (807cc <delayMicroseconds+0x30>)
   807a6:	4798      	blx	r3
	while (tc_read_cv(TC0,0) < us*42);
   807a8:	242a      	movs	r4, #42	; 0x2a
   807aa:	fb04 f405 	mul.w	r4, r4, r5
   807ae:	4f06      	ldr	r7, [pc, #24]	; (807c8 <delayMicroseconds+0x2c>)
   807b0:	2600      	movs	r6, #0
   807b2:	4d07      	ldr	r5, [pc, #28]	; (807d0 <delayMicroseconds+0x34>)
   807b4:	4631      	mov	r1, r6
   807b6:	4638      	mov	r0, r7
   807b8:	47a8      	blx	r5
   807ba:	42a0      	cmp	r0, r4
   807bc:	d3fa      	bcc.n	807b4 <delayMicroseconds+0x18>
	tc_stop(TC0,0);
   807be:	2100      	movs	r1, #0
   807c0:	4801      	ldr	r0, [pc, #4]	; (807c8 <delayMicroseconds+0x2c>)
   807c2:	4b04      	ldr	r3, [pc, #16]	; (807d4 <delayMicroseconds+0x38>)
   807c4:	4798      	blx	r3
   807c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   807c8:	40080000 	.word	0x40080000
   807cc:	000803fd 	.word	0x000803fd
   807d0:	0008040d 	.word	0x0008040d
   807d4:	00080405 	.word	0x00080405

000807d8 <lcdWriteAsciiString>:
	return 0;	/* Assuming everything went ok */
}

int lcdWriteAsciiString(const char *string)
/* writes an ascii string up to 40 characters on the LCD display */
{
   807d8:	b570      	push	{r4, r5, r6, lr}
   807da:	4604      	mov	r4, r0
	/* Write code here */
	lcdClearDisplay();
   807dc:	4b06      	ldr	r3, [pc, #24]	; (807f8 <lcdWriteAsciiString+0x20>)
   807de:	4798      	blx	r3
	while(*string != '\0')
   807e0:	7820      	ldrb	r0, [r4, #0]
   807e2:	b138      	cbz	r0, 807f4 <lcdWriteAsciiString+0x1c>
	{
		lcdWrite(*string, true);
   807e4:	2601      	movs	r6, #1
   807e6:	4d05      	ldr	r5, [pc, #20]	; (807fc <lcdWriteAsciiString+0x24>)
   807e8:	4631      	mov	r1, r6
   807ea:	47a8      	blx	r5
	while(*string != '\0')
   807ec:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   807f0:	2800      	cmp	r0, #0
   807f2:	d1f9      	bne.n	807e8 <lcdWriteAsciiString+0x10>
		string++;
	}
	
	return 0;	/* Assuming everything went ok */
}
   807f4:	2000      	movs	r0, #0
   807f6:	bd70      	pop	{r4, r5, r6, pc}
   807f8:	00080a01 	.word	0x00080a01
   807fc:	00080891 	.word	0x00080891

00080800 <lcdWrite4DigitNumber>:
{
   80800:	b510      	push	{r4, lr}
   80802:	b082      	sub	sp, #8
   80804:	4604      	mov	r4, r0
	lcdClearDisplay();
   80806:	4b06      	ldr	r3, [pc, #24]	; (80820 <lcdWrite4DigitNumber+0x20>)
   80808:	4798      	blx	r3
	sprintf(chars, "%i", number);
   8080a:	4622      	mov	r2, r4
   8080c:	4905      	ldr	r1, [pc, #20]	; (80824 <lcdWrite4DigitNumber+0x24>)
   8080e:	a801      	add	r0, sp, #4
   80810:	4b05      	ldr	r3, [pc, #20]	; (80828 <lcdWrite4DigitNumber+0x28>)
   80812:	4798      	blx	r3
	lcdWriteAsciiString(chars);
   80814:	a801      	add	r0, sp, #4
   80816:	4b05      	ldr	r3, [pc, #20]	; (8082c <lcdWrite4DigitNumber+0x2c>)
   80818:	4798      	blx	r3
}
   8081a:	2000      	movs	r0, #0
   8081c:	b002      	add	sp, #8
   8081e:	bd10      	pop	{r4, pc}
   80820:	00080a01 	.word	0x00080a01
   80824:	000886b4 	.word	0x000886b4
   80828:	00082581 	.word	0x00082581
   8082c:	000807d9 	.word	0x000807d9

00080830 <lcdWriteButtonValue>:

int lcdWriteButtonValue(buttonType inputButton)
/* Writes the text corresponding to one of the buttosn on the LCD dispaly using lcdWriteAsciiString() 
 * Output should be one of SELECT, LEFT, UP, DOWN, RIGHT on the LCD display
 * if no buttons is pushed you can chose on displaying nothing or NONE  */
{
   80830:	b508      	push	{r3, lr}
	/* Write code here */
	switch (inputButton)
   80832:	2805      	cmp	r0, #5
   80834:	d807      	bhi.n	80846 <lcdWriteButtonValue+0x16>
   80836:	e8df f000 	tbb	[pc, r0]
   8083a:	0c14      	.short	0x0c14
   8083c:	18030810 	.word	0x18030810
	{
		case btnSELECT:
		lcdWriteAsciiString("Select");
   80840:	480c      	ldr	r0, [pc, #48]	; (80874 <lcdWriteButtonValue+0x44>)
   80842:	4b0d      	ldr	r3, [pc, #52]	; (80878 <lcdWriteButtonValue+0x48>)
   80844:	4798      	blx	r3
		break;
		
	}
	
	return 0;	/* Assuming everything went ok */
   80846:	2000      	movs	r0, #0
   80848:	bd08      	pop	{r3, pc}
		lcdWriteAsciiString("LEFT");
   8084a:	480c      	ldr	r0, [pc, #48]	; (8087c <lcdWriteButtonValue+0x4c>)
   8084c:	4b0a      	ldr	r3, [pc, #40]	; (80878 <lcdWriteButtonValue+0x48>)
   8084e:	4798      	blx	r3
		break;
   80850:	e7f9      	b.n	80846 <lcdWriteButtonValue+0x16>
		lcdWriteAsciiString("UP");
   80852:	480b      	ldr	r0, [pc, #44]	; (80880 <lcdWriteButtonValue+0x50>)
   80854:	4b08      	ldr	r3, [pc, #32]	; (80878 <lcdWriteButtonValue+0x48>)
   80856:	4798      	blx	r3
		break;
   80858:	e7f5      	b.n	80846 <lcdWriteButtonValue+0x16>
		lcdWriteAsciiString("DOWN");
   8085a:	480a      	ldr	r0, [pc, #40]	; (80884 <lcdWriteButtonValue+0x54>)
   8085c:	4b06      	ldr	r3, [pc, #24]	; (80878 <lcdWriteButtonValue+0x48>)
   8085e:	4798      	blx	r3
		break;
   80860:	e7f1      	b.n	80846 <lcdWriteButtonValue+0x16>
		lcdWriteAsciiString("RIGHT");
   80862:	4809      	ldr	r0, [pc, #36]	; (80888 <lcdWriteButtonValue+0x58>)
   80864:	4b04      	ldr	r3, [pc, #16]	; (80878 <lcdWriteButtonValue+0x48>)
   80866:	4798      	blx	r3
		break;
   80868:	e7ed      	b.n	80846 <lcdWriteButtonValue+0x16>
		lcdWriteAsciiString("NONE");
   8086a:	4808      	ldr	r0, [pc, #32]	; (8088c <lcdWriteButtonValue+0x5c>)
   8086c:	4b02      	ldr	r3, [pc, #8]	; (80878 <lcdWriteButtonValue+0x48>)
   8086e:	4798      	blx	r3
		break;
   80870:	e7e9      	b.n	80846 <lcdWriteButtonValue+0x16>
   80872:	bf00      	nop
   80874:	000886b8 	.word	0x000886b8
   80878:	000807d9 	.word	0x000807d9
   8087c:	000886c0 	.word	0x000886c0
   80880:	000886c8 	.word	0x000886c8
   80884:	000886cc 	.word	0x000886cc
   80888:	000886d4 	.word	0x000886d4
   8088c:	000886dc 	.word	0x000886dc

00080890 <lcdWrite>:
/*
 *	writes the byte (8 bits) to the LCD display as two consecutive 4 bits 
 *	type = 0 controls the display
 *	type = 1 writes the content of the byte (usually interpreted as ASCII-code) to the display
 */
{
   80890:	b5f0      	push	{r4, r5, r6, r7, lr}
   80892:	b085      	sub	sp, #20
   80894:	4605      	mov	r5, r0
   80896:	460c      	mov	r4, r1
	/* In it's infinite wisdom the shield has the data pins in mirrored order compared to the Due board */
	uint8_t mirror_pin[16]={0b0000,0b1000,0b0100,0b1100,0b0010,0b1010,0b0110,0b1110,0b0001,0b1001,0b0101,0b1101,0b0011,0b1011,0b0111,0b1111};
   80898:	4b1d      	ldr	r3, [pc, #116]	; (80910 <lcdWrite+0x80>)
   8089a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   8089c:	ae04      	add	r6, sp, #16
   8089e:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}

	byte_orig = byte;

	/* write the first 4 bits to the shield. */
	byte = byte>>4;
	byte = mirror_pin[byte];
   808a2:	eb06 1315 	add.w	r3, r6, r5, lsr #4
	byte32 = (uint32_t)byte << 23;
   808a6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   808aa:	05db      	lsls	r3, r3, #23
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   808ac:	bb5c      	cbnz	r4, 80906 <lcdWrite+0x76>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   808ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   808b2:	4a18      	ldr	r2, [pc, #96]	; (80914 <lcdWrite+0x84>)
   808b4:	6351      	str	r1, [r2, #52]	; 0x34
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   808b6:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   808ba:	4c16      	ldr	r4, [pc, #88]	; (80914 <lcdWrite+0x84>)
   808bc:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   808be:	43db      	mvns	r3, r3
   808c0:	f003 63f0 	and.w	r3, r3, #125829120	; 0x7800000
   808c4:	6363      	str	r3, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   808c6:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
   808ca:	6327      	str	r7, [r4, #48]	; 0x30
	mirrored_output = byte<<4;
	
	ioport_set_pin_level(LCD_RS, type); 
	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);
   808cc:	2001      	movs	r0, #1
   808ce:	4e12      	ldr	r6, [pc, #72]	; (80918 <lcdWrite+0x88>)
   808d0:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   808d2:	6367      	str	r7, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delayMicroseconds(100);
   808d4:	2064      	movs	r0, #100	; 0x64
   808d6:	47b0      	blx	r6
	
	/* write the second 4 bits to the shield. */
	byte = byte_orig;
	byte = byte & 0x0f;
	byte = mirror_pin[byte];
   808d8:	f005 050f 	and.w	r5, r5, #15
   808dc:	ab04      	add	r3, sp, #16
   808de:	441d      	add	r5, r3
	byte32 = (uint32_t)byte<<23;
   808e0:	f815 3c10 	ldrb.w	r3, [r5, #-16]
   808e4:	05db      	lsls	r3, r3, #23
	base->PIO_SODR = mask & level;
   808e6:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   808ea:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   808ec:	43db      	mvns	r3, r3
   808ee:	f003 63f0 	and.w	r3, r3, #125829120	; 0x7800000
   808f2:	6363      	str	r3, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   808f4:	6327      	str	r7, [r4, #48]	; 0x30
	mirrored_output = mirrored_output + byte;

	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);
   808f6:	2001      	movs	r0, #1
   808f8:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   808fa:	6367      	str	r7, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(100);
   808fc:	2064      	movs	r0, #100	; 0x64
   808fe:	47b0      	blx	r6
	
	return 0;
}
   80900:	2000      	movs	r0, #0
   80902:	b005      	add	sp, #20
   80904:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80906:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   8090a:	4a02      	ldr	r2, [pc, #8]	; (80914 <lcdWrite+0x84>)
   8090c:	6311      	str	r1, [r2, #48]	; 0x30
   8090e:	e7d2      	b.n	808b6 <lcdWrite+0x26>
   80910:	000886e4 	.word	0x000886e4
   80914:	400e1200 	.word	0x400e1200
   80918:	0008079d 	.word	0x0008079d

0008091c <lcdInit>:
{
   8091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80920:	4c34      	ldr	r4, [pc, #208]	; (809f4 <lcdInit+0xd8>)
   80922:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   80926:	6127      	str	r7, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80928:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8092c:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   80930:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80932:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_OER = mask;
   80936:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
   8093a:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = mask;
   8093c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80940:	6365      	str	r5, [r4, #52]	; 0x34
	delayMicroseconds(30000);		/* wait > 15 ms */
   80942:	f247 5030 	movw	r0, #30000	; 0x7530
   80946:	4e2c      	ldr	r6, [pc, #176]	; (809f8 <lcdInit+0xdc>)
   80948:	47b0      	blx	r6
   8094a:	6367      	str	r7, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8094c:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
   80950:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80954:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
   80958:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8095c:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
   80960:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   80964:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
   80968:	6367      	str	r7, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8096a:	6325      	str	r5, [r4, #48]	; 0x30
	delayMicroseconds(1);		/* wait 1 us */
   8096c:	2001      	movs	r0, #1
   8096e:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80970:	6365      	str	r5, [r4, #52]	; 0x34
	delayMicroseconds(4100);	/* wait for more than 4,1 ms */
   80972:	f241 0004 	movw	r0, #4100	; 0x1004
   80976:	47b0      	blx	r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80978:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   8097c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80980:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   80984:	6367      	str	r7, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80986:	6325      	str	r5, [r4, #48]	; 0x30
	delayMicroseconds(1);	/* delay 1 us */
   80988:	2001      	movs	r0, #1
   8098a:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8098c:	6365      	str	r5, [r4, #52]	; 0x34
	delayMicroseconds(100);	/* wait 100 us */
   8098e:	2064      	movs	r0, #100	; 0x64
   80990:	47b0      	blx	r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80992:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80996:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8099a:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   8099e:	6367      	str	r7, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   809a0:	6325      	str	r5, [r4, #48]	; 0x30
	delayMicroseconds(1);	/* wait 1 us */
   809a2:	2001      	movs	r0, #1
   809a4:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   809a6:	6365      	str	r5, [r4, #52]	; 0x34
	delayMicroseconds(100);	/* wait 100 us */
   809a8:	2064      	movs	r0, #100	; 0x64
   809aa:	47b0      	blx	r6
   809ac:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   809b0:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   809b4:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   809b8:	6367      	str	r7, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   809ba:	6325      	str	r5, [r4, #48]	; 0x30
	delayMicroseconds(1);
   809bc:	2001      	movs	r0, #1
   809be:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   809c0:	6365      	str	r5, [r4, #52]	; 0x34
	delayMicroseconds(100);
   809c2:	2064      	movs	r0, #100	; 0x64
   809c4:	47b0      	blx	r6
	lcdWrite(0b00101000, LOW);		/* Two rows, small font */
   809c6:	2100      	movs	r1, #0
   809c8:	2028      	movs	r0, #40	; 0x28
   809ca:	4c0c      	ldr	r4, [pc, #48]	; (809fc <lcdInit+0xe0>)
   809cc:	47a0      	blx	r4
	lcdWrite(0b00001000, LOW);		/* Display off */
   809ce:	2100      	movs	r1, #0
   809d0:	2008      	movs	r0, #8
   809d2:	47a0      	blx	r4
	lcdWrite(0b00000001, LOW);		/* Display clear */
   809d4:	2100      	movs	r1, #0
   809d6:	2001      	movs	r0, #1
   809d8:	47a0      	blx	r4
	delayMicroseconds(3000);
   809da:	f640 30b8 	movw	r0, #3000	; 0xbb8
   809de:	47b0      	blx	r6
	lcdWrite(0b00000110, LOW);		/* Entry mode set: move cursor right, no display shift */
   809e0:	2100      	movs	r1, #0
   809e2:	2006      	movs	r0, #6
   809e4:	47a0      	blx	r4
	lcdWrite(0b00001111 ,LOW);		/* Display on, cursor on, blinking on */
   809e6:	2100      	movs	r1, #0
   809e8:	200f      	movs	r0, #15
   809ea:	47a0      	blx	r4
}
   809ec:	2000      	movs	r0, #0
   809ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   809f2:	bf00      	nop
   809f4:	400e1200 	.word	0x400e1200
   809f8:	0008079d 	.word	0x0008079d
   809fc:	00080891 	.word	0x00080891

00080a00 <lcdClearDisplay>:

int lcdClearDisplay(void)
{
   80a00:	b508      	push	{r3, lr}
	/* Write code here */
	lcdWrite(0x01, false);
   80a02:	2100      	movs	r1, #0
   80a04:	2001      	movs	r0, #1
   80a06:	4b04      	ldr	r3, [pc, #16]	; (80a18 <lcdClearDisplay+0x18>)
   80a08:	4798      	blx	r3
	delayMicroseconds(3000);
   80a0a:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80a0e:	4b03      	ldr	r3, [pc, #12]	; (80a1c <lcdClearDisplay+0x1c>)
   80a10:	4798      	blx	r3
	
	
	return 0;
}
   80a12:	2000      	movs	r0, #0
   80a14:	bd08      	pop	{r3, pc}
   80a16:	bf00      	nop
   80a18:	00080891 	.word	0x00080891
   80a1c:	0008079d 	.word	0x0008079d

00080a20 <main>:
void setUp(void);
void tearDown(void);
void resetTest(void);

int main(void)
{
   80a20:	b580      	push	{r7, lr}
	sysclk_init();	/* Insert system clock initialization code here (sysclk_init()). */
   80a22:	4b2c      	ldr	r3, [pc, #176]	; (80ad4 <main+0xb4>)
   80a24:	4798      	blx	r3
	board_init();
   80a26:	4b2c      	ldr	r3, [pc, #176]	; (80ad8 <main+0xb8>)
   80a28:	4798      	blx	r3

	configureConsole();	/* Initialize the console UART used from within Atmel Studio*/
   80a2a:	4b2c      	ldr	r3, [pc, #176]	; (80adc <main+0xbc>)
   80a2c:	4798      	blx	r3
	
	/* From here on the program uses the Unity testing framework */
	UnityBegin("../test/test_delayFunctions.c");	/* Run the tests for the delay from the test-file */
   80a2e:	482c      	ldr	r0, [pc, #176]	; (80ae0 <main+0xc0>)
   80a30:	4e2c      	ldr	r6, [pc, #176]	; (80ae4 <main+0xc4>)
   80a32:	47b0      	blx	r6
	RUN_TEST(test_delayTimerIsInitialisedProperly, 12);
   80a34:	220c      	movs	r2, #12
   80a36:	492c      	ldr	r1, [pc, #176]	; (80ae8 <main+0xc8>)
   80a38:	482c      	ldr	r0, [pc, #176]	; (80aec <main+0xcc>)
   80a3a:	4c2d      	ldr	r4, [pc, #180]	; (80af0 <main+0xd0>)
   80a3c:	47a0      	blx	r4
	RUN_TEST(test_delayCountsProperly, 14);
   80a3e:	220e      	movs	r2, #14
   80a40:	492c      	ldr	r1, [pc, #176]	; (80af4 <main+0xd4>)
   80a42:	482d      	ldr	r0, [pc, #180]	; (80af8 <main+0xd8>)
   80a44:	47a0      	blx	r4
	UnityEnd();
   80a46:	4d2d      	ldr	r5, [pc, #180]	; (80afc <main+0xdc>)
   80a48:	47a8      	blx	r5
	
	UnityBegin("../test/test_lcdFunctions.c");	/* Run the tests for the LCD from the test-file */
   80a4a:	482d      	ldr	r0, [pc, #180]	; (80b00 <main+0xe0>)
   80a4c:	47b0      	blx	r6
	RUN_TEST(test_initialisatinOfTheLCD, 20);
   80a4e:	2214      	movs	r2, #20
   80a50:	492c      	ldr	r1, [pc, #176]	; (80b04 <main+0xe4>)
   80a52:	482d      	ldr	r0, [pc, #180]	; (80b08 <main+0xe8>)
   80a54:	47a0      	blx	r4
	RUN_TEST(test_writingCharactersToTheLCD, 22);
   80a56:	2216      	movs	r2, #22
   80a58:	492c      	ldr	r1, [pc, #176]	; (80b0c <main+0xec>)
   80a5a:	482d      	ldr	r0, [pc, #180]	; (80b10 <main+0xf0>)
   80a5c:	47a0      	blx	r4
	delayMicroseconds(1000000);	/* These delays are necessary if you want to see the text on the display before it disappears */
   80a5e:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80b68 <main+0x148>
   80a62:	4640      	mov	r0, r8
   80a64:	4f2b      	ldr	r7, [pc, #172]	; (80b14 <main+0xf4>)
   80a66:	47b8      	blx	r7
	RUN_TEST(test_clearingTheLCDDisplay, 23);
   80a68:	2217      	movs	r2, #23
   80a6a:	492b      	ldr	r1, [pc, #172]	; (80b18 <main+0xf8>)
   80a6c:	482b      	ldr	r0, [pc, #172]	; (80b1c <main+0xfc>)
   80a6e:	47a0      	blx	r4
	UnityEnd();
   80a70:	47a8      	blx	r5
	
	UnityBegin("../test/test_adcFunctions.c");	/* Run the tests for the ADC from the test-file */
   80a72:	482b      	ldr	r0, [pc, #172]	; (80b20 <main+0x100>)
   80a74:	47b0      	blx	r6
	RUN_TEST(test_ADConverterInitialisesProperly, 30);
   80a76:	221e      	movs	r2, #30
   80a78:	492a      	ldr	r1, [pc, #168]	; (80b24 <main+0x104>)
   80a7a:	482b      	ldr	r0, [pc, #172]	; (80b28 <main+0x108>)
   80a7c:	47a0      	blx	r4
	RUN_TEST(test_ADConverterReadsValueWithNoButtonPressed, 35);
   80a7e:	2223      	movs	r2, #35	; 0x23
   80a80:	492a      	ldr	r1, [pc, #168]	; (80b2c <main+0x10c>)
   80a82:	482b      	ldr	r0, [pc, #172]	; (80b30 <main+0x110>)
   80a84:	47a0      	blx	r4
	UnityEnd();
   80a86:	47a8      	blx	r5

	UnityBegin("../test/test_buttons.c");	/* Run the tests for the buttons from the test-file */
   80a88:	482a      	ldr	r0, [pc, #168]	; (80b34 <main+0x114>)
   80a8a:	47b0      	blx	r6
	RUN_TEST(test_noButtonIsPressed, 40);
   80a8c:	2228      	movs	r2, #40	; 0x28
   80a8e:	492a      	ldr	r1, [pc, #168]	; (80b38 <main+0x118>)
   80a90:	482a      	ldr	r0, [pc, #168]	; (80b3c <main+0x11c>)
   80a92:	47a0      	blx	r4
	UnityEnd();
   80a94:	47a8      	blx	r5
		
	UnityBegin("../test/test_lcdApplication.c");	/* Run the tests for displaying a button on the LCD from the test-file */
   80a96:	482a      	ldr	r0, [pc, #168]	; (80b40 <main+0x120>)
   80a98:	47b0      	blx	r6
	RUN_TEST(test_writing4DigitNumberOnTheLCDDisplay, 50);
   80a9a:	2232      	movs	r2, #50	; 0x32
   80a9c:	4929      	ldr	r1, [pc, #164]	; (80b44 <main+0x124>)
   80a9e:	482a      	ldr	r0, [pc, #168]	; (80b48 <main+0x128>)
   80aa0:	47a0      	blx	r4
	delayMicroseconds(1000000);	/* These delays are necessary if you want to see the text on the display before it disappears */
   80aa2:	4640      	mov	r0, r8
   80aa4:	47b8      	blx	r7
	RUN_TEST(test_writingAsciiStringOnTheLCDDisplay, 52);
   80aa6:	2234      	movs	r2, #52	; 0x34
   80aa8:	4928      	ldr	r1, [pc, #160]	; (80b4c <main+0x12c>)
   80aaa:	4829      	ldr	r0, [pc, #164]	; (80b50 <main+0x130>)
   80aac:	47a0      	blx	r4
	delayMicroseconds(1000000);	/* These delays are necessary if you want to see the text on the display before it disappears */
   80aae:	4640      	mov	r0, r8
   80ab0:	47b8      	blx	r7
	RUN_TEST(test_writingButtonOnTheLCDDisplay, 54);
   80ab2:	2236      	movs	r2, #54	; 0x36
   80ab4:	4927      	ldr	r1, [pc, #156]	; (80b54 <main+0x134>)
   80ab6:	4828      	ldr	r0, [pc, #160]	; (80b58 <main+0x138>)
   80ab8:	47a0      	blx	r4
	UnityEnd();
   80aba:	47a8      	blx	r5
	////}
	
	/* Infinite loop to display the current button pressed */
	while(1)
	{
		lcdClearDisplay();
   80abc:	4e27      	ldr	r6, [pc, #156]	; (80b5c <main+0x13c>)
		lcdWriteButtonValue(readLCDbutton());
   80abe:	4d28      	ldr	r5, [pc, #160]	; (80b60 <main+0x140>)
   80ac0:	4c28      	ldr	r4, [pc, #160]	; (80b64 <main+0x144>)
		lcdClearDisplay();
   80ac2:	47b0      	blx	r6
		lcdWriteButtonValue(readLCDbutton());
   80ac4:	47a8      	blx	r5
   80ac6:	47a0      	blx	r4
		delayMicroseconds(50000);
   80ac8:	f24c 3050 	movw	r0, #50000	; 0xc350
   80acc:	4b11      	ldr	r3, [pc, #68]	; (80b14 <main+0xf4>)
   80ace:	4798      	blx	r3
   80ad0:	e7f7      	b.n	80ac2 <main+0xa2>
   80ad2:	bf00      	nop
   80ad4:	00081bf1 	.word	0x00081bf1
   80ad8:	00081c55 	.word	0x00081c55
   80adc:	000806cd 	.word	0x000806cd
   80ae0:	000886f4 	.word	0x000886f4
   80ae4:	00081ae5 	.word	0x00081ae5
   80ae8:	00088714 	.word	0x00088714
   80aec:	00080c0d 	.word	0x00080c0d
   80af0:	00081a89 	.word	0x00081a89
   80af4:	0008873c 	.word	0x0008873c
   80af8:	00080c39 	.word	0x00080c39
   80afc:	00081b01 	.word	0x00081b01
   80b00:	00088758 	.word	0x00088758
   80b04:	00088774 	.word	0x00088774
   80b08:	00080e0d 	.word	0x00080e0d
   80b0c:	00088790 	.word	0x00088790
   80b10:	00080e6d 	.word	0x00080e6d
   80b14:	0008079d 	.word	0x0008079d
   80b18:	000887b0 	.word	0x000887b0
   80b1c:	00081239 	.word	0x00081239
   80b20:	000887cc 	.word	0x000887cc
   80b24:	000887e8 	.word	0x000887e8
   80b28:	00080b71 	.word	0x00080b71
   80b2c:	0008880c 	.word	0x0008880c
   80b30:	00080bbd 	.word	0x00080bbd
   80b34:	0008883c 	.word	0x0008883c
   80b38:	00088854 	.word	0x00088854
   80b3c:	00080bed 	.word	0x00080bed
   80b40:	0008886c 	.word	0x0008886c
   80b44:	0008888c 	.word	0x0008888c
   80b48:	00080cb5 	.word	0x00080cb5
   80b4c:	000888b4 	.word	0x000888b4
   80b50:	00080d29 	.word	0x00080d29
   80b54:	000888dc 	.word	0x000888dc
   80b58:	00080d9d 	.word	0x00080d9d
   80b5c:	00080a01 	.word	0x00080a01
   80b60:	000804f9 	.word	0x000804f9
   80b64:	00080831 	.word	0x00080831
   80b68:	000f4240 	.word	0x000f4240

00080b6c <setUp>:
	
	return 0;
}

void setUp(void)
{
   80b6c:	4770      	bx	lr

00080b6e <tearDown>:
	/* Do nothing */
}

void tearDown(void)
{
   80b6e:	4770      	bx	lr

00080b70 <test_ADConverterInitialisesProperly>:
uint32_t *const p_ADC_CHSR = (uint32_t *) (ADC_BASE_ADDRESS + 0x18U);
uint32_t *const p_PMC_PCSR1 = (uint32_t *) 0x400E0708U;


void test_ADConverterInitialisesProperly(void)
{
   80b70:	b510      	push	{r4, lr}
   80b72:	b082      	sub	sp, #8
	analogInit(0);	/* Analog In 0 */
   80b74:	2000      	movs	r0, #0
   80b76:	4b0b      	ldr	r3, [pc, #44]	; (80ba4 <test_ADConverterInitialisesProperly+0x34>)
   80b78:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH_MESSAGE(5, *p_PMC_PCSR1, "PMC has not enabled the peripheral ADC clock");	/* Asserting the PMC manager has activated the ADC clock */
   80b7a:	4b0b      	ldr	r3, [pc, #44]	; (80ba8 <test_ADConverterInitialisesProperly+0x38>)
   80b7c:	681a      	ldr	r2, [r3, #0]
   80b7e:	2315      	movs	r3, #21
   80b80:	9300      	str	r3, [sp, #0]
   80b82:	4b0a      	ldr	r3, [pc, #40]	; (80bac <test_ADConverterInitialisesProperly+0x3c>)
   80b84:	f04f 31ff 	mov.w	r1, #4294967295
   80b88:	2020      	movs	r0, #32
   80b8a:	4c09      	ldr	r4, [pc, #36]	; (80bb0 <test_ADConverterInitialisesProperly+0x40>)
   80b8c:	47a0      	blx	r4
	TEST_ASSERT_BIT_HIGH_MESSAGE(7, *p_ADC_CHSR, "ADC channel 7 is not enabled");	/* Asserting that ADC channel 7 is enabled */
   80b8e:	4b09      	ldr	r3, [pc, #36]	; (80bb4 <test_ADConverterInitialisesProperly+0x44>)
   80b90:	681a      	ldr	r2, [r3, #0]
   80b92:	2316      	movs	r3, #22
   80b94:	9300      	str	r3, [sp, #0]
   80b96:	4b08      	ldr	r3, [pc, #32]	; (80bb8 <test_ADConverterInitialisesProperly+0x48>)
   80b98:	f04f 31ff 	mov.w	r1, #4294967295
   80b9c:	2080      	movs	r0, #128	; 0x80
   80b9e:	47a0      	blx	r4
}
   80ba0:	b002      	add	sp, #8
   80ba2:	bd10      	pop	{r4, pc}
   80ba4:	00080161 	.word	0x00080161
   80ba8:	400e0708 	.word	0x400e0708
   80bac:	00088900 	.word	0x00088900
   80bb0:	000818e1 	.word	0x000818e1
   80bb4:	400c0018 	.word	0x400c0018
   80bb8:	00088930 	.word	0x00088930

00080bbc <test_ADConverterReadsValueWithNoButtonPressed>:

void test_ADConverterReadsValueWithNoButtonPressed(void)
{
   80bbc:	b510      	push	{r4, lr}
   80bbe:	b082      	sub	sp, #8
  TEST_ASSERT_UINT32_WITHIN(400, 3800, analogRead(0));
   80bc0:	2000      	movs	r0, #0
   80bc2:	4b08      	ldr	r3, [pc, #32]	; (80be4 <test_ADConverterReadsValueWithNoButtonPressed+0x28>)
   80bc4:	4798      	blx	r3
   80bc6:	2324      	movs	r3, #36	; 0x24
   80bc8:	9301      	str	r3, [sp, #4]
   80bca:	231b      	movs	r3, #27
   80bcc:	9300      	str	r3, [sp, #0]
   80bce:	2300      	movs	r3, #0
   80bd0:	4602      	mov	r2, r0
   80bd2:	f640 61d8 	movw	r1, #3800	; 0xed8
   80bd6:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80bda:	4c03      	ldr	r4, [pc, #12]	; (80be8 <test_ADConverterReadsValueWithNoButtonPressed+0x2c>)
   80bdc:	47a0      	blx	r4

}
   80bde:	b002      	add	sp, #8
   80be0:	bd10      	pop	{r4, pc}
   80be2:	bf00      	nop
   80be4:	000801e1 	.word	0x000801e1
   80be8:	00081959 	.word	0x00081959

00080bec <test_noButtonIsPressed>:
#include "../unity/unity.h"
#include "../src/buttons.h"
#include "test_buttons.h"

void test_noButtonIsPressed(void)
{
   80bec:	b508      	push	{r3, lr}
	TEST_ASSERT_TRUE(readLCDbutton() == btnNONE);
   80bee:	4b04      	ldr	r3, [pc, #16]	; (80c00 <test_noButtonIsPressed+0x14>)
   80bf0:	4798      	blx	r3
   80bf2:	2805      	cmp	r0, #5
   80bf4:	d003      	beq.n	80bfe <test_noButtonIsPressed+0x12>
   80bf6:	2110      	movs	r1, #16
   80bf8:	4802      	ldr	r0, [pc, #8]	; (80c04 <test_noButtonIsPressed+0x18>)
   80bfa:	4b03      	ldr	r3, [pc, #12]	; (80c08 <test_noButtonIsPressed+0x1c>)
   80bfc:	4798      	blx	r3
   80bfe:	bd08      	pop	{r3, pc}
   80c00:	000804f9 	.word	0x000804f9
   80c04:	00088950 	.word	0x00088950
   80c08:	00081a1d 	.word	0x00081a1d

00080c0c <test_delayTimerIsInitialisedProperly>:
uint32_t *const p_TC0_CMR0 = (uint32_t *) (TC0_BASE_ADDRESS + 0x00U+0*0x40U+0x04U);	/* defines the address for channel mode of the TC0 status register for timer channel 0  */
uint32_t *const p_TC0_CV0 = (uint32_t *) (TC0_BASE_ADDRESS + 0x00U+0*0x40U+0x10U);	/* defines the address for runnning counter value of the TC0 status register for timer channel 0  */
uint32_t *const p_TC0_SR0 = (uint32_t *) (TC0_BASE_ADDRESS + 0x00U+0*0x40U+0x20U);	/* defines the address for status the TC0 status register for timer channel 0  */

void test_delayTimerIsInitialisedProperly(void)
{
   80c0c:	b510      	push	{r4, lr}
   80c0e:	b082      	sub	sp, #8
	delayInit();
   80c10:	4b06      	ldr	r3, [pc, #24]	; (80c2c <test_delayTimerIsInitialisedProperly+0x20>)
   80c12:	4798      	blx	r3
	TEST_ASSERT_BITS(0x0111, 0x00U, *p_TC0_CMR0);	/* Check that the proper timer and channel is enabled */
   80c14:	4b06      	ldr	r3, [pc, #24]	; (80c30 <test_delayTimerIsInitialisedProperly+0x24>)
   80c16:	681a      	ldr	r2, [r3, #0]
   80c18:	2318      	movs	r3, #24
   80c1a:	9300      	str	r3, [sp, #0]
   80c1c:	2300      	movs	r3, #0
   80c1e:	4619      	mov	r1, r3
   80c20:	f240 1011 	movw	r0, #273	; 0x111
   80c24:	4c03      	ldr	r4, [pc, #12]	; (80c34 <test_delayTimerIsInitialisedProperly+0x28>)
   80c26:	47a0      	blx	r4
}
   80c28:	b002      	add	sp, #8
   80c2a:	bd10      	pop	{r4, pc}
   80c2c:	00080761 	.word	0x00080761
   80c30:	40080004 	.word	0x40080004
   80c34:	000818e1 	.word	0x000818e1

00080c38 <test_delayCountsProperly>:

void test_delayCountsProperly(void)
{
   80c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80c3c:	b083      	sub	sp, #12
	/* Note that it is difficult to write good automated tests for the timer counter */
	//delayInit();	/* Checked in the previous test */
	
	delayMicroseconds(1);
   80c3e:	2001      	movs	r0, #1
   80c40:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80cac <test_delayCountsProperly+0x74>
   80c44:	47c8      	blx	r9
	/* when the timer has stopped check that the counter has the right value 
	 * the timer resets when it starts, not when it stops */
	TEST_ASSERT_BIT_LOW(16, *p_TC0_SR0);				/* Check that the timer clock is stopped, unfortuantely we can't test that it is running */
   80c46:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80cb0 <test_delayCountsProperly+0x78>
   80c4a:	f8d8 2000 	ldr.w	r2, [r8]
   80c4e:	2323      	movs	r3, #35	; 0x23
   80c50:	9300      	str	r3, [sp, #0]
   80c52:	2300      	movs	r3, #0
   80c54:	4619      	mov	r1, r3
   80c56:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   80c5a:	4f11      	ldr	r7, [pc, #68]	; (80ca0 <test_delayCountsProperly+0x68>)
   80c5c:	47b8      	blx	r7
	TEST_ASSERT_UINT32_WITHIN(40U, 42U, *p_TC0_CV0);	/* It takes appr. 20 clock cycles to read and compare the value */
   80c5e:	4e11      	ldr	r6, [pc, #68]	; (80ca4 <test_delayCountsProperly+0x6c>)
   80c60:	6832      	ldr	r2, [r6, #0]
   80c62:	2424      	movs	r4, #36	; 0x24
   80c64:	9401      	str	r4, [sp, #4]
   80c66:	9400      	str	r4, [sp, #0]
   80c68:	2300      	movs	r3, #0
   80c6a:	212a      	movs	r1, #42	; 0x2a
   80c6c:	2028      	movs	r0, #40	; 0x28
   80c6e:	4d0e      	ldr	r5, [pc, #56]	; (80ca8 <test_delayCountsProperly+0x70>)
   80c70:	47a8      	blx	r5
		
	delayMicroseconds(200);
   80c72:	20c8      	movs	r0, #200	; 0xc8
   80c74:	47c8      	blx	r9
	TEST_ASSERT_BIT_LOW(16, *p_TC0_SR0);				/* Check that the timer clock is stopped */
   80c76:	f8d8 2000 	ldr.w	r2, [r8]
   80c7a:	2327      	movs	r3, #39	; 0x27
   80c7c:	9300      	str	r3, [sp, #0]
   80c7e:	2300      	movs	r3, #0
   80c80:	4619      	mov	r1, r3
   80c82:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   80c86:	47b8      	blx	r7
	TEST_ASSERT_UINT32_WITHIN(40U, 8420U, *p_TC0_CV0);	/* It takes appr. 20 clock cycles to read and compare the value */
   80c88:	6832      	ldr	r2, [r6, #0]
   80c8a:	9401      	str	r4, [sp, #4]
   80c8c:	2028      	movs	r0, #40	; 0x28
   80c8e:	9000      	str	r0, [sp, #0]
   80c90:	2300      	movs	r3, #0
   80c92:	f242 01e4 	movw	r1, #8420	; 0x20e4
   80c96:	47a8      	blx	r5
   80c98:	b003      	add	sp, #12
   80c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80c9e:	bf00      	nop
   80ca0:	000818e1 	.word	0x000818e1
   80ca4:	40080010 	.word	0x40080010
   80ca8:	00081959 	.word	0x00081959
   80cac:	0008079d 	.word	0x0008079d
   80cb0:	40080020 	.word	0x40080020

00080cb4 <test_writing4DigitNumberOnTheLCDDisplay>:
#include "test_lcdApplication.h"

extern uint32_t *const p_PIOC_ODSR;	/* The pointer to the status (values) of the output pins of the B register, address is defined in test_lcdfunctions.c  */

void test_writing4DigitNumberOnTheLCDDisplay(void)
{
   80cb4:	b530      	push	{r4, r5, lr}
   80cb6:	b083      	sub	sp, #12
	lcdClearDisplay();	/* Can be used since lcdClearDisplay() is already developed and tested */
   80cb8:	4b15      	ldr	r3, [pc, #84]	; (80d10 <test_writing4DigitNumberOnTheLCDDisplay+0x5c>)
   80cba:	4798      	blx	r3
	TEST_ASSERT_FALSE(lcdWrite4DigitNumber(1357));
   80cbc:	f240 504d 	movw	r0, #1357	; 0x54d
   80cc0:	4b14      	ldr	r3, [pc, #80]	; (80d14 <test_writing4DigitNumberOnTheLCDDisplay+0x60>)
   80cc2:	4798      	blx	r3
   80cc4:	b9f0      	cbnz	r0, 80d04 <test_writing4DigitNumberOnTheLCDDisplay+0x50>
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);	/* The RS bit on the LCD should be set to high since it is writing a character to the display */
   80cc6:	4b14      	ldr	r3, [pc, #80]	; (80d18 <test_writing4DigitNumberOnTheLCDDisplay+0x64>)
   80cc8:	681d      	ldr	r5, [r3, #0]
   80cca:	682a      	ldr	r2, [r5, #0]
   80ccc:	2316      	movs	r3, #22
   80cce:	9300      	str	r3, [sp, #0]
   80cd0:	2300      	movs	r3, #0
   80cd2:	f04f 31ff 	mov.w	r1, #4294967295
   80cd6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80cda:	4c10      	ldr	r4, [pc, #64]	; (80d1c <test_writing4DigitNumberOnTheLCDDisplay+0x68>)
   80cdc:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);	/* The Enable bit on the LCD should be set to low to indicate that all data has been written  */
   80cde:	682a      	ldr	r2, [r5, #0]
   80ce0:	2317      	movs	r3, #23
   80ce2:	9300      	str	r3, [sp, #0]
   80ce4:	2300      	movs	r3, #0
   80ce6:	4619      	mov	r1, r3
   80ce8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80cec:	47a0      	blx	r4
	/* We cannot test the actual value of the last character shown on the LCD, 
	   but we can test that the output to the LCD on PC23-PC26 is what we expect */
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1110<<23), *p_PIOC_ODSR);
   80cee:	682a      	ldr	r2, [r5, #0]
   80cf0:	231a      	movs	r3, #26
   80cf2:	9300      	str	r3, [sp, #0]
   80cf4:	2300      	movs	r3, #0
   80cf6:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
   80cfa:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80cfe:	47a0      	blx	r4
}
   80d00:	b003      	add	sp, #12
   80d02:	bd30      	pop	{r4, r5, pc}
	TEST_ASSERT_FALSE(lcdWrite4DigitNumber(1357));
   80d04:	2115      	movs	r1, #21
   80d06:	4806      	ldr	r0, [pc, #24]	; (80d20 <test_writing4DigitNumberOnTheLCDDisplay+0x6c>)
   80d08:	4b06      	ldr	r3, [pc, #24]	; (80d24 <test_writing4DigitNumberOnTheLCDDisplay+0x70>)
   80d0a:	4798      	blx	r3
   80d0c:	e7db      	b.n	80cc6 <test_writing4DigitNumberOnTheLCDDisplay+0x12>
   80d0e:	bf00      	nop
   80d10:	00080a01 	.word	0x00080a01
   80d14:	00080801 	.word	0x00080801
   80d18:	0008899c 	.word	0x0008899c
   80d1c:	000818e1 	.word	0x000818e1
   80d20:	0008896c 	.word	0x0008896c
   80d24:	00081a1d 	.word	0x00081a1d

00080d28 <test_writingAsciiStringOnTheLCDDisplay>:

void test_writingAsciiStringOnTheLCDDisplay(void)
{
   80d28:	b530      	push	{r4, r5, lr}
   80d2a:	b083      	sub	sp, #12
	lcdClearDisplay();
   80d2c:	4b14      	ldr	r3, [pc, #80]	; (80d80 <test_writingAsciiStringOnTheLCDDisplay+0x58>)
   80d2e:	4798      	blx	r3
	TEST_ASSERT_FALSE(lcdWriteAsciiString("Test everything!"));
   80d30:	4814      	ldr	r0, [pc, #80]	; (80d84 <test_writingAsciiStringOnTheLCDDisplay+0x5c>)
   80d32:	4b15      	ldr	r3, [pc, #84]	; (80d88 <test_writingAsciiStringOnTheLCDDisplay+0x60>)
   80d34:	4798      	blx	r3
   80d36:	b9f0      	cbnz	r0, 80d76 <test_writingAsciiStringOnTheLCDDisplay+0x4e>
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);	/* The RS bit on the LCD should be set to high since it is writing a character to the display */
   80d38:	4b14      	ldr	r3, [pc, #80]	; (80d8c <test_writingAsciiStringOnTheLCDDisplay+0x64>)
   80d3a:	681d      	ldr	r5, [r3, #0]
   80d3c:	682a      	ldr	r2, [r5, #0]
   80d3e:	2321      	movs	r3, #33	; 0x21
   80d40:	9300      	str	r3, [sp, #0]
   80d42:	2300      	movs	r3, #0
   80d44:	f04f 31ff 	mov.w	r1, #4294967295
   80d48:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80d4c:	4c10      	ldr	r4, [pc, #64]	; (80d90 <test_writingAsciiStringOnTheLCDDisplay+0x68>)
   80d4e:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);	/* The Enable bit on the LCD should be set to low to indicate that all data has been written  */
   80d50:	682a      	ldr	r2, [r5, #0]
   80d52:	2322      	movs	r3, #34	; 0x22
   80d54:	9300      	str	r3, [sp, #0]
   80d56:	2300      	movs	r3, #0
   80d58:	4619      	mov	r1, r3
   80d5a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80d5e:	47a0      	blx	r4
	/* We cannot test the actual value of the last character shown on the LCD, 
	   but we can test that the output to the LCD on PC23-PC26 is what we expect */
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1000<<23), *p_PIOC_ODSR); /* last character shown should be a "!" */
   80d60:	682a      	ldr	r2, [r5, #0]
   80d62:	2325      	movs	r3, #37	; 0x25
   80d64:	9300      	str	r3, [sp, #0]
   80d66:	2300      	movs	r3, #0
   80d68:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80d6c:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80d70:	47a0      	blx	r4
}
   80d72:	b003      	add	sp, #12
   80d74:	bd30      	pop	{r4, r5, pc}
	TEST_ASSERT_FALSE(lcdWriteAsciiString("Test everything!"));
   80d76:	2120      	movs	r1, #32
   80d78:	4806      	ldr	r0, [pc, #24]	; (80d94 <test_writingAsciiStringOnTheLCDDisplay+0x6c>)
   80d7a:	4b07      	ldr	r3, [pc, #28]	; (80d98 <test_writingAsciiStringOnTheLCDDisplay+0x70>)
   80d7c:	4798      	blx	r3
   80d7e:	e7db      	b.n	80d38 <test_writingAsciiStringOnTheLCDDisplay+0x10>
   80d80:	00080a01 	.word	0x00080a01
   80d84:	00088988 	.word	0x00088988
   80d88:	000807d9 	.word	0x000807d9
   80d8c:	0008899c 	.word	0x0008899c
   80d90:	000818e1 	.word	0x000818e1
   80d94:	0008896c 	.word	0x0008896c
   80d98:	00081a1d 	.word	0x00081a1d

00080d9c <test_writingButtonOnTheLCDDisplay>:

void test_writingButtonOnTheLCDDisplay(void)
{
   80d9c:	b530      	push	{r4, r5, lr}
   80d9e:	b083      	sub	sp, #12
	lcdClearDisplay();
   80da0:	4b14      	ldr	r3, [pc, #80]	; (80df4 <test_writingButtonOnTheLCDDisplay+0x58>)
   80da2:	4798      	blx	r3
	TEST_ASSERT_FALSE(lcdWriteButtonValue(btnSELECT));
   80da4:	2004      	movs	r0, #4
   80da6:	4b14      	ldr	r3, [pc, #80]	; (80df8 <test_writingButtonOnTheLCDDisplay+0x5c>)
   80da8:	4798      	blx	r3
   80daa:	b9f0      	cbnz	r0, 80dea <test_writingButtonOnTheLCDDisplay+0x4e>
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);	/* The RS bit on the LCD should be set to high since it is writing a character to the display */
   80dac:	4b13      	ldr	r3, [pc, #76]	; (80dfc <test_writingButtonOnTheLCDDisplay+0x60>)
   80dae:	681d      	ldr	r5, [r3, #0]
   80db0:	682a      	ldr	r2, [r5, #0]
   80db2:	232c      	movs	r3, #44	; 0x2c
   80db4:	9300      	str	r3, [sp, #0]
   80db6:	2300      	movs	r3, #0
   80db8:	f04f 31ff 	mov.w	r1, #4294967295
   80dbc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80dc0:	4c0f      	ldr	r4, [pc, #60]	; (80e00 <test_writingButtonOnTheLCDDisplay+0x64>)
   80dc2:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);	/* The Enable bit on the LCD should be set to low to indicate that all data has been written  */
   80dc4:	682a      	ldr	r2, [r5, #0]
   80dc6:	232d      	movs	r3, #45	; 0x2d
   80dc8:	9300      	str	r3, [sp, #0]
   80dca:	2300      	movs	r3, #0
   80dcc:	4619      	mov	r1, r3
   80dce:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80dd2:	47a0      	blx	r4
	/* We cannot test the actual value of the last character shown on the LCD, 
	   but we can test that the output to the LCD on PC23-PC26 is what we expect */
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0010<<23), *p_PIOC_ODSR);	/* last character shown should be a "T" as in SELECT */
   80dd4:	682a      	ldr	r2, [r5, #0]
   80dd6:	2330      	movs	r3, #48	; 0x30
   80dd8:	9300      	str	r3, [sp, #0]
   80dda:	2300      	movs	r3, #0
   80ddc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   80de0:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80de4:	47a0      	blx	r4
   80de6:	b003      	add	sp, #12
   80de8:	bd30      	pop	{r4, r5, pc}
	TEST_ASSERT_FALSE(lcdWriteButtonValue(btnSELECT));
   80dea:	212b      	movs	r1, #43	; 0x2b
   80dec:	4805      	ldr	r0, [pc, #20]	; (80e04 <test_writingButtonOnTheLCDDisplay+0x68>)
   80dee:	4b06      	ldr	r3, [pc, #24]	; (80e08 <test_writingButtonOnTheLCDDisplay+0x6c>)
   80df0:	4798      	blx	r3
   80df2:	e7db      	b.n	80dac <test_writingButtonOnTheLCDDisplay+0x10>
   80df4:	00080a01 	.word	0x00080a01
   80df8:	00080831 	.word	0x00080831
   80dfc:	0008899c 	.word	0x0008899c
   80e00:	000818e1 	.word	0x000818e1
   80e04:	0008896c 	.word	0x0008896c
   80e08:	00081a1d 	.word	0x00081a1d

00080e0c <test_initialisatinOfTheLCD>:
#include "test_lcdFunctions.h"

uint32_t *const p_PIOC_ODSR = (uint32_t *) (PIOC_BASE_ADDRESS+0x0038U);	/* defines the address for status (values) of the output pins of the B register  */

void test_initialisatinOfTheLCD(void)
{
   80e0c:	b530      	push	{r4, r5, lr}
   80e0e:	b083      	sub	sp, #12
	TEST_ASSERT_FALSE(lcdInit());
   80e10:	4b11      	ldr	r3, [pc, #68]	; (80e58 <test_initialisatinOfTheLCD+0x4c>)
   80e12:	4798      	blx	r3
   80e14:	b9d8      	cbnz	r0, 80e4e <test_initialisatinOfTheLCD+0x42>
	TEST_ASSERT_BIT_LOW(22, *p_PIOC_ODSR);	/* The RS bit on the LCD should be set to low since it is an initiation */
   80e16:	4d11      	ldr	r5, [pc, #68]	; (80e5c <test_initialisatinOfTheLCD+0x50>)
   80e18:	682a      	ldr	r2, [r5, #0]
   80e1a:	2314      	movs	r3, #20
   80e1c:	9300      	str	r3, [sp, #0]
   80e1e:	2300      	movs	r3, #0
   80e20:	4619      	mov	r1, r3
   80e22:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80e26:	4c0e      	ldr	r4, [pc, #56]	; (80e60 <test_initialisatinOfTheLCD+0x54>)
   80e28:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);	/* The Enable bit on the LCD should be set to low to indicate that all data has been written  */
   80e2a:	682a      	ldr	r2, [r5, #0]
   80e2c:	2315      	movs	r3, #21
   80e2e:	9300      	str	r3, [sp, #0]
   80e30:	2300      	movs	r3, #0
   80e32:	4619      	mov	r1, r3
   80e34:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80e38:	47a0      	blx	r4
	/* We cannot test the actual value of the last character shown on the LCD, 
	   but we can test that the output to the LCD on PC23-PC26 is what we expect */
	TEST_ASSERT_BITS(LCD_mask_D4_D7, 0b00000111100000000000000000000000, *p_PIOC_ODSR);	/* Display on, cursor on, blinking on */
   80e3a:	682a      	ldr	r2, [r5, #0]
   80e3c:	2318      	movs	r3, #24
   80e3e:	9300      	str	r3, [sp, #0]
   80e40:	2300      	movs	r3, #0
   80e42:	f04f 61f0 	mov.w	r1, #125829120	; 0x7800000
   80e46:	4608      	mov	r0, r1
   80e48:	47a0      	blx	r4
}
   80e4a:	b003      	add	sp, #12
   80e4c:	bd30      	pop	{r4, r5, pc}
	TEST_ASSERT_FALSE(lcdInit());
   80e4e:	2113      	movs	r1, #19
   80e50:	4804      	ldr	r0, [pc, #16]	; (80e64 <test_initialisatinOfTheLCD+0x58>)
   80e52:	4b05      	ldr	r3, [pc, #20]	; (80e68 <test_initialisatinOfTheLCD+0x5c>)
   80e54:	4798      	blx	r3
   80e56:	e7de      	b.n	80e16 <test_initialisatinOfTheLCD+0xa>
   80e58:	0008091d 	.word	0x0008091d
   80e5c:	400e1238 	.word	0x400e1238
   80e60:	000818e1 	.word	0x000818e1
   80e64:	0008896c 	.word	0x0008896c
   80e68:	00081a1d 	.word	0x00081a1d

00080e6c <test_writingCharactersToTheLCD>:

void test_writingCharactersToTheLCD(void)
{
   80e6c:	b570      	push	{r4, r5, r6, lr}
   80e6e:	b082      	sub	sp, #8
	/* Write a number of consecutive characters on the LCD display to show that the program works */
	/* We cannot test the actual value of the last character shown on the LCD, 
	   but we can test that the output to the LCD on PC23-PC26 is what we expect for each character */

	TEST_ASSERT_FALSE(lcdWrite(0x68, HIGH));	/* 0x68 is hex for ASCII symbol 'h' */
   80e70:	2101      	movs	r1, #1
   80e72:	2068      	movs	r0, #104	; 0x68
   80e74:	4bb4      	ldr	r3, [pc, #720]	; (81148 <test_writingCharactersToTheLCD+0x2dc>)
   80e76:	4798      	blx	r3
   80e78:	2800      	cmp	r0, #0
   80e7a:	f040 819b 	bne.w	811b4 <test_writingCharactersToTheLCD+0x348>
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);		/* The RS bit on the LCD should be set to high since it is writing a character to the display */
   80e7e:	4db3      	ldr	r5, [pc, #716]	; (8114c <test_writingCharactersToTheLCD+0x2e0>)
   80e80:	682a      	ldr	r2, [r5, #0]
   80e82:	2322      	movs	r3, #34	; 0x22
   80e84:	9300      	str	r3, [sp, #0]
   80e86:	2300      	movs	r3, #0
   80e88:	f04f 31ff 	mov.w	r1, #4294967295
   80e8c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80e90:	4caf      	ldr	r4, [pc, #700]	; (81150 <test_writingCharactersToTheLCD+0x2e4>)
   80e92:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);		/* The Enable bit on the LCD should be set to low to indicate that all data has been written  */
   80e94:	682a      	ldr	r2, [r5, #0]
   80e96:	2323      	movs	r3, #35	; 0x23
   80e98:	9300      	str	r3, [sp, #0]
   80e9a:	2300      	movs	r3, #0
   80e9c:	4619      	mov	r1, r3
   80e9e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80ea2:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0001<<23), *p_PIOC_ODSR);	/* Last 4 bits in reverse order */
   80ea4:	682a      	ldr	r2, [r5, #0]
   80ea6:	2324      	movs	r3, #36	; 0x24
   80ea8:	9300      	str	r3, [sp, #0]
   80eaa:	2300      	movs	r3, #0
   80eac:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   80eb0:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80eb4:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite((uint8_t) 101, HIGH));	/* 101 is decimal and needs to have an explicit cast to a single byte */
   80eb6:	2101      	movs	r1, #1
   80eb8:	2065      	movs	r0, #101	; 0x65
   80eba:	4ba3      	ldr	r3, [pc, #652]	; (81148 <test_writingCharactersToTheLCD+0x2dc>)
   80ebc:	4798      	blx	r3
   80ebe:	2800      	cmp	r0, #0
   80ec0:	f040 817d 	bne.w	811be <test_writingCharactersToTheLCD+0x352>
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80ec4:	4da1      	ldr	r5, [pc, #644]	; (8114c <test_writingCharactersToTheLCD+0x2e0>)
   80ec6:	682a      	ldr	r2, [r5, #0]
   80ec8:	2327      	movs	r3, #39	; 0x27
   80eca:	9300      	str	r3, [sp, #0]
   80ecc:	2300      	movs	r3, #0
   80ece:	f04f 31ff 	mov.w	r1, #4294967295
   80ed2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80ed6:	4c9e      	ldr	r4, [pc, #632]	; (81150 <test_writingCharactersToTheLCD+0x2e4>)
   80ed8:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80eda:	682a      	ldr	r2, [r5, #0]
   80edc:	2328      	movs	r3, #40	; 0x28
   80ede:	9300      	str	r3, [sp, #0]
   80ee0:	2300      	movs	r3, #0
   80ee2:	4619      	mov	r1, r3
   80ee4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80ee8:	47a0      	blx	r4
	//TEST_ASSERT_BITS(LCD_mask_D4_D7, 0b00000101000000000000000000000000, *p_PIOC_ODSR);
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1010<<23), *p_PIOC_ODSR);
   80eea:	682a      	ldr	r2, [r5, #0]
   80eec:	232a      	movs	r3, #42	; 0x2a
   80eee:	9300      	str	r3, [sp, #0]
   80ef0:	2300      	movs	r3, #0
   80ef2:	f04f 61a0 	mov.w	r1, #83886080	; 0x5000000
   80ef6:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80efa:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite(0x6C, HIGH));
   80efc:	2101      	movs	r1, #1
   80efe:	206c      	movs	r0, #108	; 0x6c
   80f00:	4b91      	ldr	r3, [pc, #580]	; (81148 <test_writingCharactersToTheLCD+0x2dc>)
   80f02:	4798      	blx	r3
   80f04:	2800      	cmp	r0, #0
   80f06:	f040 815f 	bne.w	811c8 <test_writingCharactersToTheLCD+0x35c>
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80f0a:	4d90      	ldr	r5, [pc, #576]	; (8114c <test_writingCharactersToTheLCD+0x2e0>)
   80f0c:	682a      	ldr	r2, [r5, #0]
   80f0e:	232d      	movs	r3, #45	; 0x2d
   80f10:	9300      	str	r3, [sp, #0]
   80f12:	2300      	movs	r3, #0
   80f14:	f04f 31ff 	mov.w	r1, #4294967295
   80f18:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80f1c:	4c8c      	ldr	r4, [pc, #560]	; (81150 <test_writingCharactersToTheLCD+0x2e4>)
   80f1e:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80f20:	682a      	ldr	r2, [r5, #0]
   80f22:	232e      	movs	r3, #46	; 0x2e
   80f24:	9300      	str	r3, [sp, #0]
   80f26:	2300      	movs	r3, #0
   80f28:	4619      	mov	r1, r3
   80f2a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80f2e:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0011<<23), *p_PIOC_ODSR);
   80f30:	682a      	ldr	r2, [r5, #0]
   80f32:	232f      	movs	r3, #47	; 0x2f
   80f34:	9300      	str	r3, [sp, #0]
   80f36:	2300      	movs	r3, #0
   80f38:	f04f 71c0 	mov.w	r1, #25165824	; 0x1800000
   80f3c:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80f40:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite(0x6C, HIGH));
   80f42:	2101      	movs	r1, #1
   80f44:	206c      	movs	r0, #108	; 0x6c
   80f46:	4b80      	ldr	r3, [pc, #512]	; (81148 <test_writingCharactersToTheLCD+0x2dc>)
   80f48:	4798      	blx	r3
   80f4a:	2800      	cmp	r0, #0
   80f4c:	f040 8141 	bne.w	811d2 <test_writingCharactersToTheLCD+0x366>
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80f50:	4d7e      	ldr	r5, [pc, #504]	; (8114c <test_writingCharactersToTheLCD+0x2e0>)
   80f52:	682a      	ldr	r2, [r5, #0]
   80f54:	2332      	movs	r3, #50	; 0x32
   80f56:	9300      	str	r3, [sp, #0]
   80f58:	2300      	movs	r3, #0
   80f5a:	f04f 31ff 	mov.w	r1, #4294967295
   80f5e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80f62:	4c7b      	ldr	r4, [pc, #492]	; (81150 <test_writingCharactersToTheLCD+0x2e4>)
   80f64:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80f66:	682a      	ldr	r2, [r5, #0]
   80f68:	2333      	movs	r3, #51	; 0x33
   80f6a:	9300      	str	r3, [sp, #0]
   80f6c:	2300      	movs	r3, #0
   80f6e:	4619      	mov	r1, r3
   80f70:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80f74:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0011<<23), *p_PIOC_ODSR);
   80f76:	682a      	ldr	r2, [r5, #0]
   80f78:	2334      	movs	r3, #52	; 0x34
   80f7a:	9300      	str	r3, [sp, #0]
   80f7c:	2300      	movs	r3, #0
   80f7e:	f04f 71c0 	mov.w	r1, #25165824	; 0x1800000
   80f82:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80f86:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite(0x6F, HIGH));
   80f88:	2101      	movs	r1, #1
   80f8a:	206f      	movs	r0, #111	; 0x6f
   80f8c:	4b6e      	ldr	r3, [pc, #440]	; (81148 <test_writingCharactersToTheLCD+0x2dc>)
   80f8e:	4798      	blx	r3
   80f90:	2800      	cmp	r0, #0
   80f92:	f040 8123 	bne.w	811dc <test_writingCharactersToTheLCD+0x370>
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80f96:	4d6d      	ldr	r5, [pc, #436]	; (8114c <test_writingCharactersToTheLCD+0x2e0>)
   80f98:	682a      	ldr	r2, [r5, #0]
   80f9a:	2337      	movs	r3, #55	; 0x37
   80f9c:	9300      	str	r3, [sp, #0]
   80f9e:	2300      	movs	r3, #0
   80fa0:	f04f 31ff 	mov.w	r1, #4294967295
   80fa4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80fa8:	4c69      	ldr	r4, [pc, #420]	; (81150 <test_writingCharactersToTheLCD+0x2e4>)
   80faa:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);	
   80fac:	682a      	ldr	r2, [r5, #0]
   80fae:	2338      	movs	r3, #56	; 0x38
   80fb0:	9300      	str	r3, [sp, #0]
   80fb2:	2300      	movs	r3, #0
   80fb4:	4619      	mov	r1, r3
   80fb6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80fba:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1111<<23), *p_PIOC_ODSR);
   80fbc:	682a      	ldr	r2, [r5, #0]
   80fbe:	2339      	movs	r3, #57	; 0x39
   80fc0:	9300      	str	r3, [sp, #0]
   80fc2:	2300      	movs	r3, #0
   80fc4:	f04f 61f0 	mov.w	r1, #125829120	; 0x7800000
   80fc8:	4608      	mov	r0, r1
   80fca:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite(0x2C, HIGH));
   80fcc:	2101      	movs	r1, #1
   80fce:	202c      	movs	r0, #44	; 0x2c
   80fd0:	4b5d      	ldr	r3, [pc, #372]	; (81148 <test_writingCharactersToTheLCD+0x2dc>)
   80fd2:	4798      	blx	r3
   80fd4:	2800      	cmp	r0, #0
   80fd6:	f040 8106 	bne.w	811e6 <test_writingCharactersToTheLCD+0x37a>
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80fda:	4d5c      	ldr	r5, [pc, #368]	; (8114c <test_writingCharactersToTheLCD+0x2e0>)
   80fdc:	682a      	ldr	r2, [r5, #0]
   80fde:	233c      	movs	r3, #60	; 0x3c
   80fe0:	9300      	str	r3, [sp, #0]
   80fe2:	2300      	movs	r3, #0
   80fe4:	f04f 31ff 	mov.w	r1, #4294967295
   80fe8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80fec:	4c58      	ldr	r4, [pc, #352]	; (81150 <test_writingCharactersToTheLCD+0x2e4>)
   80fee:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80ff0:	682a      	ldr	r2, [r5, #0]
   80ff2:	233d      	movs	r3, #61	; 0x3d
   80ff4:	9300      	str	r3, [sp, #0]
   80ff6:	2300      	movs	r3, #0
   80ff8:	4619      	mov	r1, r3
   80ffa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80ffe:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0011<<23), *p_PIOC_ODSR);
   81000:	682a      	ldr	r2, [r5, #0]
   81002:	233e      	movs	r3, #62	; 0x3e
   81004:	9300      	str	r3, [sp, #0]
   81006:	2300      	movs	r3, #0
   81008:	f04f 71c0 	mov.w	r1, #25165824	; 0x1800000
   8100c:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   81010:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite(0x20, HIGH));
   81012:	2101      	movs	r1, #1
   81014:	2020      	movs	r0, #32
   81016:	4b4c      	ldr	r3, [pc, #304]	; (81148 <test_writingCharactersToTheLCD+0x2dc>)
   81018:	4798      	blx	r3
   8101a:	2800      	cmp	r0, #0
   8101c:	f040 80e8 	bne.w	811f0 <test_writingCharactersToTheLCD+0x384>
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   81020:	4d4a      	ldr	r5, [pc, #296]	; (8114c <test_writingCharactersToTheLCD+0x2e0>)
   81022:	682a      	ldr	r2, [r5, #0]
   81024:	2341      	movs	r3, #65	; 0x41
   81026:	9300      	str	r3, [sp, #0]
   81028:	2300      	movs	r3, #0
   8102a:	f04f 31ff 	mov.w	r1, #4294967295
   8102e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   81032:	4c47      	ldr	r4, [pc, #284]	; (81150 <test_writingCharactersToTheLCD+0x2e4>)
   81034:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   81036:	682a      	ldr	r2, [r5, #0]
   81038:	2342      	movs	r3, #66	; 0x42
   8103a:	9300      	str	r3, [sp, #0]
   8103c:	2300      	movs	r3, #0
   8103e:	4619      	mov	r1, r3
   81040:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   81044:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0000<<23), *p_PIOC_ODSR);
   81046:	682a      	ldr	r2, [r5, #0]
   81048:	2343      	movs	r3, #67	; 0x43
   8104a:	9300      	str	r3, [sp, #0]
   8104c:	2300      	movs	r3, #0
   8104e:	4619      	mov	r1, r3
   81050:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   81054:	47a0      	blx	r4

	lcdWrite('w', HIGH);
   81056:	2101      	movs	r1, #1
   81058:	2077      	movs	r0, #119	; 0x77
   8105a:	4e3b      	ldr	r6, [pc, #236]	; (81148 <test_writingCharactersToTheLCD+0x2dc>)
   8105c:	47b0      	blx	r6
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   8105e:	682a      	ldr	r2, [r5, #0]
   81060:	2346      	movs	r3, #70	; 0x46
   81062:	9300      	str	r3, [sp, #0]
   81064:	2300      	movs	r3, #0
   81066:	f04f 31ff 	mov.w	r1, #4294967295
   8106a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   8106e:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   81070:	682a      	ldr	r2, [r5, #0]
   81072:	2347      	movs	r3, #71	; 0x47
   81074:	9300      	str	r3, [sp, #0]
   81076:	2300      	movs	r3, #0
   81078:	4619      	mov	r1, r3
   8107a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   8107e:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1110<<23), *p_PIOC_ODSR);
   81080:	682a      	ldr	r2, [r5, #0]
   81082:	2348      	movs	r3, #72	; 0x48
   81084:	9300      	str	r3, [sp, #0]
   81086:	2300      	movs	r3, #0
   81088:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
   8108c:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   81090:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite('o', HIGH));
   81092:	2101      	movs	r1, #1
   81094:	206f      	movs	r0, #111	; 0x6f
   81096:	47b0      	blx	r6
   81098:	2800      	cmp	r0, #0
   8109a:	f040 80ae 	bne.w	811fa <test_writingCharactersToTheLCD+0x38e>
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   8109e:	4d2b      	ldr	r5, [pc, #172]	; (8114c <test_writingCharactersToTheLCD+0x2e0>)
   810a0:	682a      	ldr	r2, [r5, #0]
   810a2:	234b      	movs	r3, #75	; 0x4b
   810a4:	9300      	str	r3, [sp, #0]
   810a6:	2300      	movs	r3, #0
   810a8:	f04f 31ff 	mov.w	r1, #4294967295
   810ac:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   810b0:	4c27      	ldr	r4, [pc, #156]	; (81150 <test_writingCharactersToTheLCD+0x2e4>)
   810b2:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   810b4:	682a      	ldr	r2, [r5, #0]
   810b6:	234c      	movs	r3, #76	; 0x4c
   810b8:	9300      	str	r3, [sp, #0]
   810ba:	2300      	movs	r3, #0
   810bc:	4619      	mov	r1, r3
   810be:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   810c2:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1111<<23), *p_PIOC_ODSR);
   810c4:	682a      	ldr	r2, [r5, #0]
   810c6:	234d      	movs	r3, #77	; 0x4d
   810c8:	9300      	str	r3, [sp, #0]
   810ca:	2300      	movs	r3, #0
   810cc:	f04f 61f0 	mov.w	r1, #125829120	; 0x7800000
   810d0:	4608      	mov	r0, r1
   810d2:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite('r', HIGH));
   810d4:	2101      	movs	r1, #1
   810d6:	2072      	movs	r0, #114	; 0x72
   810d8:	4b1b      	ldr	r3, [pc, #108]	; (81148 <test_writingCharactersToTheLCD+0x2dc>)
   810da:	4798      	blx	r3
   810dc:	2800      	cmp	r0, #0
   810de:	f040 8091 	bne.w	81204 <test_writingCharactersToTheLCD+0x398>
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   810e2:	4d1a      	ldr	r5, [pc, #104]	; (8114c <test_writingCharactersToTheLCD+0x2e0>)
   810e4:	682a      	ldr	r2, [r5, #0]
   810e6:	2350      	movs	r3, #80	; 0x50
   810e8:	9300      	str	r3, [sp, #0]
   810ea:	2300      	movs	r3, #0
   810ec:	f04f 31ff 	mov.w	r1, #4294967295
   810f0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   810f4:	4c16      	ldr	r4, [pc, #88]	; (81150 <test_writingCharactersToTheLCD+0x2e4>)
   810f6:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   810f8:	682a      	ldr	r2, [r5, #0]
   810fa:	2351      	movs	r3, #81	; 0x51
   810fc:	9300      	str	r3, [sp, #0]
   810fe:	2300      	movs	r3, #0
   81100:	4619      	mov	r1, r3
   81102:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   81106:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0100<<23), *p_PIOC_ODSR);
   81108:	682a      	ldr	r2, [r5, #0]
   8110a:	2352      	movs	r3, #82	; 0x52
   8110c:	9300      	str	r3, [sp, #0]
   8110e:	2300      	movs	r3, #0
   81110:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   81114:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   81118:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite('l', HIGH));
   8111a:	2101      	movs	r1, #1
   8111c:	206c      	movs	r0, #108	; 0x6c
   8111e:	4b0a      	ldr	r3, [pc, #40]	; (81148 <test_writingCharactersToTheLCD+0x2dc>)
   81120:	4798      	blx	r3
   81122:	2800      	cmp	r0, #0
   81124:	d173      	bne.n	8120e <test_writingCharactersToTheLCD+0x3a2>
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   81126:	4d09      	ldr	r5, [pc, #36]	; (8114c <test_writingCharactersToTheLCD+0x2e0>)
   81128:	682a      	ldr	r2, [r5, #0]
   8112a:	2355      	movs	r3, #85	; 0x55
   8112c:	9300      	str	r3, [sp, #0]
   8112e:	2300      	movs	r3, #0
   81130:	f04f 31ff 	mov.w	r1, #4294967295
   81134:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   81138:	4c05      	ldr	r4, [pc, #20]	; (81150 <test_writingCharactersToTheLCD+0x2e4>)
   8113a:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   8113c:	682a      	ldr	r2, [r5, #0]
   8113e:	2356      	movs	r3, #86	; 0x56
   81140:	9300      	str	r3, [sp, #0]
   81142:	2300      	movs	r3, #0
   81144:	4619      	mov	r1, r3
   81146:	e005      	b.n	81154 <test_writingCharactersToTheLCD+0x2e8>
   81148:	00080891 	.word	0x00080891
   8114c:	400e1238 	.word	0x400e1238
   81150:	000818e1 	.word	0x000818e1
   81154:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   81158:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0011<<23), *p_PIOC_ODSR);
   8115a:	682a      	ldr	r2, [r5, #0]
   8115c:	2357      	movs	r3, #87	; 0x57
   8115e:	9300      	str	r3, [sp, #0]
   81160:	2300      	movs	r3, #0
   81162:	f04f 71c0 	mov.w	r1, #25165824	; 0x1800000
   81166:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   8116a:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite('d', HIGH));
   8116c:	2101      	movs	r1, #1
   8116e:	2064      	movs	r0, #100	; 0x64
   81170:	4b2c      	ldr	r3, [pc, #176]	; (81224 <test_writingCharactersToTheLCD+0x3b8>)
   81172:	4798      	blx	r3
   81174:	2800      	cmp	r0, #0
   81176:	d14f      	bne.n	81218 <test_writingCharactersToTheLCD+0x3ac>
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   81178:	4d2b      	ldr	r5, [pc, #172]	; (81228 <test_writingCharactersToTheLCD+0x3bc>)
   8117a:	682a      	ldr	r2, [r5, #0]
   8117c:	235a      	movs	r3, #90	; 0x5a
   8117e:	9300      	str	r3, [sp, #0]
   81180:	2300      	movs	r3, #0
   81182:	f04f 31ff 	mov.w	r1, #4294967295
   81186:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   8118a:	4c28      	ldr	r4, [pc, #160]	; (8122c <test_writingCharactersToTheLCD+0x3c0>)
   8118c:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   8118e:	682a      	ldr	r2, [r5, #0]
   81190:	235b      	movs	r3, #91	; 0x5b
   81192:	9300      	str	r3, [sp, #0]
   81194:	2300      	movs	r3, #0
   81196:	4619      	mov	r1, r3
   81198:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   8119c:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0010<<23), *p_PIOC_ODSR);
   8119e:	682a      	ldr	r2, [r5, #0]
   811a0:	235c      	movs	r3, #92	; 0x5c
   811a2:	9300      	str	r3, [sp, #0]
   811a4:	2300      	movs	r3, #0
   811a6:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   811aa:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   811ae:	47a0      	blx	r4
	
}
   811b0:	b002      	add	sp, #8
   811b2:	bd70      	pop	{r4, r5, r6, pc}
	TEST_ASSERT_FALSE(lcdWrite(0x68, HIGH));	/* 0x68 is hex for ASCII symbol 'h' */
   811b4:	2121      	movs	r1, #33	; 0x21
   811b6:	481e      	ldr	r0, [pc, #120]	; (81230 <test_writingCharactersToTheLCD+0x3c4>)
   811b8:	4b1e      	ldr	r3, [pc, #120]	; (81234 <test_writingCharactersToTheLCD+0x3c8>)
   811ba:	4798      	blx	r3
   811bc:	e65f      	b.n	80e7e <test_writingCharactersToTheLCD+0x12>
	TEST_ASSERT_FALSE(lcdWrite((uint8_t) 101, HIGH));	/* 101 is decimal and needs to have an explicit cast to a single byte */
   811be:	2126      	movs	r1, #38	; 0x26
   811c0:	481b      	ldr	r0, [pc, #108]	; (81230 <test_writingCharactersToTheLCD+0x3c4>)
   811c2:	4b1c      	ldr	r3, [pc, #112]	; (81234 <test_writingCharactersToTheLCD+0x3c8>)
   811c4:	4798      	blx	r3
   811c6:	e67d      	b.n	80ec4 <test_writingCharactersToTheLCD+0x58>
	TEST_ASSERT_FALSE(lcdWrite(0x6C, HIGH));
   811c8:	212c      	movs	r1, #44	; 0x2c
   811ca:	4819      	ldr	r0, [pc, #100]	; (81230 <test_writingCharactersToTheLCD+0x3c4>)
   811cc:	4b19      	ldr	r3, [pc, #100]	; (81234 <test_writingCharactersToTheLCD+0x3c8>)
   811ce:	4798      	blx	r3
   811d0:	e69b      	b.n	80f0a <test_writingCharactersToTheLCD+0x9e>
	TEST_ASSERT_FALSE(lcdWrite(0x6C, HIGH));
   811d2:	2131      	movs	r1, #49	; 0x31
   811d4:	4816      	ldr	r0, [pc, #88]	; (81230 <test_writingCharactersToTheLCD+0x3c4>)
   811d6:	4b17      	ldr	r3, [pc, #92]	; (81234 <test_writingCharactersToTheLCD+0x3c8>)
   811d8:	4798      	blx	r3
   811da:	e6b9      	b.n	80f50 <test_writingCharactersToTheLCD+0xe4>
	TEST_ASSERT_FALSE(lcdWrite(0x6F, HIGH));
   811dc:	2136      	movs	r1, #54	; 0x36
   811de:	4814      	ldr	r0, [pc, #80]	; (81230 <test_writingCharactersToTheLCD+0x3c4>)
   811e0:	4b14      	ldr	r3, [pc, #80]	; (81234 <test_writingCharactersToTheLCD+0x3c8>)
   811e2:	4798      	blx	r3
   811e4:	e6d7      	b.n	80f96 <test_writingCharactersToTheLCD+0x12a>
	TEST_ASSERT_FALSE(lcdWrite(0x2C, HIGH));
   811e6:	213b      	movs	r1, #59	; 0x3b
   811e8:	4811      	ldr	r0, [pc, #68]	; (81230 <test_writingCharactersToTheLCD+0x3c4>)
   811ea:	4b12      	ldr	r3, [pc, #72]	; (81234 <test_writingCharactersToTheLCD+0x3c8>)
   811ec:	4798      	blx	r3
   811ee:	e6f4      	b.n	80fda <test_writingCharactersToTheLCD+0x16e>
	TEST_ASSERT_FALSE(lcdWrite(0x20, HIGH));
   811f0:	2140      	movs	r1, #64	; 0x40
   811f2:	480f      	ldr	r0, [pc, #60]	; (81230 <test_writingCharactersToTheLCD+0x3c4>)
   811f4:	4b0f      	ldr	r3, [pc, #60]	; (81234 <test_writingCharactersToTheLCD+0x3c8>)
   811f6:	4798      	blx	r3
   811f8:	e712      	b.n	81020 <test_writingCharactersToTheLCD+0x1b4>
	TEST_ASSERT_FALSE(lcdWrite('o', HIGH));
   811fa:	214a      	movs	r1, #74	; 0x4a
   811fc:	480c      	ldr	r0, [pc, #48]	; (81230 <test_writingCharactersToTheLCD+0x3c4>)
   811fe:	4b0d      	ldr	r3, [pc, #52]	; (81234 <test_writingCharactersToTheLCD+0x3c8>)
   81200:	4798      	blx	r3
   81202:	e74c      	b.n	8109e <test_writingCharactersToTheLCD+0x232>
	TEST_ASSERT_FALSE(lcdWrite('r', HIGH));
   81204:	214f      	movs	r1, #79	; 0x4f
   81206:	480a      	ldr	r0, [pc, #40]	; (81230 <test_writingCharactersToTheLCD+0x3c4>)
   81208:	4b0a      	ldr	r3, [pc, #40]	; (81234 <test_writingCharactersToTheLCD+0x3c8>)
   8120a:	4798      	blx	r3
   8120c:	e769      	b.n	810e2 <test_writingCharactersToTheLCD+0x276>
	TEST_ASSERT_FALSE(lcdWrite('l', HIGH));
   8120e:	2154      	movs	r1, #84	; 0x54
   81210:	4807      	ldr	r0, [pc, #28]	; (81230 <test_writingCharactersToTheLCD+0x3c4>)
   81212:	4b08      	ldr	r3, [pc, #32]	; (81234 <test_writingCharactersToTheLCD+0x3c8>)
   81214:	4798      	blx	r3
   81216:	e786      	b.n	81126 <test_writingCharactersToTheLCD+0x2ba>
	TEST_ASSERT_FALSE(lcdWrite('d', HIGH));
   81218:	2159      	movs	r1, #89	; 0x59
   8121a:	4805      	ldr	r0, [pc, #20]	; (81230 <test_writingCharactersToTheLCD+0x3c4>)
   8121c:	4b05      	ldr	r3, [pc, #20]	; (81234 <test_writingCharactersToTheLCD+0x3c8>)
   8121e:	4798      	blx	r3
   81220:	e7aa      	b.n	81178 <test_writingCharactersToTheLCD+0x30c>
   81222:	bf00      	nop
   81224:	00080891 	.word	0x00080891
   81228:	400e1238 	.word	0x400e1238
   8122c:	000818e1 	.word	0x000818e1
   81230:	0008896c 	.word	0x0008896c
   81234:	00081a1d 	.word	0x00081a1d

00081238 <test_clearingTheLCDDisplay>:

void test_clearingTheLCDDisplay(void)
{
   81238:	b530      	push	{r4, r5, lr}
   8123a:	b083      	sub	sp, #12
	//delayMicroseconds(1000000);	/* Just to make sure that the previous message on the LCD can be read */
	
	/* Assert that the last bits written are correct */
	TEST_ASSERT_FALSE(lcdClearDisplay());
   8123c:	4b12      	ldr	r3, [pc, #72]	; (81288 <test_clearingTheLCDDisplay+0x50>)
   8123e:	4798      	blx	r3
   81240:	b9e0      	cbnz	r0, 8127c <test_clearingTheLCDDisplay+0x44>
	TEST_ASSERT_BIT_LOW(22, *p_PIOC_ODSR);	/* The RS bit on the LCD should be set to low since it is an initiation */
   81242:	4d12      	ldr	r5, [pc, #72]	; (8128c <test_clearingTheLCDDisplay+0x54>)
   81244:	682a      	ldr	r2, [r5, #0]
   81246:	2366      	movs	r3, #102	; 0x66
   81248:	9300      	str	r3, [sp, #0]
   8124a:	2300      	movs	r3, #0
   8124c:	4619      	mov	r1, r3
   8124e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   81252:	4c0f      	ldr	r4, [pc, #60]	; (81290 <test_clearingTheLCDDisplay+0x58>)
   81254:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);	/* The Enable bit on the LCD should be set to low to indicate that all data has been written  */
   81256:	682a      	ldr	r2, [r5, #0]
   81258:	2367      	movs	r3, #103	; 0x67
   8125a:	9300      	str	r3, [sp, #0]
   8125c:	2300      	movs	r3, #0
   8125e:	4619      	mov	r1, r3
   81260:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   81264:	47a0      	blx	r4
	/* We cannot test the actual value of the last character shown on the LCD, 
	   but we can test that the output to the LCD on PC23-PC26 is what we expect */
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1000<<23), *p_PIOC_ODSR);
   81266:	682a      	ldr	r2, [r5, #0]
   81268:	236a      	movs	r3, #106	; 0x6a
   8126a:	9300      	str	r3, [sp, #0]
   8126c:	2300      	movs	r3, #0
   8126e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   81272:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   81276:	47a0      	blx	r4
}
   81278:	b003      	add	sp, #12
   8127a:	bd30      	pop	{r4, r5, pc}
	TEST_ASSERT_FALSE(lcdClearDisplay());
   8127c:	2165      	movs	r1, #101	; 0x65
   8127e:	4805      	ldr	r0, [pc, #20]	; (81294 <test_clearingTheLCDDisplay+0x5c>)
   81280:	4b05      	ldr	r3, [pc, #20]	; (81298 <test_clearingTheLCDDisplay+0x60>)
   81282:	4798      	blx	r3
   81284:	e7dd      	b.n	81242 <test_clearingTheLCDDisplay+0xa>
   81286:	bf00      	nop
   81288:	00080a01 	.word	0x00080a01
   8128c:	400e1238 	.word	0x400e1238
   81290:	000818e1 	.word	0x000818e1
   81294:	0008896c 	.word	0x0008896c
   81298:	00081a1d 	.word	0x00081a1d

0008129c <__sputc_r>:
#else
#define __sgetc_r(__ptr, __p) __sgetc_raw_r(__ptr, __p)
#endif

#ifdef __GNUC__
_ELIDABLE_INLINE int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {
   8129c:	b510      	push	{r4, lr}
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   8129e:	6893      	ldr	r3, [r2, #8]
   812a0:	3b01      	subs	r3, #1
   812a2:	6093      	str	r3, [r2, #8]
   812a4:	2b00      	cmp	r3, #0
   812a6:	db05      	blt.n	812b4 <__sputc_r+0x18>
		return (*_p->_p++ = _c);
   812a8:	6813      	ldr	r3, [r2, #0]
   812aa:	1c58      	adds	r0, r3, #1
   812ac:	6010      	str	r0, [r2, #0]
   812ae:	7019      	strb	r1, [r3, #0]
   812b0:	b2c8      	uxtb	r0, r1
   812b2:	bd10      	pop	{r4, pc}
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   812b4:	6994      	ldr	r4, [r2, #24]
   812b6:	42a3      	cmp	r3, r4
   812b8:	db02      	blt.n	812c0 <__sputc_r+0x24>
   812ba:	b2cb      	uxtb	r3, r1
   812bc:	2b0a      	cmp	r3, #10
   812be:	d1f3      	bne.n	812a8 <__sputc_r+0xc>
	else
		return (__swbuf_r(_ptr, _c, _p));
   812c0:	4b01      	ldr	r3, [pc, #4]	; (812c8 <__sputc_r+0x2c>)
   812c2:	4798      	blx	r3
}
   812c4:	bd10      	pop	{r4, pc}
   812c6:	bf00      	nop
   812c8:	000848b9 	.word	0x000848b9

000812cc <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   812cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
   812d0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   812d4:	d00e      	beq.n	812f4 <UnityPrintNumber+0x28>
   812d6:	4605      	mov	r5, r0
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
        number = (1ul << (UNITY_LONG_WIDTH-1));
    }
    else if (number_to_print < 0)
   812d8:	2800      	cmp	r0, #0
   812da:	db24      	blt.n	81326 <UnityPrintNumber+0x5a>
        number = (1ul << (UNITY_LONG_WIDTH-1));
   812dc:	2401      	movs	r4, #1
        //Positive number
        number = (_U_UINT)number_to_print;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   812de:	fbb5 f3f4 	udiv	r3, r5, r4
   812e2:	2b09      	cmp	r3, #9
   812e4:	d935      	bls.n	81352 <UnityPrintNumber+0x86>
    {
        next_divisor = divisor * 10;
   812e6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   812ea:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   812ec:	429c      	cmp	r4, r3
   812ee:	da30      	bge.n	81352 <UnityPrintNumber+0x86>
            divisor = next_divisor;
   812f0:	461c      	mov	r4, r3
   812f2:	e7f4      	b.n	812de <UnityPrintNumber+0x12>
        UNITY_OUTPUT_CHAR('-');
   812f4:	4b2d      	ldr	r3, [pc, #180]	; (813ac <UnityPrintNumber+0xe0>)
   812f6:	6818      	ldr	r0, [r3, #0]
   812f8:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   812fa:	6893      	ldr	r3, [r2, #8]
   812fc:	3b01      	subs	r3, #1
   812fe:	6093      	str	r3, [r2, #8]
   81300:	2b00      	cmp	r3, #0
   81302:	db07      	blt.n	81314 <UnityPrintNumber+0x48>
		return (*_p->_p++ = _c);
   81304:	6813      	ldr	r3, [r2, #0]
   81306:	1c59      	adds	r1, r3, #1
   81308:	6011      	str	r1, [r2, #0]
   8130a:	222d      	movs	r2, #45	; 0x2d
   8130c:	701a      	strb	r2, [r3, #0]
        number = (1ul << (UNITY_LONG_WIDTH-1));
   8130e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   81312:	e7e3      	b.n	812dc <UnityPrintNumber+0x10>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81314:	6991      	ldr	r1, [r2, #24]
   81316:	428b      	cmp	r3, r1
   81318:	daf4      	bge.n	81304 <UnityPrintNumber+0x38>
		return (__swbuf_r(_ptr, _c, _p));
   8131a:	212d      	movs	r1, #45	; 0x2d
   8131c:	4b24      	ldr	r3, [pc, #144]	; (813b0 <UnityPrintNumber+0xe4>)
   8131e:	4798      	blx	r3
   81320:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   81324:	e7da      	b.n	812dc <UnityPrintNumber+0x10>
        UNITY_OUTPUT_CHAR('-');
   81326:	4b21      	ldr	r3, [pc, #132]	; (813ac <UnityPrintNumber+0xe0>)
   81328:	6818      	ldr	r0, [r3, #0]
   8132a:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   8132c:	6893      	ldr	r3, [r2, #8]
   8132e:	3b01      	subs	r3, #1
   81330:	6093      	str	r3, [r2, #8]
   81332:	2b00      	cmp	r3, #0
   81334:	db06      	blt.n	81344 <UnityPrintNumber+0x78>
		return (*_p->_p++ = _c);
   81336:	6813      	ldr	r3, [r2, #0]
   81338:	1c59      	adds	r1, r3, #1
   8133a:	6011      	str	r1, [r2, #0]
   8133c:	222d      	movs	r2, #45	; 0x2d
   8133e:	701a      	strb	r2, [r3, #0]
        number = (_U_UINT)(-number_to_print);
   81340:	426d      	negs	r5, r5
   81342:	e7cb      	b.n	812dc <UnityPrintNumber+0x10>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81344:	6991      	ldr	r1, [r2, #24]
   81346:	428b      	cmp	r3, r1
   81348:	daf5      	bge.n	81336 <UnityPrintNumber+0x6a>
		return (__swbuf_r(_ptr, _c, _p));
   8134a:	212d      	movs	r1, #45	; 0x2d
   8134c:	4b18      	ldr	r3, [pc, #96]	; (813b0 <UnityPrintNumber+0xe4>)
   8134e:	4798      	blx	r3
   81350:	e7f6      	b.n	81340 <UnityPrintNumber+0x74>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   81352:	4f16      	ldr	r7, [pc, #88]	; (813ac <UnityPrintNumber+0xe0>)
   81354:	f8df 9060 	ldr.w	r9, [pc, #96]	; 813b8 <UnityPrintNumber+0xec>
   81358:	f8df 8054 	ldr.w	r8, [pc, #84]	; 813b0 <UnityPrintNumber+0xe4>
   8135c:	e00b      	b.n	81376 <UnityPrintNumber+0xaa>
		return (*_p->_p++ = _c);
   8135e:	6813      	ldr	r3, [r2, #0]
   81360:	1c58      	adds	r0, r3, #1
   81362:	6010      	str	r0, [r2, #0]
   81364:	7019      	strb	r1, [r3, #0]
        divisor /= 10;
   81366:	4b13      	ldr	r3, [pc, #76]	; (813b4 <UnityPrintNumber+0xe8>)
   81368:	fb83 2304 	smull	r2, r3, r3, r4
   8136c:	17e4      	asrs	r4, r4, #31
   8136e:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
    }
    while (divisor > 0);
   81372:	2c00      	cmp	r4, #0
   81374:	dd18      	ble.n	813a8 <UnityPrintNumber+0xdc>
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   81376:	6838      	ldr	r0, [r7, #0]
   81378:	fbb5 f1f4 	udiv	r1, r5, r4
   8137c:	fba9 2301 	umull	r2, r3, r9, r1
   81380:	08db      	lsrs	r3, r3, #3
   81382:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81386:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
   8138a:	3130      	adds	r1, #48	; 0x30
   8138c:	b2c9      	uxtb	r1, r1
   8138e:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81390:	6893      	ldr	r3, [r2, #8]
   81392:	3b01      	subs	r3, #1
   81394:	6093      	str	r3, [r2, #8]
   81396:	2b00      	cmp	r3, #0
   81398:	dae1      	bge.n	8135e <UnityPrintNumber+0x92>
   8139a:	6996      	ldr	r6, [r2, #24]
   8139c:	42b3      	cmp	r3, r6
   8139e:	db01      	blt.n	813a4 <UnityPrintNumber+0xd8>
   813a0:	290a      	cmp	r1, #10
   813a2:	d1dc      	bne.n	8135e <UnityPrintNumber+0x92>
		return (__swbuf_r(_ptr, _c, _p));
   813a4:	47c0      	blx	r8
   813a6:	e7de      	b.n	81366 <UnityPrintNumber+0x9a>
}
   813a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   813ac:	20070134 	.word	0x20070134
   813b0:	000848b9 	.word	0x000848b9
   813b4:	66666667 	.word	0x66666667
   813b8:	cccccccd 	.word	0xcccccccd

000813bc <UnityPrintNumberUnsigned>:

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumberUnsigned(const _U_UINT number)
{
   813bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   813c0:	4606      	mov	r6, r0
    _U_UINT divisor = 1;
   813c2:	2401      	movs	r4, #1
    _U_UINT next_divisor;

    // figure out initial divisor
    while (number / divisor > 9)
   813c4:	fbb6 f3f4 	udiv	r3, r6, r4
   813c8:	2b09      	cmp	r3, #9
   813ca:	d906      	bls.n	813da <UnityPrintNumberUnsigned+0x1e>
    {
        next_divisor = divisor * 10;
   813cc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   813d0:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   813d2:	429c      	cmp	r4, r3
   813d4:	d201      	bcs.n	813da <UnityPrintNumberUnsigned+0x1e>
            divisor = next_divisor;
   813d6:	461c      	mov	r4, r3
   813d8:	e7f4      	b.n	813c4 <UnityPrintNumberUnsigned+0x8>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   813da:	f8df 9058 	ldr.w	r9, [pc, #88]	; 81434 <UnityPrintNumberUnsigned+0x78>
   813de:	4d14      	ldr	r5, [pc, #80]	; (81430 <UnityPrintNumberUnsigned+0x74>)
   813e0:	f8df 8054 	ldr.w	r8, [pc, #84]	; 81438 <UnityPrintNumberUnsigned+0x7c>
   813e4:	e007      	b.n	813f6 <UnityPrintNumberUnsigned+0x3a>
		return (*_p->_p++ = _c);
   813e6:	6813      	ldr	r3, [r2, #0]
   813e8:	1c58      	adds	r0, r3, #1
   813ea:	6010      	str	r0, [r2, #0]
   813ec:	7019      	strb	r1, [r3, #0]
        divisor /= 10;
   813ee:	fba5 3404 	umull	r3, r4, r5, r4
    }
    while (divisor > 0);
   813f2:	08e4      	lsrs	r4, r4, #3
   813f4:	d019      	beq.n	8142a <UnityPrintNumberUnsigned+0x6e>
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   813f6:	f8d9 0000 	ldr.w	r0, [r9]
   813fa:	fbb6 f1f4 	udiv	r1, r6, r4
   813fe:	fba5 2301 	umull	r2, r3, r5, r1
   81402:	08db      	lsrs	r3, r3, #3
   81404:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81408:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
   8140c:	3130      	adds	r1, #48	; 0x30
   8140e:	b2c9      	uxtb	r1, r1
   81410:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81412:	6893      	ldr	r3, [r2, #8]
   81414:	3b01      	subs	r3, #1
   81416:	6093      	str	r3, [r2, #8]
   81418:	2b00      	cmp	r3, #0
   8141a:	dae4      	bge.n	813e6 <UnityPrintNumberUnsigned+0x2a>
   8141c:	6997      	ldr	r7, [r2, #24]
   8141e:	42bb      	cmp	r3, r7
   81420:	db01      	blt.n	81426 <UnityPrintNumberUnsigned+0x6a>
   81422:	290a      	cmp	r1, #10
   81424:	d1df      	bne.n	813e6 <UnityPrintNumberUnsigned+0x2a>
		return (__swbuf_r(_ptr, _c, _p));
   81426:	47c0      	blx	r8
   81428:	e7e1      	b.n	813ee <UnityPrintNumberUnsigned+0x32>
}
   8142a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8142e:	bf00      	nop
   81430:	cccccccd 	.word	0xcccccccd
   81434:	20070134 	.word	0x20070134
   81438:	000848b9 	.word	0x000848b9

0008143c <UnityPrintNumberHex>:

//-----------------------------------------------
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   8143c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81440:	4605      	mov	r5, r0
   81442:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   81444:	4b31      	ldr	r3, [pc, #196]	; (8150c <UnityPrintNumberHex+0xd0>)
   81446:	6818      	ldr	r0, [r3, #0]
   81448:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   8144a:	6893      	ldr	r3, [r2, #8]
   8144c:	3b01      	subs	r3, #1
   8144e:	6093      	str	r3, [r2, #8]
   81450:	2b00      	cmp	r3, #0
   81452:	db19      	blt.n	81488 <UnityPrintNumberHex+0x4c>
		return (*_p->_p++ = _c);
   81454:	6813      	ldr	r3, [r2, #0]
   81456:	1c59      	adds	r1, r3, #1
   81458:	6011      	str	r1, [r2, #0]
   8145a:	2230      	movs	r2, #48	; 0x30
   8145c:	701a      	strb	r2, [r3, #0]
    UNITY_OUTPUT_CHAR('x');
   8145e:	4b2b      	ldr	r3, [pc, #172]	; (8150c <UnityPrintNumberHex+0xd0>)
   81460:	6818      	ldr	r0, [r3, #0]
   81462:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81464:	6893      	ldr	r3, [r2, #8]
   81466:	3b01      	subs	r3, #1
   81468:	6093      	str	r3, [r2, #8]
   8146a:	2b00      	cmp	r3, #0
   8146c:	db13      	blt.n	81496 <UnityPrintNumberHex+0x5a>
		return (*_p->_p++ = _c);
   8146e:	6813      	ldr	r3, [r2, #0]
   81470:	1c59      	adds	r1, r3, #1
   81472:	6011      	str	r1, [r2, #0]
   81474:	2278      	movs	r2, #120	; 0x78
   81476:	701a      	strb	r2, [r3, #0]

    while (nibbles > 0)
   81478:	b1a4      	cbz	r4, 814a4 <UnityPrintNumberHex+0x68>
   8147a:	3c01      	subs	r4, #1
   8147c:	b2e4      	uxtb	r4, r4
   8147e:	00a4      	lsls	r4, r4, #2
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   81480:	4e22      	ldr	r6, [pc, #136]	; (8150c <UnityPrintNumberHex+0xd0>)
		return (__swbuf_r(_ptr, _c, _p));
   81482:	f8df 808c 	ldr.w	r8, [pc, #140]	; 81510 <UnityPrintNumberHex+0xd4>
   81486:	e017      	b.n	814b8 <UnityPrintNumberHex+0x7c>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81488:	6991      	ldr	r1, [r2, #24]
   8148a:	428b      	cmp	r3, r1
   8148c:	dae2      	bge.n	81454 <UnityPrintNumberHex+0x18>
		return (__swbuf_r(_ptr, _c, _p));
   8148e:	2130      	movs	r1, #48	; 0x30
   81490:	4b1f      	ldr	r3, [pc, #124]	; (81510 <UnityPrintNumberHex+0xd4>)
   81492:	4798      	blx	r3
   81494:	e7e3      	b.n	8145e <UnityPrintNumberHex+0x22>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81496:	6991      	ldr	r1, [r2, #24]
   81498:	428b      	cmp	r3, r1
   8149a:	dae8      	bge.n	8146e <UnityPrintNumberHex+0x32>
		return (__swbuf_r(_ptr, _c, _p));
   8149c:	2178      	movs	r1, #120	; 0x78
   8149e:	4b1c      	ldr	r3, [pc, #112]	; (81510 <UnityPrintNumberHex+0xd4>)
   814a0:	4798      	blx	r3
   814a2:	e7e9      	b.n	81478 <UnityPrintNumberHex+0x3c>
   814a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return (*_p->_p++ = _c);
   814a8:	6813      	ldr	r3, [r2, #0]
   814aa:	1c58      	adds	r0, r3, #1
   814ac:	6010      	str	r0, [r2, #0]
   814ae:	7019      	strb	r1, [r3, #0]
   814b0:	3c04      	subs	r4, #4
    while (nibbles > 0)
   814b2:	f114 0f04 	cmn.w	r4, #4
   814b6:	d026      	beq.n	81506 <UnityPrintNumberHex+0xca>
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   814b8:	fa25 f104 	lsr.w	r1, r5, r4
   814bc:	f001 010f 	and.w	r1, r1, #15
        if (nibble <= 9)
   814c0:	2909      	cmp	r1, #9
   814c2:	d80c      	bhi.n	814de <UnityPrintNumberHex+0xa2>
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   814c4:	6830      	ldr	r0, [r6, #0]
   814c6:	3130      	adds	r1, #48	; 0x30
   814c8:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   814ca:	6893      	ldr	r3, [r2, #8]
   814cc:	3b01      	subs	r3, #1
   814ce:	6093      	str	r3, [r2, #8]
   814d0:	2b00      	cmp	r3, #0
   814d2:	dae9      	bge.n	814a8 <UnityPrintNumberHex+0x6c>
   814d4:	6997      	ldr	r7, [r2, #24]
   814d6:	42bb      	cmp	r3, r7
   814d8:	dae6      	bge.n	814a8 <UnityPrintNumberHex+0x6c>
		return (__swbuf_r(_ptr, _c, _p));
   814da:	47c0      	blx	r8
   814dc:	e7e8      	b.n	814b0 <UnityPrintNumberHex+0x74>
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   814de:	6830      	ldr	r0, [r6, #0]
   814e0:	3137      	adds	r1, #55	; 0x37
   814e2:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   814e4:	6893      	ldr	r3, [r2, #8]
   814e6:	3b01      	subs	r3, #1
   814e8:	6093      	str	r3, [r2, #8]
   814ea:	2b00      	cmp	r3, #0
   814ec:	db04      	blt.n	814f8 <UnityPrintNumberHex+0xbc>
		return (*_p->_p++ = _c);
   814ee:	6813      	ldr	r3, [r2, #0]
   814f0:	1c58      	adds	r0, r3, #1
   814f2:	6010      	str	r0, [r2, #0]
   814f4:	7019      	strb	r1, [r3, #0]
   814f6:	e7db      	b.n	814b0 <UnityPrintNumberHex+0x74>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   814f8:	6997      	ldr	r7, [r2, #24]
   814fa:	42bb      	cmp	r3, r7
   814fc:	db01      	blt.n	81502 <UnityPrintNumberHex+0xc6>
   814fe:	290a      	cmp	r1, #10
   81500:	d1f5      	bne.n	814ee <UnityPrintNumberHex+0xb2>
		return (__swbuf_r(_ptr, _c, _p));
   81502:	47c0      	blx	r8
   81504:	e7d4      	b.n	814b0 <UnityPrintNumberHex+0x74>
   81506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8150a:	bf00      	nop
   8150c:	20070134 	.word	0x20070134
   81510:	000848b9 	.word	0x000848b9

00081514 <UnityPrint>:
    if (pch != NULL)
   81514:	2800      	cmp	r0, #0
   81516:	f000 808c 	beq.w	81632 <UnityPrint+0x11e>
{
   8151a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8151e:	4604      	mov	r4, r0
        while (*pch)
   81520:	7801      	ldrb	r1, [r0, #0]
   81522:	2900      	cmp	r1, #0
   81524:	f000 8083 	beq.w	8162e <UnityPrint+0x11a>
                UNITY_OUTPUT_CHAR(*pch);
   81528:	4d42      	ldr	r5, [pc, #264]	; (81634 <UnityPrint+0x120>)
   8152a:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8163c <UnityPrint+0x128>
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   8152e:	4e42      	ldr	r6, [pc, #264]	; (81638 <UnityPrint+0x124>)
   81530:	e067      	b.n	81602 <UnityPrint+0xee>
                UNITY_OUTPUT_CHAR(*pch);
   81532:	6828      	ldr	r0, [r5, #0]
   81534:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81536:	6893      	ldr	r3, [r2, #8]
   81538:	3b01      	subs	r3, #1
   8153a:	6093      	str	r3, [r2, #8]
   8153c:	2b00      	cmp	r3, #0
   8153e:	db04      	blt.n	8154a <UnityPrint+0x36>
		return (*_p->_p++ = _c);
   81540:	6813      	ldr	r3, [r2, #0]
   81542:	1c58      	adds	r0, r3, #1
   81544:	6010      	str	r0, [r2, #0]
   81546:	7019      	strb	r1, [r3, #0]
   81548:	e058      	b.n	815fc <UnityPrint+0xe8>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   8154a:	6997      	ldr	r7, [r2, #24]
   8154c:	42bb      	cmp	r3, r7
   8154e:	db01      	blt.n	81554 <UnityPrint+0x40>
   81550:	290a      	cmp	r1, #10
   81552:	d1f5      	bne.n	81540 <UnityPrint+0x2c>
		return (__swbuf_r(_ptr, _c, _p));
   81554:	47c0      	blx	r8
   81556:	e051      	b.n	815fc <UnityPrint+0xe8>
                UNITY_OUTPUT_CHAR('\\');
   81558:	6828      	ldr	r0, [r5, #0]
   8155a:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   8155c:	6893      	ldr	r3, [r2, #8]
   8155e:	3b01      	subs	r3, #1
   81560:	6093      	str	r3, [r2, #8]
   81562:	2b00      	cmp	r3, #0
   81564:	db11      	blt.n	8158a <UnityPrint+0x76>
		return (*_p->_p++ = _c);
   81566:	6813      	ldr	r3, [r2, #0]
   81568:	1c59      	adds	r1, r3, #1
   8156a:	6011      	str	r1, [r2, #0]
   8156c:	225c      	movs	r2, #92	; 0x5c
   8156e:	701a      	strb	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('r');
   81570:	6828      	ldr	r0, [r5, #0]
   81572:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81574:	6893      	ldr	r3, [r2, #8]
   81576:	3b01      	subs	r3, #1
   81578:	6093      	str	r3, [r2, #8]
   8157a:	2b00      	cmp	r3, #0
   8157c:	db0b      	blt.n	81596 <UnityPrint+0x82>
		return (*_p->_p++ = _c);
   8157e:	6813      	ldr	r3, [r2, #0]
   81580:	1c59      	adds	r1, r3, #1
   81582:	6011      	str	r1, [r2, #0]
   81584:	2272      	movs	r2, #114	; 0x72
   81586:	701a      	strb	r2, [r3, #0]
   81588:	e038      	b.n	815fc <UnityPrint+0xe8>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   8158a:	6991      	ldr	r1, [r2, #24]
   8158c:	428b      	cmp	r3, r1
   8158e:	daea      	bge.n	81566 <UnityPrint+0x52>
		return (__swbuf_r(_ptr, _c, _p));
   81590:	215c      	movs	r1, #92	; 0x5c
   81592:	47c0      	blx	r8
   81594:	e7ec      	b.n	81570 <UnityPrint+0x5c>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81596:	6991      	ldr	r1, [r2, #24]
   81598:	428b      	cmp	r3, r1
   8159a:	daf0      	bge.n	8157e <UnityPrint+0x6a>
		return (__swbuf_r(_ptr, _c, _p));
   8159c:	2172      	movs	r1, #114	; 0x72
   8159e:	47c0      	blx	r8
   815a0:	e02c      	b.n	815fc <UnityPrint+0xe8>
                UNITY_OUTPUT_CHAR('\\');
   815a2:	6828      	ldr	r0, [r5, #0]
   815a4:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   815a6:	6893      	ldr	r3, [r2, #8]
   815a8:	3b01      	subs	r3, #1
   815aa:	6093      	str	r3, [r2, #8]
   815ac:	2b00      	cmp	r3, #0
   815ae:	db11      	blt.n	815d4 <UnityPrint+0xc0>
		return (*_p->_p++ = _c);
   815b0:	6813      	ldr	r3, [r2, #0]
   815b2:	1c59      	adds	r1, r3, #1
   815b4:	6011      	str	r1, [r2, #0]
   815b6:	225c      	movs	r2, #92	; 0x5c
   815b8:	701a      	strb	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('n');
   815ba:	6828      	ldr	r0, [r5, #0]
   815bc:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   815be:	6893      	ldr	r3, [r2, #8]
   815c0:	3b01      	subs	r3, #1
   815c2:	6093      	str	r3, [r2, #8]
   815c4:	2b00      	cmp	r3, #0
   815c6:	db0b      	blt.n	815e0 <UnityPrint+0xcc>
		return (*_p->_p++ = _c);
   815c8:	6813      	ldr	r3, [r2, #0]
   815ca:	1c59      	adds	r1, r3, #1
   815cc:	6011      	str	r1, [r2, #0]
   815ce:	226e      	movs	r2, #110	; 0x6e
   815d0:	701a      	strb	r2, [r3, #0]
   815d2:	e013      	b.n	815fc <UnityPrint+0xe8>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   815d4:	6991      	ldr	r1, [r2, #24]
   815d6:	428b      	cmp	r3, r1
   815d8:	daea      	bge.n	815b0 <UnityPrint+0x9c>
		return (__swbuf_r(_ptr, _c, _p));
   815da:	215c      	movs	r1, #92	; 0x5c
   815dc:	47c0      	blx	r8
   815de:	e7ec      	b.n	815ba <UnityPrint+0xa6>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   815e0:	6991      	ldr	r1, [r2, #24]
   815e2:	428b      	cmp	r3, r1
   815e4:	daf0      	bge.n	815c8 <UnityPrint+0xb4>
		return (__swbuf_r(_ptr, _c, _p));
   815e6:	216e      	movs	r1, #110	; 0x6e
   815e8:	47c0      	blx	r8
   815ea:	e007      	b.n	815fc <UnityPrint+0xe8>
		return (*_p->_p++ = _c);
   815ec:	6813      	ldr	r3, [r2, #0]
   815ee:	1c59      	adds	r1, r3, #1
   815f0:	6011      	str	r1, [r2, #0]
   815f2:	225c      	movs	r2, #92	; 0x5c
   815f4:	701a      	strb	r2, [r3, #0]
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   815f6:	2102      	movs	r1, #2
   815f8:	7820      	ldrb	r0, [r4, #0]
   815fa:	47b0      	blx	r6
        while (*pch)
   815fc:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   81600:	b1a9      	cbz	r1, 8162e <UnityPrint+0x11a>
            if ((*pch <= 126) && (*pch >= 32))
   81602:	f1a1 0320 	sub.w	r3, r1, #32
   81606:	b2db      	uxtb	r3, r3
   81608:	2b5e      	cmp	r3, #94	; 0x5e
   8160a:	d992      	bls.n	81532 <UnityPrint+0x1e>
            else if (*pch == 13)
   8160c:	290d      	cmp	r1, #13
   8160e:	d0a3      	beq.n	81558 <UnityPrint+0x44>
            else if (*pch == 10)
   81610:	290a      	cmp	r1, #10
   81612:	d0c6      	beq.n	815a2 <UnityPrint+0x8e>
                UNITY_OUTPUT_CHAR('\\');
   81614:	6828      	ldr	r0, [r5, #0]
   81616:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81618:	6893      	ldr	r3, [r2, #8]
   8161a:	3b01      	subs	r3, #1
   8161c:	6093      	str	r3, [r2, #8]
   8161e:	2b00      	cmp	r3, #0
   81620:	dae4      	bge.n	815ec <UnityPrint+0xd8>
   81622:	6991      	ldr	r1, [r2, #24]
   81624:	428b      	cmp	r3, r1
   81626:	dae1      	bge.n	815ec <UnityPrint+0xd8>
		return (__swbuf_r(_ptr, _c, _p));
   81628:	215c      	movs	r1, #92	; 0x5c
   8162a:	47c0      	blx	r8
   8162c:	e7e3      	b.n	815f6 <UnityPrint+0xe2>
   8162e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81632:	4770      	bx	lr
   81634:	20070134 	.word	0x20070134
   81638:	0008143d 	.word	0x0008143d
   8163c:	000848b9 	.word	0x000848b9

00081640 <UnityTestResultsBegin>:
    UnityPrint(UnityStrOk);
}

//-----------------------------------------------
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   81640:	b510      	push	{r4, lr}
   81642:	460c      	mov	r4, r1
    UnityPrint(file);
   81644:	4b22      	ldr	r3, [pc, #136]	; (816d0 <UnityTestResultsBegin+0x90>)
   81646:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   81648:	4b22      	ldr	r3, [pc, #136]	; (816d4 <UnityTestResultsBegin+0x94>)
   8164a:	6818      	ldr	r0, [r3, #0]
   8164c:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   8164e:	6893      	ldr	r3, [r2, #8]
   81650:	3b01      	subs	r3, #1
   81652:	6093      	str	r3, [r2, #8]
   81654:	2b00      	cmp	r3, #0
   81656:	db26      	blt.n	816a6 <UnityTestResultsBegin+0x66>
		return (*_p->_p++ = _c);
   81658:	6813      	ldr	r3, [r2, #0]
   8165a:	1c59      	adds	r1, r3, #1
   8165c:	6011      	str	r1, [r2, #0]
   8165e:	223a      	movs	r2, #58	; 0x3a
   81660:	701a      	strb	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)line);
   81662:	4620      	mov	r0, r4
   81664:	4b1c      	ldr	r3, [pc, #112]	; (816d8 <UnityTestResultsBegin+0x98>)
   81666:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   81668:	4b1a      	ldr	r3, [pc, #104]	; (816d4 <UnityTestResultsBegin+0x94>)
   8166a:	6818      	ldr	r0, [r3, #0]
   8166c:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   8166e:	6893      	ldr	r3, [r2, #8]
   81670:	3b01      	subs	r3, #1
   81672:	6093      	str	r3, [r2, #8]
   81674:	2b00      	cmp	r3, #0
   81676:	db1d      	blt.n	816b4 <UnityTestResultsBegin+0x74>
		return (*_p->_p++ = _c);
   81678:	6813      	ldr	r3, [r2, #0]
   8167a:	1c59      	adds	r1, r3, #1
   8167c:	6011      	str	r1, [r2, #0]
   8167e:	223a      	movs	r2, #58	; 0x3a
   81680:	701a      	strb	r2, [r3, #0]
    UnityPrint(Unity.CurrentTestName);
   81682:	4b16      	ldr	r3, [pc, #88]	; (816dc <UnityTestResultsBegin+0x9c>)
   81684:	6858      	ldr	r0, [r3, #4]
   81686:	4b12      	ldr	r3, [pc, #72]	; (816d0 <UnityTestResultsBegin+0x90>)
   81688:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   8168a:	4b12      	ldr	r3, [pc, #72]	; (816d4 <UnityTestResultsBegin+0x94>)
   8168c:	6818      	ldr	r0, [r3, #0]
   8168e:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81690:	6893      	ldr	r3, [r2, #8]
   81692:	3b01      	subs	r3, #1
   81694:	6093      	str	r3, [r2, #8]
   81696:	2b00      	cmp	r3, #0
   81698:	db13      	blt.n	816c2 <UnityTestResultsBegin+0x82>
		return (*_p->_p++ = _c);
   8169a:	6813      	ldr	r3, [r2, #0]
   8169c:	1c59      	adds	r1, r3, #1
   8169e:	6011      	str	r1, [r2, #0]
   816a0:	223a      	movs	r2, #58	; 0x3a
   816a2:	701a      	strb	r2, [r3, #0]
   816a4:	bd10      	pop	{r4, pc}
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   816a6:	6991      	ldr	r1, [r2, #24]
   816a8:	428b      	cmp	r3, r1
   816aa:	dad5      	bge.n	81658 <UnityTestResultsBegin+0x18>
		return (__swbuf_r(_ptr, _c, _p));
   816ac:	213a      	movs	r1, #58	; 0x3a
   816ae:	4b0c      	ldr	r3, [pc, #48]	; (816e0 <UnityTestResultsBegin+0xa0>)
   816b0:	4798      	blx	r3
   816b2:	e7d6      	b.n	81662 <UnityTestResultsBegin+0x22>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   816b4:	6991      	ldr	r1, [r2, #24]
   816b6:	428b      	cmp	r3, r1
   816b8:	dade      	bge.n	81678 <UnityTestResultsBegin+0x38>
		return (__swbuf_r(_ptr, _c, _p));
   816ba:	213a      	movs	r1, #58	; 0x3a
   816bc:	4b08      	ldr	r3, [pc, #32]	; (816e0 <UnityTestResultsBegin+0xa0>)
   816be:	4798      	blx	r3
   816c0:	e7df      	b.n	81682 <UnityTestResultsBegin+0x42>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   816c2:	6991      	ldr	r1, [r2, #24]
   816c4:	428b      	cmp	r3, r1
   816c6:	dae8      	bge.n	8169a <UnityTestResultsBegin+0x5a>
		return (__swbuf_r(_ptr, _c, _p));
   816c8:	213a      	movs	r1, #58	; 0x3a
   816ca:	4b05      	ldr	r3, [pc, #20]	; (816e0 <UnityTestResultsBegin+0xa0>)
   816cc:	4798      	blx	r3
   816ce:	bd10      	pop	{r4, pc}
   816d0:	00081515 	.word	0x00081515
   816d4:	20070134 	.word	0x20070134
   816d8:	000812cd 	.word	0x000812cd
   816dc:	20070c50 	.word	0x20070c50
   816e0:	000848b9 	.word	0x000848b9

000816e4 <UnityTestResultsFailBegin>:
}

//-----------------------------------------------
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
   816e4:	b508      	push	{r3, lr}
    UnityTestResultsBegin(Unity.TestFile, line);
   816e6:	4601      	mov	r1, r0
   816e8:	4b0d      	ldr	r3, [pc, #52]	; (81720 <UnityTestResultsFailBegin+0x3c>)
   816ea:	6818      	ldr	r0, [r3, #0]
   816ec:	4b0d      	ldr	r3, [pc, #52]	; (81724 <UnityTestResultsFailBegin+0x40>)
   816ee:	4798      	blx	r3
    UnityPrint(UnityStrFail);
   816f0:	480d      	ldr	r0, [pc, #52]	; (81728 <UnityTestResultsFailBegin+0x44>)
   816f2:	4b0e      	ldr	r3, [pc, #56]	; (8172c <UnityTestResultsFailBegin+0x48>)
   816f4:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   816f6:	4b0e      	ldr	r3, [pc, #56]	; (81730 <UnityTestResultsFailBegin+0x4c>)
   816f8:	6818      	ldr	r0, [r3, #0]
   816fa:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   816fc:	6893      	ldr	r3, [r2, #8]
   816fe:	3b01      	subs	r3, #1
   81700:	6093      	str	r3, [r2, #8]
   81702:	2b00      	cmp	r3, #0
   81704:	db05      	blt.n	81712 <UnityTestResultsFailBegin+0x2e>
		return (*_p->_p++ = _c);
   81706:	6813      	ldr	r3, [r2, #0]
   81708:	1c59      	adds	r1, r3, #1
   8170a:	6011      	str	r1, [r2, #0]
   8170c:	223a      	movs	r2, #58	; 0x3a
   8170e:	701a      	strb	r2, [r3, #0]
   81710:	bd08      	pop	{r3, pc}
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81712:	6991      	ldr	r1, [r2, #24]
   81714:	428b      	cmp	r3, r1
   81716:	daf6      	bge.n	81706 <UnityTestResultsFailBegin+0x22>
		return (__swbuf_r(_ptr, _c, _p));
   81718:	213a      	movs	r1, #58	; 0x3a
   8171a:	4b06      	ldr	r3, [pc, #24]	; (81734 <UnityTestResultsFailBegin+0x50>)
   8171c:	4798      	blx	r3
   8171e:	bd08      	pop	{r3, pc}
   81720:	20070c50 	.word	0x20070c50
   81724:	00081641 	.word	0x00081641
   81728:	000889fc 	.word	0x000889fc
   8172c:	00081515 	.word	0x00081515
   81730:	20070134 	.word	0x20070134
   81734:	000848b9 	.word	0x000848b9

00081738 <UnityAddMsgIfSpecified>:
}

//-----------------------------------------------
static void UnityAddMsgIfSpecified(const char* msg)
{
    if (msg)
   81738:	b138      	cbz	r0, 8174a <UnityAddMsgIfSpecified+0x12>
{
   8173a:	b538      	push	{r3, r4, r5, lr}
   8173c:	4604      	mov	r4, r0
    {
        UnityPrint(UnityStrSpacer);
   8173e:	4803      	ldr	r0, [pc, #12]	; (8174c <UnityAddMsgIfSpecified+0x14>)
   81740:	4d03      	ldr	r5, [pc, #12]	; (81750 <UnityAddMsgIfSpecified+0x18>)
   81742:	47a8      	blx	r5
        UnityPrint(msg);
   81744:	4620      	mov	r0, r4
   81746:	47a8      	blx	r5
   81748:	bd38      	pop	{r3, r4, r5, pc}
   8174a:	4770      	bx	lr
   8174c:	00088a30 	.word	0x00088a30
   81750:	00081515 	.word	0x00081515

00081754 <UnityPrintNumberByStyle>:
{
   81754:	b508      	push	{r3, lr}
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
   81756:	f011 0f10 	tst.w	r1, #16
   8175a:	d108      	bne.n	8176e <UnityPrintNumberByStyle+0x1a>
    else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
   8175c:	f011 0f20 	tst.w	r1, #32
   81760:	d108      	bne.n	81774 <UnityPrintNumberByStyle+0x20>
        UnityPrintNumberHex((_U_UINT)number, (char)((style & 0x000F) << 1));
   81762:	0049      	lsls	r1, r1, #1
   81764:	f001 011e 	and.w	r1, r1, #30
   81768:	4b07      	ldr	r3, [pc, #28]	; (81788 <UnityPrintNumberByStyle+0x34>)
   8176a:	4798      	blx	r3
   8176c:	bd08      	pop	{r3, pc}
        UnityPrintNumber(number);
   8176e:	4b07      	ldr	r3, [pc, #28]	; (8178c <UnityPrintNumberByStyle+0x38>)
   81770:	4798      	blx	r3
   81772:	bd08      	pop	{r3, pc}
        UnityPrintNumberUnsigned(  (_U_UINT)number  &  UnitySizeMask[((_U_UINT)style & (_U_UINT)0x0F) - 1]  );
   81774:	f001 010f 	and.w	r1, r1, #15
   81778:	3901      	subs	r1, #1
   8177a:	4b05      	ldr	r3, [pc, #20]	; (81790 <UnityPrintNumberByStyle+0x3c>)
   8177c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   81780:	4018      	ands	r0, r3
   81782:	4b04      	ldr	r3, [pc, #16]	; (81794 <UnityPrintNumberByStyle+0x40>)
   81784:	4798      	blx	r3
   81786:	bd08      	pop	{r3, pc}
   81788:	0008143d 	.word	0x0008143d
   8178c:	000812cd 	.word	0x000812cd
   81790:	000889a0 	.word	0x000889a0
   81794:	000813bd 	.word	0x000813bd

00081798 <UnityPrintMask>:
{
   81798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8179c:	4607      	mov	r7, r0
   8179e:	4688      	mov	r8, r1
   817a0:	2520      	movs	r5, #32
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
   817a2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
            UNITY_OUTPUT_CHAR('X');
   817a6:	4e24      	ldr	r6, [pc, #144]	; (81838 <UnityPrintMask+0xa0>)
		return (*_p->_p++ = _c);
   817a8:	f04f 0958 	mov.w	r9, #88	; 0x58
		return (__swbuf_r(_ptr, _c, _p));
   817ac:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8183c <UnityPrintMask+0xa4>
   817b0:	e007      	b.n	817c2 <UnityPrintMask+0x2a>
		return (*_p->_p++ = _c);
   817b2:	6813      	ldr	r3, [r2, #0]
   817b4:	1c59      	adds	r1, r3, #1
   817b6:	6011      	str	r1, [r2, #0]
   817b8:	2231      	movs	r2, #49	; 0x31
   817ba:	701a      	strb	r2, [r3, #0]
        current_bit = current_bit >> 1;
   817bc:	0864      	lsrs	r4, r4, #1
    for (i = 0; i < UNITY_INT_WIDTH; i++)
   817be:	3d01      	subs	r5, #1
   817c0:	d037      	beq.n	81832 <UnityPrintMask+0x9a>
        if (current_bit & mask)
   817c2:	4227      	tst	r7, r4
   817c4:	d022      	beq.n	8180c <UnityPrintMask+0x74>
            if (current_bit & number)
   817c6:	ea18 0f04 	tst.w	r8, r4
   817ca:	d00c      	beq.n	817e6 <UnityPrintMask+0x4e>
                UNITY_OUTPUT_CHAR('1');
   817cc:	6830      	ldr	r0, [r6, #0]
   817ce:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   817d0:	6893      	ldr	r3, [r2, #8]
   817d2:	3b01      	subs	r3, #1
   817d4:	6093      	str	r3, [r2, #8]
   817d6:	2b00      	cmp	r3, #0
   817d8:	daeb      	bge.n	817b2 <UnityPrintMask+0x1a>
   817da:	6991      	ldr	r1, [r2, #24]
   817dc:	428b      	cmp	r3, r1
   817de:	dae8      	bge.n	817b2 <UnityPrintMask+0x1a>
		return (__swbuf_r(_ptr, _c, _p));
   817e0:	2131      	movs	r1, #49	; 0x31
   817e2:	47d0      	blx	sl
   817e4:	e7ea      	b.n	817bc <UnityPrintMask+0x24>
                UNITY_OUTPUT_CHAR('0');
   817e6:	6830      	ldr	r0, [r6, #0]
   817e8:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   817ea:	6893      	ldr	r3, [r2, #8]
   817ec:	3b01      	subs	r3, #1
   817ee:	6093      	str	r3, [r2, #8]
   817f0:	2b00      	cmp	r3, #0
   817f2:	db05      	blt.n	81800 <UnityPrintMask+0x68>
		return (*_p->_p++ = _c);
   817f4:	6813      	ldr	r3, [r2, #0]
   817f6:	1c59      	adds	r1, r3, #1
   817f8:	6011      	str	r1, [r2, #0]
   817fa:	2230      	movs	r2, #48	; 0x30
   817fc:	701a      	strb	r2, [r3, #0]
   817fe:	e7dd      	b.n	817bc <UnityPrintMask+0x24>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81800:	6991      	ldr	r1, [r2, #24]
   81802:	428b      	cmp	r3, r1
   81804:	daf6      	bge.n	817f4 <UnityPrintMask+0x5c>
		return (__swbuf_r(_ptr, _c, _p));
   81806:	2130      	movs	r1, #48	; 0x30
   81808:	47d0      	blx	sl
   8180a:	e7d7      	b.n	817bc <UnityPrintMask+0x24>
            UNITY_OUTPUT_CHAR('X');
   8180c:	6830      	ldr	r0, [r6, #0]
   8180e:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81810:	6893      	ldr	r3, [r2, #8]
   81812:	3b01      	subs	r3, #1
   81814:	6093      	str	r3, [r2, #8]
   81816:	2b00      	cmp	r3, #0
   81818:	db05      	blt.n	81826 <UnityPrintMask+0x8e>
		return (*_p->_p++ = _c);
   8181a:	6813      	ldr	r3, [r2, #0]
   8181c:	1c59      	adds	r1, r3, #1
   8181e:	6011      	str	r1, [r2, #0]
   81820:	f883 9000 	strb.w	r9, [r3]
   81824:	e7ca      	b.n	817bc <UnityPrintMask+0x24>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81826:	6991      	ldr	r1, [r2, #24]
   81828:	428b      	cmp	r3, r1
   8182a:	daf6      	bge.n	8181a <UnityPrintMask+0x82>
		return (__swbuf_r(_ptr, _c, _p));
   8182c:	4649      	mov	r1, r9
   8182e:	47d0      	blx	sl
   81830:	e7c4      	b.n	817bc <UnityPrintMask+0x24>
}
   81832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81836:	bf00      	nop
   81838:	20070134 	.word	0x20070134
   8183c:	000848b9 	.word	0x000848b9

00081840 <UnityPrintFail>:
{
   81840:	b508      	push	{r3, lr}
    UnityPrint(UnityStrFail);
   81842:	4802      	ldr	r0, [pc, #8]	; (8184c <UnityPrintFail+0xc>)
   81844:	4b02      	ldr	r3, [pc, #8]	; (81850 <UnityPrintFail+0x10>)
   81846:	4798      	blx	r3
   81848:	bd08      	pop	{r3, pc}
   8184a:	bf00      	nop
   8184c:	000889fc 	.word	0x000889fc
   81850:	00081515 	.word	0x00081515

00081854 <UnityPrintOk>:
{
   81854:	b508      	push	{r3, lr}
    UnityPrint(UnityStrOk);
   81856:	4802      	ldr	r0, [pc, #8]	; (81860 <UnityPrintOk+0xc>)
   81858:	4b02      	ldr	r3, [pc, #8]	; (81864 <UnityPrintOk+0x10>)
   8185a:	4798      	blx	r3
   8185c:	bd08      	pop	{r3, pc}
   8185e:	bf00      	nop
   81860:	00088a04 	.word	0x00088a04
   81864:	00081515 	.word	0x00081515

00081868 <UnityConcludeTest>:
{
   81868:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   8186a:	4b17      	ldr	r3, [pc, #92]	; (818c8 <UnityConcludeTest+0x60>)
   8186c:	69db      	ldr	r3, [r3, #28]
   8186e:	b9c3      	cbnz	r3, 818a2 <UnityConcludeTest+0x3a>
    else if (!Unity.CurrentTestFailed)
   81870:	4b15      	ldr	r3, [pc, #84]	; (818c8 <UnityConcludeTest+0x60>)
   81872:	699b      	ldr	r3, [r3, #24]
   81874:	b1d3      	cbz	r3, 818ac <UnityConcludeTest+0x44>
        Unity.TestFailures++;
   81876:	4a14      	ldr	r2, [pc, #80]	; (818c8 <UnityConcludeTest+0x60>)
   81878:	6913      	ldr	r3, [r2, #16]
   8187a:	3301      	adds	r3, #1
   8187c:	6113      	str	r3, [r2, #16]
    Unity.CurrentTestFailed = 0;
   8187e:	4b12      	ldr	r3, [pc, #72]	; (818c8 <UnityConcludeTest+0x60>)
   81880:	2200      	movs	r2, #0
   81882:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   81884:	61da      	str	r2, [r3, #28]
    UNITY_PRINT_EOL;
   81886:	4b11      	ldr	r3, [pc, #68]	; (818cc <UnityConcludeTest+0x64>)
   81888:	6818      	ldr	r0, [r3, #0]
   8188a:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   8188c:	6893      	ldr	r3, [r2, #8]
   8188e:	3b01      	subs	r3, #1
   81890:	6093      	str	r3, [r2, #8]
   81892:	2b00      	cmp	r3, #0
   81894:	db13      	blt.n	818be <UnityConcludeTest+0x56>
		return (*_p->_p++ = _c);
   81896:	6813      	ldr	r3, [r2, #0]
   81898:	1c59      	adds	r1, r3, #1
   8189a:	6011      	str	r1, [r2, #0]
   8189c:	220a      	movs	r2, #10
   8189e:	701a      	strb	r2, [r3, #0]
   818a0:	bd08      	pop	{r3, pc}
        Unity.TestIgnores++;
   818a2:	4a09      	ldr	r2, [pc, #36]	; (818c8 <UnityConcludeTest+0x60>)
   818a4:	6953      	ldr	r3, [r2, #20]
   818a6:	3301      	adds	r3, #1
   818a8:	6153      	str	r3, [r2, #20]
   818aa:	e7e8      	b.n	8187e <UnityConcludeTest+0x16>
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   818ac:	4b06      	ldr	r3, [pc, #24]	; (818c8 <UnityConcludeTest+0x60>)
   818ae:	6899      	ldr	r1, [r3, #8]
   818b0:	6818      	ldr	r0, [r3, #0]
   818b2:	4b07      	ldr	r3, [pc, #28]	; (818d0 <UnityConcludeTest+0x68>)
   818b4:	4798      	blx	r3
        UnityPrint(UnityStrPass);
   818b6:	4807      	ldr	r0, [pc, #28]	; (818d4 <UnityConcludeTest+0x6c>)
   818b8:	4b07      	ldr	r3, [pc, #28]	; (818d8 <UnityConcludeTest+0x70>)
   818ba:	4798      	blx	r3
   818bc:	e7df      	b.n	8187e <UnityConcludeTest+0x16>
		return (__swbuf_r(_ptr, _c, _p));
   818be:	210a      	movs	r1, #10
   818c0:	4b06      	ldr	r3, [pc, #24]	; (818dc <UnityConcludeTest+0x74>)
   818c2:	4798      	blx	r3
   818c4:	bd08      	pop	{r3, pc}
   818c6:	bf00      	nop
   818c8:	20070c50 	.word	0x20070c50
   818cc:	20070134 	.word	0x20070134
   818d0:	00081641 	.word	0x00081641
   818d4:	00088a08 	.word	0x00088a08
   818d8:	00081515 	.word	0x00081515
   818dc:	000848b9 	.word	0x000848b9

000818e0 <UnityAssertBits>:
void UnityAssertBits(const _U_SINT mask,
                     const _U_SINT expected,
                     const _U_SINT actual,
                     const char* msg,
                     const UNITY_LINE_TYPE lineNumber)
{
   818e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    UNITY_SKIP_EXECUTION;
   818e4:	4c14      	ldr	r4, [pc, #80]	; (81938 <UnityAssertBits+0x58>)
   818e6:	69a4      	ldr	r4, [r4, #24]
   818e8:	b934      	cbnz	r4, 818f8 <UnityAssertBits+0x18>
   818ea:	4c13      	ldr	r4, [pc, #76]	; (81938 <UnityAssertBits+0x58>)
   818ec:	69e4      	ldr	r4, [r4, #28]
   818ee:	b91c      	cbnz	r4, 818f8 <UnityAssertBits+0x18>

    if ((mask & expected) != (mask & actual))
   818f0:	ea81 0402 	eor.w	r4, r1, r2
   818f4:	4204      	tst	r4, r0
   818f6:	d101      	bne.n	818fc <UnityAssertBits+0x1c>
   818f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   818fc:	461f      	mov	r7, r3
   818fe:	4616      	mov	r6, r2
   81900:	460d      	mov	r5, r1
   81902:	4604      	mov	r4, r0
    {
        UnityTestResultsFailBegin(lineNumber);
   81904:	9806      	ldr	r0, [sp, #24]
   81906:	4b0d      	ldr	r3, [pc, #52]	; (8193c <UnityAssertBits+0x5c>)
   81908:	4798      	blx	r3
        UnityPrint(UnityStrExpected);
   8190a:	480d      	ldr	r0, [pc, #52]	; (81940 <UnityAssertBits+0x60>)
   8190c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 81954 <UnityAssertBits+0x74>
   81910:	47c0      	blx	r8
        UnityPrintMask((_U_UINT)mask, (_U_UINT)expected);
   81912:	4629      	mov	r1, r5
   81914:	4620      	mov	r0, r4
   81916:	4d0b      	ldr	r5, [pc, #44]	; (81944 <UnityAssertBits+0x64>)
   81918:	47a8      	blx	r5
        UnityPrint(UnityStrWas);
   8191a:	480b      	ldr	r0, [pc, #44]	; (81948 <UnityAssertBits+0x68>)
   8191c:	47c0      	blx	r8
        UnityPrintMask((_U_UINT)mask, (_U_UINT)actual);
   8191e:	4631      	mov	r1, r6
   81920:	4620      	mov	r0, r4
   81922:	47a8      	blx	r5
        UnityAddMsgIfSpecified(msg);
   81924:	4638      	mov	r0, r7
   81926:	4b09      	ldr	r3, [pc, #36]	; (8194c <UnityAssertBits+0x6c>)
   81928:	4798      	blx	r3
        UNITY_FAIL_AND_BAIL;
   8192a:	4803      	ldr	r0, [pc, #12]	; (81938 <UnityAssertBits+0x58>)
   8192c:	2101      	movs	r1, #1
   8192e:	6181      	str	r1, [r0, #24]
   81930:	3020      	adds	r0, #32
   81932:	4b07      	ldr	r3, [pc, #28]	; (81950 <UnityAssertBits+0x70>)
   81934:	4798      	blx	r3
   81936:	bf00      	nop
   81938:	20070c50 	.word	0x20070c50
   8193c:	000816e5 	.word	0x000816e5
   81940:	000889f0 	.word	0x000889f0
   81944:	00081799 	.word	0x00081799
   81948:	00088a34 	.word	0x00088a34
   8194c:	00081739 	.word	0x00081739
   81950:	000823e1 	.word	0x000823e1
   81954:	00081515 	.word	0x00081515

00081958 <UnityAssertNumbersWithin>:
                               const _U_SINT expected,
                               const _U_SINT actual,
                               const char* msg,
                               const UNITY_LINE_TYPE lineNumber,
                               const UNITY_DISPLAY_STYLE_T style)
{
   81958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8195c:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
    UNITY_SKIP_EXECUTION;
   81960:	4c25      	ldr	r4, [pc, #148]	; (819f8 <UnityAssertNumbersWithin+0xa0>)
   81962:	69a4      	ldr	r4, [r4, #24]
   81964:	bb24      	cbnz	r4, 819b0 <UnityAssertNumbersWithin+0x58>
   81966:	4c24      	ldr	r4, [pc, #144]	; (819f8 <UnityAssertNumbersWithin+0xa0>)
   81968:	69e4      	ldr	r4, [r4, #28]
   8196a:	bb0c      	cbnz	r4, 819b0 <UnityAssertNumbersWithin+0x58>

    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
   8196c:	f015 0f10 	tst.w	r5, #16
   81970:	d011      	beq.n	81996 <UnityAssertNumbersWithin+0x3e>
    {
        if (actual > expected)
   81972:	428a      	cmp	r2, r1
   81974:	dd07      	ble.n	81986 <UnityAssertNumbersWithin+0x2e>
          Unity.CurrentTestFailed = ((actual - expected) > delta);
   81976:	1a54      	subs	r4, r2, r1
   81978:	42a0      	cmp	r0, r4
   8197a:	bfac      	ite	ge
   8197c:	2400      	movge	r4, #0
   8197e:	2401      	movlt	r4, #1
   81980:	4e1d      	ldr	r6, [pc, #116]	; (819f8 <UnityAssertNumbersWithin+0xa0>)
   81982:	61b4      	str	r4, [r6, #24]
   81984:	e011      	b.n	819aa <UnityAssertNumbersWithin+0x52>
        else
          Unity.CurrentTestFailed = ((expected - actual) > delta);
   81986:	1a8c      	subs	r4, r1, r2
   81988:	4284      	cmp	r4, r0
   8198a:	bfd4      	ite	le
   8198c:	2400      	movle	r4, #0
   8198e:	2401      	movgt	r4, #1
   81990:	4e19      	ldr	r6, [pc, #100]	; (819f8 <UnityAssertNumbersWithin+0xa0>)
   81992:	61b4      	str	r4, [r6, #24]
   81994:	e009      	b.n	819aa <UnityAssertNumbersWithin+0x52>
    }
    else
    {
        if ((_U_UINT)actual > (_U_UINT)expected)
   81996:	428a      	cmp	r2, r1
            Unity.CurrentTestFailed = ((_U_UINT)(actual - expected) > (_U_UINT)delta);
   81998:	bf8c      	ite	hi
   8199a:	1a54      	subhi	r4, r2, r1
        else
            Unity.CurrentTestFailed = ((_U_UINT)(expected - actual) > (_U_UINT)delta);
   8199c:	1a8c      	subls	r4, r1, r2
   8199e:	4284      	cmp	r4, r0
   819a0:	bf94      	ite	ls
   819a2:	2400      	movls	r4, #0
   819a4:	2401      	movhi	r4, #1
   819a6:	4e14      	ldr	r6, [pc, #80]	; (819f8 <UnityAssertNumbersWithin+0xa0>)
   819a8:	61b4      	str	r4, [r6, #24]
    }

    if (Unity.CurrentTestFailed)
   819aa:	4c13      	ldr	r4, [pc, #76]	; (819f8 <UnityAssertNumbersWithin+0xa0>)
   819ac:	69a4      	ldr	r4, [r4, #24]
   819ae:	b90c      	cbnz	r4, 819b4 <UnityAssertNumbersWithin+0x5c>
   819b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   819b4:	461f      	mov	r7, r3
   819b6:	4690      	mov	r8, r2
   819b8:	4689      	mov	r9, r1
   819ba:	4604      	mov	r4, r0
    {
        UnityTestResultsFailBegin(lineNumber);
   819bc:	9808      	ldr	r0, [sp, #32]
   819be:	4b0f      	ldr	r3, [pc, #60]	; (819fc <UnityAssertNumbersWithin+0xa4>)
   819c0:	4798      	blx	r3
        UnityPrint(UnityStrDelta);
   819c2:	480f      	ldr	r0, [pc, #60]	; (81a00 <UnityAssertNumbersWithin+0xa8>)
   819c4:	4e0f      	ldr	r6, [pc, #60]	; (81a04 <UnityAssertNumbersWithin+0xac>)
   819c6:	47b0      	blx	r6
        UnityPrintNumberByStyle(delta, style);
   819c8:	4629      	mov	r1, r5
   819ca:	4620      	mov	r0, r4
   819cc:	4c0e      	ldr	r4, [pc, #56]	; (81a08 <UnityAssertNumbersWithin+0xb0>)
   819ce:	47a0      	blx	r4
        UnityPrint(UnityStrExpected);
   819d0:	480e      	ldr	r0, [pc, #56]	; (81a0c <UnityAssertNumbersWithin+0xb4>)
   819d2:	47b0      	blx	r6
        UnityPrintNumberByStyle(expected, style);
   819d4:	4629      	mov	r1, r5
   819d6:	4648      	mov	r0, r9
   819d8:	47a0      	blx	r4
        UnityPrint(UnityStrWas);
   819da:	480d      	ldr	r0, [pc, #52]	; (81a10 <UnityAssertNumbersWithin+0xb8>)
   819dc:	47b0      	blx	r6
        UnityPrintNumberByStyle(actual, style);
   819de:	4629      	mov	r1, r5
   819e0:	4640      	mov	r0, r8
   819e2:	47a0      	blx	r4
        UnityAddMsgIfSpecified(msg);
   819e4:	4638      	mov	r0, r7
   819e6:	4b0b      	ldr	r3, [pc, #44]	; (81a14 <UnityAssertNumbersWithin+0xbc>)
   819e8:	4798      	blx	r3
        UNITY_FAIL_AND_BAIL;
   819ea:	4803      	ldr	r0, [pc, #12]	; (819f8 <UnityAssertNumbersWithin+0xa0>)
   819ec:	2101      	movs	r1, #1
   819ee:	6181      	str	r1, [r0, #24]
   819f0:	3020      	adds	r0, #32
   819f2:	4b09      	ldr	r3, [pc, #36]	; (81a18 <UnityAssertNumbersWithin+0xc0>)
   819f4:	4798      	blx	r3
   819f6:	bf00      	nop
   819f8:	20070c50 	.word	0x20070c50
   819fc:	000816e5 	.word	0x000816e5
   81a00:	000889d4 	.word	0x000889d4
   81a04:	00081515 	.word	0x00081515
   81a08:	00081755 	.word	0x00081755
   81a0c:	000889f0 	.word	0x000889f0
   81a10:	00088a34 	.word	0x00088a34
   81a14:	00081739 	.word	0x00081739
   81a18:	000823e1 	.word	0x000823e1

00081a1c <UnityFail>:
// Control Functions
//-----------------------------------------------

void UnityFail(const char* msg, const UNITY_LINE_TYPE line)
{
    UNITY_SKIP_EXECUTION;
   81a1c:	4b13      	ldr	r3, [pc, #76]	; (81a6c <UnityFail+0x50>)
   81a1e:	699b      	ldr	r3, [r3, #24]
   81a20:	b913      	cbnz	r3, 81a28 <UnityFail+0xc>
   81a22:	4b12      	ldr	r3, [pc, #72]	; (81a6c <UnityFail+0x50>)
   81a24:	69db      	ldr	r3, [r3, #28]
   81a26:	b103      	cbz	r3, 81a2a <UnityFail+0xe>
   81a28:	4770      	bx	lr
{
   81a2a:	b510      	push	{r4, lr}
   81a2c:	4604      	mov	r4, r0

    UnityTestResultsBegin(Unity.TestFile, line);
   81a2e:	4b0f      	ldr	r3, [pc, #60]	; (81a6c <UnityFail+0x50>)
   81a30:	6818      	ldr	r0, [r3, #0]
   81a32:	4b0f      	ldr	r3, [pc, #60]	; (81a70 <UnityFail+0x54>)
   81a34:	4798      	blx	r3
    UnityPrintFail();
   81a36:	4b0f      	ldr	r3, [pc, #60]	; (81a74 <UnityFail+0x58>)
   81a38:	4798      	blx	r3
    if (msg != NULL)
   81a3a:	b18c      	cbz	r4, 81a60 <UnityFail+0x44>
    {
      UNITY_OUTPUT_CHAR(':');
   81a3c:	4b0e      	ldr	r3, [pc, #56]	; (81a78 <UnityFail+0x5c>)
   81a3e:	6818      	ldr	r0, [r3, #0]
   81a40:	6882      	ldr	r2, [r0, #8]
   81a42:	213a      	movs	r1, #58	; 0x3a
   81a44:	4b0d      	ldr	r3, [pc, #52]	; (81a7c <UnityFail+0x60>)
   81a46:	4798      	blx	r3
      if (msg[0] != ' ')
   81a48:	7823      	ldrb	r3, [r4, #0]
   81a4a:	2b20      	cmp	r3, #32
   81a4c:	d005      	beq.n	81a5a <UnityFail+0x3e>
      {
        UNITY_OUTPUT_CHAR(' ');
   81a4e:	4b0a      	ldr	r3, [pc, #40]	; (81a78 <UnityFail+0x5c>)
   81a50:	6818      	ldr	r0, [r3, #0]
   81a52:	6882      	ldr	r2, [r0, #8]
   81a54:	2120      	movs	r1, #32
   81a56:	4b09      	ldr	r3, [pc, #36]	; (81a7c <UnityFail+0x60>)
   81a58:	4798      	blx	r3
      }
      UnityPrint(msg);
   81a5a:	4620      	mov	r0, r4
   81a5c:	4b08      	ldr	r3, [pc, #32]	; (81a80 <UnityFail+0x64>)
   81a5e:	4798      	blx	r3
    }
    UNITY_FAIL_AND_BAIL;
   81a60:	4802      	ldr	r0, [pc, #8]	; (81a6c <UnityFail+0x50>)
   81a62:	2101      	movs	r1, #1
   81a64:	6181      	str	r1, [r0, #24]
   81a66:	3020      	adds	r0, #32
   81a68:	4b06      	ldr	r3, [pc, #24]	; (81a84 <UnityFail+0x68>)
   81a6a:	4798      	blx	r3
   81a6c:	20070c50 	.word	0x20070c50
   81a70:	00081641 	.word	0x00081641
   81a74:	00081841 	.word	0x00081841
   81a78:	20070134 	.word	0x20070134
   81a7c:	0008129d 	.word	0x0008129d
   81a80:	00081515 	.word	0x00081515
   81a84:	000823e1 	.word	0x000823e1

00081a88 <UnityDefaultTestRun>:
    void setUp(void);
    void tearDown(void);
#endif
//-----------------------------------------------
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   81a88:	b500      	push	{lr}
   81a8a:	b083      	sub	sp, #12
   81a8c:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   81a8e:	480f      	ldr	r0, [pc, #60]	; (81acc <UnityDefaultTestRun+0x44>)
   81a90:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   81a92:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   81a94:	68c3      	ldr	r3, [r0, #12]
   81a96:	3301      	adds	r3, #1
   81a98:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   81a9a:	3020      	adds	r0, #32
   81a9c:	4b0c      	ldr	r3, [pc, #48]	; (81ad0 <UnityDefaultTestRun+0x48>)
   81a9e:	4798      	blx	r3
   81aa0:	b158      	cbz	r0, 81aba <UnityDefaultTestRun+0x32>
    {
        setUp();
        Func();
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   81aa2:	480c      	ldr	r0, [pc, #48]	; (81ad4 <UnityDefaultTestRun+0x4c>)
   81aa4:	4b0a      	ldr	r3, [pc, #40]	; (81ad0 <UnityDefaultTestRun+0x48>)
   81aa6:	4798      	blx	r3
   81aa8:	b910      	cbnz	r0, 81ab0 <UnityDefaultTestRun+0x28>
   81aaa:	4b08      	ldr	r3, [pc, #32]	; (81acc <UnityDefaultTestRun+0x44>)
   81aac:	69db      	ldr	r3, [r3, #28]
   81aae:	b14b      	cbz	r3, 81ac4 <UnityDefaultTestRun+0x3c>
    {
        tearDown();
    }
    UnityConcludeTest();
   81ab0:	4b09      	ldr	r3, [pc, #36]	; (81ad8 <UnityDefaultTestRun+0x50>)
   81ab2:	4798      	blx	r3
}
   81ab4:	b003      	add	sp, #12
   81ab6:	f85d fb04 	ldr.w	pc, [sp], #4
        setUp();
   81aba:	4b08      	ldr	r3, [pc, #32]	; (81adc <UnityDefaultTestRun+0x54>)
   81abc:	4798      	blx	r3
        Func();
   81abe:	9b01      	ldr	r3, [sp, #4]
   81ac0:	4798      	blx	r3
   81ac2:	e7ee      	b.n	81aa2 <UnityDefaultTestRun+0x1a>
        tearDown();
   81ac4:	4b06      	ldr	r3, [pc, #24]	; (81ae0 <UnityDefaultTestRun+0x58>)
   81ac6:	4798      	blx	r3
   81ac8:	e7f2      	b.n	81ab0 <UnityDefaultTestRun+0x28>
   81aca:	bf00      	nop
   81acc:	20070c50 	.word	0x20070c50
   81ad0:	000823d5 	.word	0x000823d5
   81ad4:	20070c70 	.word	0x20070c70
   81ad8:	00081869 	.word	0x00081869
   81adc:	00080b6d 	.word	0x00080b6d
   81ae0:	00080b6f 	.word	0x00080b6f

00081ae4 <UnityBegin>:

//-----------------------------------------------
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
   81ae4:	4b05      	ldr	r3, [pc, #20]	; (81afc <UnityBegin+0x18>)
   81ae6:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
   81ae8:	2200      	movs	r2, #0
   81aea:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
   81aec:	609a      	str	r2, [r3, #8]
    Unity.NumberOfTests = 0;
   81aee:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   81af0:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   81af2:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   81af4:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   81af6:	61da      	str	r2, [r3, #28]
   81af8:	4770      	bx	lr
   81afa:	bf00      	nop
   81afc:	20070c50 	.word	0x20070c50

00081b00 <UnityEnd>:
    UNITY_OUTPUT_START();
}

//-----------------------------------------------
int UnityEnd(void)
{
   81b00:	b570      	push	{r4, r5, r6, lr}
    UNITY_PRINT_EOL;
   81b02:	4b30      	ldr	r3, [pc, #192]	; (81bc4 <UnityEnd+0xc4>)
   81b04:	6818      	ldr	r0, [r3, #0]
   81b06:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81b08:	6893      	ldr	r3, [r2, #8]
   81b0a:	3b01      	subs	r3, #1
   81b0c:	6093      	str	r3, [r2, #8]
   81b0e:	2b00      	cmp	r3, #0
   81b10:	db45      	blt.n	81b9e <UnityEnd+0x9e>
		return (*_p->_p++ = _c);
   81b12:	6813      	ldr	r3, [r2, #0]
   81b14:	1c59      	adds	r1, r3, #1
   81b16:	6011      	str	r1, [r2, #0]
   81b18:	220a      	movs	r2, #10
   81b1a:	701a      	strb	r2, [r3, #0]
    UnityPrint(UnityStrBreaker);
   81b1c:	482a      	ldr	r0, [pc, #168]	; (81bc8 <UnityEnd+0xc8>)
   81b1e:	4b2b      	ldr	r3, [pc, #172]	; (81bcc <UnityEnd+0xcc>)
   81b20:	4798      	blx	r3
    UNITY_PRINT_EOL;
   81b22:	4b28      	ldr	r3, [pc, #160]	; (81bc4 <UnityEnd+0xc4>)
   81b24:	6818      	ldr	r0, [r3, #0]
   81b26:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81b28:	6893      	ldr	r3, [r2, #8]
   81b2a:	3b01      	subs	r3, #1
   81b2c:	6093      	str	r3, [r2, #8]
   81b2e:	2b00      	cmp	r3, #0
   81b30:	db39      	blt.n	81ba6 <UnityEnd+0xa6>
		return (*_p->_p++ = _c);
   81b32:	6813      	ldr	r3, [r2, #0]
   81b34:	1c59      	adds	r1, r3, #1
   81b36:	6011      	str	r1, [r2, #0]
   81b38:	220a      	movs	r2, #10
   81b3a:	701a      	strb	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   81b3c:	4e24      	ldr	r6, [pc, #144]	; (81bd0 <UnityEnd+0xd0>)
   81b3e:	68f0      	ldr	r0, [r6, #12]
   81b40:	4d24      	ldr	r5, [pc, #144]	; (81bd4 <UnityEnd+0xd4>)
   81b42:	47a8      	blx	r5
    UnityPrint(UnityStrResultsTests);
   81b44:	4824      	ldr	r0, [pc, #144]	; (81bd8 <UnityEnd+0xd8>)
   81b46:	4c21      	ldr	r4, [pc, #132]	; (81bcc <UnityEnd+0xcc>)
   81b48:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   81b4a:	6930      	ldr	r0, [r6, #16]
   81b4c:	47a8      	blx	r5
    UnityPrint(UnityStrResultsFailures);
   81b4e:	4823      	ldr	r0, [pc, #140]	; (81bdc <UnityEnd+0xdc>)
   81b50:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   81b52:	6970      	ldr	r0, [r6, #20]
   81b54:	47a8      	blx	r5
    UnityPrint(UnityStrResultsIgnored);
   81b56:	4822      	ldr	r0, [pc, #136]	; (81be0 <UnityEnd+0xe0>)
   81b58:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   81b5a:	4b1a      	ldr	r3, [pc, #104]	; (81bc4 <UnityEnd+0xc4>)
   81b5c:	6818      	ldr	r0, [r3, #0]
   81b5e:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81b60:	6893      	ldr	r3, [r2, #8]
   81b62:	3b01      	subs	r3, #1
   81b64:	6093      	str	r3, [r2, #8]
   81b66:	2b00      	cmp	r3, #0
   81b68:	db21      	blt.n	81bae <UnityEnd+0xae>
		return (*_p->_p++ = _c);
   81b6a:	6813      	ldr	r3, [r2, #0]
   81b6c:	1c59      	adds	r1, r3, #1
   81b6e:	6011      	str	r1, [r2, #0]
   81b70:	220a      	movs	r2, #10
   81b72:	701a      	strb	r2, [r3, #0]
    if (Unity.TestFailures == 0U)
   81b74:	4b16      	ldr	r3, [pc, #88]	; (81bd0 <UnityEnd+0xd0>)
   81b76:	691b      	ldr	r3, [r3, #16]
   81b78:	b1eb      	cbz	r3, 81bb6 <UnityEnd+0xb6>
    {
        UnityPrintOk();
    }
    else
    {
        UnityPrintFail();
   81b7a:	4b1a      	ldr	r3, [pc, #104]	; (81be4 <UnityEnd+0xe4>)
   81b7c:	4798      	blx	r3
    }
    UNITY_PRINT_EOL;
   81b7e:	4b11      	ldr	r3, [pc, #68]	; (81bc4 <UnityEnd+0xc4>)
   81b80:	6818      	ldr	r0, [r3, #0]
   81b82:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   81b84:	6893      	ldr	r3, [r2, #8]
   81b86:	3b01      	subs	r3, #1
   81b88:	6093      	str	r3, [r2, #8]
   81b8a:	2b00      	cmp	r3, #0
   81b8c:	db16      	blt.n	81bbc <UnityEnd+0xbc>
		return (*_p->_p++ = _c);
   81b8e:	6813      	ldr	r3, [r2, #0]
   81b90:	1c59      	adds	r1, r3, #1
   81b92:	6011      	str	r1, [r2, #0]
   81b94:	220a      	movs	r2, #10
   81b96:	701a      	strb	r2, [r3, #0]
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
   81b98:	4b0d      	ldr	r3, [pc, #52]	; (81bd0 <UnityEnd+0xd0>)
   81b9a:	6918      	ldr	r0, [r3, #16]
   81b9c:	bd70      	pop	{r4, r5, r6, pc}
		return (__swbuf_r(_ptr, _c, _p));
   81b9e:	210a      	movs	r1, #10
   81ba0:	4b11      	ldr	r3, [pc, #68]	; (81be8 <UnityEnd+0xe8>)
   81ba2:	4798      	blx	r3
   81ba4:	e7ba      	b.n	81b1c <UnityEnd+0x1c>
   81ba6:	210a      	movs	r1, #10
   81ba8:	4b0f      	ldr	r3, [pc, #60]	; (81be8 <UnityEnd+0xe8>)
   81baa:	4798      	blx	r3
   81bac:	e7c6      	b.n	81b3c <UnityEnd+0x3c>
   81bae:	210a      	movs	r1, #10
   81bb0:	4b0d      	ldr	r3, [pc, #52]	; (81be8 <UnityEnd+0xe8>)
   81bb2:	4798      	blx	r3
   81bb4:	e7de      	b.n	81b74 <UnityEnd+0x74>
        UnityPrintOk();
   81bb6:	4b0d      	ldr	r3, [pc, #52]	; (81bec <UnityEnd+0xec>)
   81bb8:	4798      	blx	r3
   81bba:	e7e0      	b.n	81b7e <UnityEnd+0x7e>
   81bbc:	210a      	movs	r1, #10
   81bbe:	4b0a      	ldr	r3, [pc, #40]	; (81be8 <UnityEnd+0xe8>)
   81bc0:	4798      	blx	r3
   81bc2:	e7e9      	b.n	81b98 <UnityEnd+0x98>
   81bc4:	20070134 	.word	0x20070134
   81bc8:	000889bc 	.word	0x000889bc
   81bcc:	00081515 	.word	0x00081515
   81bd0:	20070c50 	.word	0x20070c50
   81bd4:	000812cd 	.word	0x000812cd
   81bd8:	00088a28 	.word	0x00088a28
   81bdc:	00088a10 	.word	0x00088a10
   81be0:	00088a1c 	.word	0x00088a1c
   81be4:	00081841 	.word	0x00081841
   81be8:	000848b9 	.word	0x000848b9
   81bec:	00081855 	.word	0x00081855

00081bf0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81bf0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81bf2:	480e      	ldr	r0, [pc, #56]	; (81c2c <sysclk_init+0x3c>)
   81bf4:	4b0e      	ldr	r3, [pc, #56]	; (81c30 <sysclk_init+0x40>)
   81bf6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81bf8:	213e      	movs	r1, #62	; 0x3e
   81bfa:	2000      	movs	r0, #0
   81bfc:	4b0d      	ldr	r3, [pc, #52]	; (81c34 <sysclk_init+0x44>)
   81bfe:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81c00:	4c0d      	ldr	r4, [pc, #52]	; (81c38 <sysclk_init+0x48>)
   81c02:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81c04:	2800      	cmp	r0, #0
   81c06:	d0fc      	beq.n	81c02 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81c08:	4b0c      	ldr	r3, [pc, #48]	; (81c3c <sysclk_init+0x4c>)
   81c0a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81c0c:	4a0c      	ldr	r2, [pc, #48]	; (81c40 <sysclk_init+0x50>)
   81c0e:	4b0d      	ldr	r3, [pc, #52]	; (81c44 <sysclk_init+0x54>)
   81c10:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81c12:	4c0d      	ldr	r4, [pc, #52]	; (81c48 <sysclk_init+0x58>)
   81c14:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81c16:	2800      	cmp	r0, #0
   81c18:	d0fc      	beq.n	81c14 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81c1a:	2010      	movs	r0, #16
   81c1c:	4b0b      	ldr	r3, [pc, #44]	; (81c4c <sysclk_init+0x5c>)
   81c1e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81c20:	4b0b      	ldr	r3, [pc, #44]	; (81c50 <sysclk_init+0x60>)
   81c22:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81c24:	4801      	ldr	r0, [pc, #4]	; (81c2c <sysclk_init+0x3c>)
   81c26:	4b02      	ldr	r3, [pc, #8]	; (81c30 <sysclk_init+0x40>)
   81c28:	4798      	blx	r3
   81c2a:	bd10      	pop	{r4, pc}
   81c2c:	0501bd00 	.word	0x0501bd00
   81c30:	200700a5 	.word	0x200700a5
   81c34:	00081fd5 	.word	0x00081fd5
   81c38:	00082029 	.word	0x00082029
   81c3c:	00082039 	.word	0x00082039
   81c40:	200d3f01 	.word	0x200d3f01
   81c44:	400e0600 	.word	0x400e0600
   81c48:	00082049 	.word	0x00082049
   81c4c:	00081f71 	.word	0x00081f71
   81c50:	00082149 	.word	0x00082149

00081c54 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81c54:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81c56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81c5a:	4b12      	ldr	r3, [pc, #72]	; (81ca4 <board_init+0x50>)
   81c5c:	605a      	str	r2, [r3, #4]
   81c5e:	200b      	movs	r0, #11
   81c60:	4c11      	ldr	r4, [pc, #68]	; (81ca8 <board_init+0x54>)
   81c62:	47a0      	blx	r4
   81c64:	200c      	movs	r0, #12
   81c66:	47a0      	blx	r4
   81c68:	200d      	movs	r0, #13
   81c6a:	47a0      	blx	r4
   81c6c:	200e      	movs	r0, #14
   81c6e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81c70:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81c74:	203b      	movs	r0, #59	; 0x3b
   81c76:	4c0d      	ldr	r4, [pc, #52]	; (81cac <board_init+0x58>)
   81c78:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81c7a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81c7e:	2055      	movs	r0, #85	; 0x55
   81c80:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81c82:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81c86:	2056      	movs	r0, #86	; 0x56
   81c88:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81c8a:	4909      	ldr	r1, [pc, #36]	; (81cb0 <board_init+0x5c>)
   81c8c:	2068      	movs	r0, #104	; 0x68
   81c8e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81c90:	4908      	ldr	r1, [pc, #32]	; (81cb4 <board_init+0x60>)
   81c92:	205c      	movs	r0, #92	; 0x5c
   81c94:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81c96:	4a08      	ldr	r2, [pc, #32]	; (81cb8 <board_init+0x64>)
   81c98:	f44f 7140 	mov.w	r1, #768	; 0x300
   81c9c:	4807      	ldr	r0, [pc, #28]	; (81cbc <board_init+0x68>)
   81c9e:	4b08      	ldr	r3, [pc, #32]	; (81cc0 <board_init+0x6c>)
   81ca0:	4798      	blx	r3
   81ca2:	bd10      	pop	{r4, pc}
   81ca4:	400e1a50 	.word	0x400e1a50
   81ca8:	00082059 	.word	0x00082059
   81cac:	00081d65 	.word	0x00081d65
   81cb0:	28000079 	.word	0x28000079
   81cb4:	28000001 	.word	0x28000001
   81cb8:	08000001 	.word	0x08000001
   81cbc:	400e0e00 	.word	0x400e0e00
   81cc0:	00081e35 	.word	0x00081e35

00081cc4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81cc4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81cc6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81cca:	d016      	beq.n	81cfa <pio_set_peripheral+0x36>
   81ccc:	d80b      	bhi.n	81ce6 <pio_set_peripheral+0x22>
   81cce:	b149      	cbz	r1, 81ce4 <pio_set_peripheral+0x20>
   81cd0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81cd4:	d105      	bne.n	81ce2 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81cd6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81cd8:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81cda:	400b      	ands	r3, r1
   81cdc:	ea23 0302 	bic.w	r3, r3, r2
   81ce0:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81ce2:	6042      	str	r2, [r0, #4]
   81ce4:	4770      	bx	lr
	switch (ul_type) {
   81ce6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81cea:	d0fb      	beq.n	81ce4 <pio_set_peripheral+0x20>
   81cec:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81cf0:	d0f8      	beq.n	81ce4 <pio_set_peripheral+0x20>
   81cf2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81cf6:	d1f4      	bne.n	81ce2 <pio_set_peripheral+0x1e>
   81cf8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   81cfa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81cfc:	4313      	orrs	r3, r2
   81cfe:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81d00:	e7ef      	b.n	81ce2 <pio_set_peripheral+0x1e>

00081d02 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81d02:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81d04:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81d08:	bf14      	ite	ne
   81d0a:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81d0c:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81d0e:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81d12:	bf14      	ite	ne
   81d14:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   81d16:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   81d18:	f012 0f02 	tst.w	r2, #2
   81d1c:	d107      	bne.n	81d2e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   81d1e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81d22:	bf18      	it	ne
   81d24:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   81d28:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81d2a:	6001      	str	r1, [r0, #0]
   81d2c:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   81d2e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81d32:	e7f9      	b.n	81d28 <pio_set_input+0x26>

00081d34 <pio_set_output>:
{
   81d34:	b410      	push	{r4}
   81d36:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   81d38:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81d3a:	b944      	cbnz	r4, 81d4e <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   81d3c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   81d3e:	b143      	cbz	r3, 81d52 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   81d40:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   81d42:	b942      	cbnz	r2, 81d56 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   81d44:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   81d46:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81d48:	6001      	str	r1, [r0, #0]
}
   81d4a:	bc10      	pop	{r4}
   81d4c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   81d4e:	6641      	str	r1, [r0, #100]	; 0x64
   81d50:	e7f5      	b.n	81d3e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   81d52:	6541      	str	r1, [r0, #84]	; 0x54
   81d54:	e7f5      	b.n	81d42 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   81d56:	6301      	str	r1, [r0, #48]	; 0x30
   81d58:	e7f5      	b.n	81d46 <pio_set_output+0x12>

00081d5a <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81d5a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81d5c:	4770      	bx	lr

00081d5e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81d5e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81d60:	4770      	bx	lr
	...

00081d64 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81d64:	b570      	push	{r4, r5, r6, lr}
   81d66:	b082      	sub	sp, #8
   81d68:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81d6a:	0943      	lsrs	r3, r0, #5
   81d6c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81d70:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81d74:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   81d76:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   81d7a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81d7e:	d031      	beq.n	81de4 <pio_configure_pin+0x80>
   81d80:	d816      	bhi.n	81db0 <pio_configure_pin+0x4c>
   81d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81d86:	d01b      	beq.n	81dc0 <pio_configure_pin+0x5c>
   81d88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81d8c:	d116      	bne.n	81dbc <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81d8e:	f000 001f 	and.w	r0, r0, #31
   81d92:	2601      	movs	r6, #1
   81d94:	4086      	lsls	r6, r0
   81d96:	4632      	mov	r2, r6
   81d98:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81d9c:	4620      	mov	r0, r4
   81d9e:	4b22      	ldr	r3, [pc, #136]	; (81e28 <pio_configure_pin+0xc4>)
   81da0:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81da2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81da6:	bf14      	ite	ne
   81da8:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81daa:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81dac:	2001      	movs	r0, #1
   81dae:	e017      	b.n	81de0 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   81db0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81db4:	d021      	beq.n	81dfa <pio_configure_pin+0x96>
   81db6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81dba:	d01e      	beq.n	81dfa <pio_configure_pin+0x96>
		return 0;
   81dbc:	2000      	movs	r0, #0
   81dbe:	e00f      	b.n	81de0 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81dc0:	f000 001f 	and.w	r0, r0, #31
   81dc4:	2601      	movs	r6, #1
   81dc6:	4086      	lsls	r6, r0
   81dc8:	4632      	mov	r2, r6
   81dca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81dce:	4620      	mov	r0, r4
   81dd0:	4b15      	ldr	r3, [pc, #84]	; (81e28 <pio_configure_pin+0xc4>)
   81dd2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81dd4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81dd8:	bf14      	ite	ne
   81dda:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81ddc:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81dde:	2001      	movs	r0, #1
}
   81de0:	b002      	add	sp, #8
   81de2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81de4:	f000 011f 	and.w	r1, r0, #31
   81de8:	2601      	movs	r6, #1
   81dea:	462a      	mov	r2, r5
   81dec:	fa06 f101 	lsl.w	r1, r6, r1
   81df0:	4620      	mov	r0, r4
   81df2:	4b0e      	ldr	r3, [pc, #56]	; (81e2c <pio_configure_pin+0xc8>)
   81df4:	4798      	blx	r3
	return 1;
   81df6:	4630      	mov	r0, r6
		break;
   81df8:	e7f2      	b.n	81de0 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81dfa:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81dfe:	f000 011f 	and.w	r1, r0, #31
   81e02:	2601      	movs	r6, #1
   81e04:	ea05 0306 	and.w	r3, r5, r6
   81e08:	9300      	str	r3, [sp, #0]
   81e0a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81e0e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81e12:	bf14      	ite	ne
   81e14:	2200      	movne	r2, #0
   81e16:	2201      	moveq	r2, #1
   81e18:	fa06 f101 	lsl.w	r1, r6, r1
   81e1c:	4620      	mov	r0, r4
   81e1e:	4c04      	ldr	r4, [pc, #16]	; (81e30 <pio_configure_pin+0xcc>)
   81e20:	47a0      	blx	r4
	return 1;
   81e22:	4630      	mov	r0, r6
		break;
   81e24:	e7dc      	b.n	81de0 <pio_configure_pin+0x7c>
   81e26:	bf00      	nop
   81e28:	00081cc5 	.word	0x00081cc5
   81e2c:	00081d03 	.word	0x00081d03
   81e30:	00081d35 	.word	0x00081d35

00081e34 <pio_configure_pin_group>:
{
   81e34:	b570      	push	{r4, r5, r6, lr}
   81e36:	b082      	sub	sp, #8
   81e38:	4605      	mov	r5, r0
   81e3a:	460e      	mov	r6, r1
   81e3c:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   81e3e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   81e42:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81e46:	d027      	beq.n	81e98 <pio_configure_pin_group+0x64>
   81e48:	d811      	bhi.n	81e6e <pio_configure_pin_group+0x3a>
   81e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81e4e:	d016      	beq.n	81e7e <pio_configure_pin_group+0x4a>
   81e50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81e54:	d111      	bne.n	81e7a <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81e56:	460a      	mov	r2, r1
   81e58:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81e5c:	4b19      	ldr	r3, [pc, #100]	; (81ec4 <pio_configure_pin_group+0x90>)
   81e5e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81e60:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81e64:	bf14      	ite	ne
   81e66:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81e68:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81e6a:	2001      	movs	r0, #1
   81e6c:	e012      	b.n	81e94 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   81e6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81e72:	d015      	beq.n	81ea0 <pio_configure_pin_group+0x6c>
   81e74:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81e78:	d012      	beq.n	81ea0 <pio_configure_pin_group+0x6c>
		return 0;
   81e7a:	2000      	movs	r0, #0
   81e7c:	e00a      	b.n	81e94 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81e7e:	460a      	mov	r2, r1
   81e80:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81e84:	4b0f      	ldr	r3, [pc, #60]	; (81ec4 <pio_configure_pin_group+0x90>)
   81e86:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81e88:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81e8c:	bf14      	ite	ne
   81e8e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81e90:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81e92:	2001      	movs	r0, #1
}
   81e94:	b002      	add	sp, #8
   81e96:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   81e98:	4b0b      	ldr	r3, [pc, #44]	; (81ec8 <pio_configure_pin_group+0x94>)
   81e9a:	4798      	blx	r3
	return 1;
   81e9c:	2001      	movs	r0, #1
		break;
   81e9e:	e7f9      	b.n	81e94 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81ea0:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   81ea4:	f004 0301 	and.w	r3, r4, #1
   81ea8:	9300      	str	r3, [sp, #0]
   81eaa:	f3c4 0380 	ubfx	r3, r4, #2, #1
   81eae:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81eb2:	bf14      	ite	ne
   81eb4:	2200      	movne	r2, #0
   81eb6:	2201      	moveq	r2, #1
   81eb8:	4631      	mov	r1, r6
   81eba:	4628      	mov	r0, r5
   81ebc:	4c03      	ldr	r4, [pc, #12]	; (81ecc <pio_configure_pin_group+0x98>)
   81ebe:	47a0      	blx	r4
	return 1;
   81ec0:	2001      	movs	r0, #1
		break;
   81ec2:	e7e7      	b.n	81e94 <pio_configure_pin_group+0x60>
   81ec4:	00081cc5 	.word	0x00081cc5
   81ec8:	00081d03 	.word	0x00081d03
   81ecc:	00081d35 	.word	0x00081d35

00081ed0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81ed4:	4604      	mov	r4, r0
   81ed6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81ed8:	4b0e      	ldr	r3, [pc, #56]	; (81f14 <pio_handler_process+0x44>)
   81eda:	4798      	blx	r3
   81edc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81ede:	4620      	mov	r0, r4
   81ee0:	4b0d      	ldr	r3, [pc, #52]	; (81f18 <pio_handler_process+0x48>)
   81ee2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81ee4:	4005      	ands	r5, r0
   81ee6:	d013      	beq.n	81f10 <pio_handler_process+0x40>
   81ee8:	4c0c      	ldr	r4, [pc, #48]	; (81f1c <pio_handler_process+0x4c>)
   81eea:	f104 0660 	add.w	r6, r4, #96	; 0x60
   81eee:	e003      	b.n	81ef8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81ef0:	42b4      	cmp	r4, r6
   81ef2:	d00d      	beq.n	81f10 <pio_handler_process+0x40>
   81ef4:	3410      	adds	r4, #16
		while (status != 0) {
   81ef6:	b15d      	cbz	r5, 81f10 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   81ef8:	6820      	ldr	r0, [r4, #0]
   81efa:	4540      	cmp	r0, r8
   81efc:	d1f8      	bne.n	81ef0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81efe:	6861      	ldr	r1, [r4, #4]
   81f00:	4229      	tst	r1, r5
   81f02:	d0f5      	beq.n	81ef0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81f04:	68e3      	ldr	r3, [r4, #12]
   81f06:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   81f08:	6863      	ldr	r3, [r4, #4]
   81f0a:	ea25 0503 	bic.w	r5, r5, r3
   81f0e:	e7ef      	b.n	81ef0 <pio_handler_process+0x20>
   81f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f14:	00081d5b 	.word	0x00081d5b
   81f18:	00081d5f 	.word	0x00081d5f
   81f1c:	20070b9c 	.word	0x20070b9c

00081f20 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81f20:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81f22:	210b      	movs	r1, #11
   81f24:	4801      	ldr	r0, [pc, #4]	; (81f2c <PIOA_Handler+0xc>)
   81f26:	4b02      	ldr	r3, [pc, #8]	; (81f30 <PIOA_Handler+0x10>)
   81f28:	4798      	blx	r3
   81f2a:	bd08      	pop	{r3, pc}
   81f2c:	400e0e00 	.word	0x400e0e00
   81f30:	00081ed1 	.word	0x00081ed1

00081f34 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81f34:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81f36:	210c      	movs	r1, #12
   81f38:	4801      	ldr	r0, [pc, #4]	; (81f40 <PIOB_Handler+0xc>)
   81f3a:	4b02      	ldr	r3, [pc, #8]	; (81f44 <PIOB_Handler+0x10>)
   81f3c:	4798      	blx	r3
   81f3e:	bd08      	pop	{r3, pc}
   81f40:	400e1000 	.word	0x400e1000
   81f44:	00081ed1 	.word	0x00081ed1

00081f48 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81f48:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81f4a:	210d      	movs	r1, #13
   81f4c:	4801      	ldr	r0, [pc, #4]	; (81f54 <PIOC_Handler+0xc>)
   81f4e:	4b02      	ldr	r3, [pc, #8]	; (81f58 <PIOC_Handler+0x10>)
   81f50:	4798      	blx	r3
   81f52:	bd08      	pop	{r3, pc}
   81f54:	400e1200 	.word	0x400e1200
   81f58:	00081ed1 	.word	0x00081ed1

00081f5c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81f5c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81f5e:	210e      	movs	r1, #14
   81f60:	4801      	ldr	r0, [pc, #4]	; (81f68 <PIOD_Handler+0xc>)
   81f62:	4b02      	ldr	r3, [pc, #8]	; (81f6c <PIOD_Handler+0x10>)
   81f64:	4798      	blx	r3
   81f66:	bd08      	pop	{r3, pc}
   81f68:	400e1400 	.word	0x400e1400
   81f6c:	00081ed1 	.word	0x00081ed1

00081f70 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81f70:	4a17      	ldr	r2, [pc, #92]	; (81fd0 <pmc_switch_mck_to_pllack+0x60>)
   81f72:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81f78:	4318      	orrs	r0, r3
   81f7a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81f7c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81f7e:	f013 0f08 	tst.w	r3, #8
   81f82:	d10a      	bne.n	81f9a <pmc_switch_mck_to_pllack+0x2a>
   81f84:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81f88:	4911      	ldr	r1, [pc, #68]	; (81fd0 <pmc_switch_mck_to_pllack+0x60>)
   81f8a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81f8c:	f012 0f08 	tst.w	r2, #8
   81f90:	d103      	bne.n	81f9a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81f92:	3b01      	subs	r3, #1
   81f94:	d1f9      	bne.n	81f8a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   81f96:	2001      	movs	r0, #1
   81f98:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81f9a:	4a0d      	ldr	r2, [pc, #52]	; (81fd0 <pmc_switch_mck_to_pllack+0x60>)
   81f9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81f9e:	f023 0303 	bic.w	r3, r3, #3
   81fa2:	f043 0302 	orr.w	r3, r3, #2
   81fa6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81fa8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81faa:	f013 0f08 	tst.w	r3, #8
   81fae:	d10a      	bne.n	81fc6 <pmc_switch_mck_to_pllack+0x56>
   81fb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81fb4:	4906      	ldr	r1, [pc, #24]	; (81fd0 <pmc_switch_mck_to_pllack+0x60>)
   81fb6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81fb8:	f012 0f08 	tst.w	r2, #8
   81fbc:	d105      	bne.n	81fca <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81fbe:	3b01      	subs	r3, #1
   81fc0:	d1f9      	bne.n	81fb6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   81fc2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81fc4:	4770      	bx	lr
	return 0;
   81fc6:	2000      	movs	r0, #0
   81fc8:	4770      	bx	lr
   81fca:	2000      	movs	r0, #0
   81fcc:	4770      	bx	lr
   81fce:	bf00      	nop
   81fd0:	400e0600 	.word	0x400e0600

00081fd4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81fd4:	b9c8      	cbnz	r0, 8200a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81fd6:	4a11      	ldr	r2, [pc, #68]	; (8201c <pmc_switch_mainck_to_xtal+0x48>)
   81fd8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81fda:	0209      	lsls	r1, r1, #8
   81fdc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81fde:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81fe2:	f023 0303 	bic.w	r3, r3, #3
   81fe6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81fea:	f043 0301 	orr.w	r3, r3, #1
   81fee:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81ff0:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81ff2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81ff4:	f013 0f01 	tst.w	r3, #1
   81ff8:	d0fb      	beq.n	81ff2 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81ffa:	4a08      	ldr	r2, [pc, #32]	; (8201c <pmc_switch_mainck_to_xtal+0x48>)
   81ffc:	6a13      	ldr	r3, [r2, #32]
   81ffe:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82006:	6213      	str	r3, [r2, #32]
   82008:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8200a:	4904      	ldr	r1, [pc, #16]	; (8201c <pmc_switch_mainck_to_xtal+0x48>)
   8200c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8200e:	4a04      	ldr	r2, [pc, #16]	; (82020 <pmc_switch_mainck_to_xtal+0x4c>)
   82010:	401a      	ands	r2, r3
   82012:	4b04      	ldr	r3, [pc, #16]	; (82024 <pmc_switch_mainck_to_xtal+0x50>)
   82014:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82016:	620b      	str	r3, [r1, #32]
   82018:	4770      	bx	lr
   8201a:	bf00      	nop
   8201c:	400e0600 	.word	0x400e0600
   82020:	fec8fffc 	.word	0xfec8fffc
   82024:	01370002 	.word	0x01370002

00082028 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82028:	4b02      	ldr	r3, [pc, #8]	; (82034 <pmc_osc_is_ready_mainck+0xc>)
   8202a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8202c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82030:	4770      	bx	lr
   82032:	bf00      	nop
   82034:	400e0600 	.word	0x400e0600

00082038 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82038:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8203c:	4b01      	ldr	r3, [pc, #4]	; (82044 <pmc_disable_pllack+0xc>)
   8203e:	629a      	str	r2, [r3, #40]	; 0x28
   82040:	4770      	bx	lr
   82042:	bf00      	nop
   82044:	400e0600 	.word	0x400e0600

00082048 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82048:	4b02      	ldr	r3, [pc, #8]	; (82054 <pmc_is_locked_pllack+0xc>)
   8204a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8204c:	f000 0002 	and.w	r0, r0, #2
   82050:	4770      	bx	lr
   82052:	bf00      	nop
   82054:	400e0600 	.word	0x400e0600

00082058 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82058:	282c      	cmp	r0, #44	; 0x2c
   8205a:	d81e      	bhi.n	8209a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   8205c:	281f      	cmp	r0, #31
   8205e:	d80c      	bhi.n	8207a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82060:	4b11      	ldr	r3, [pc, #68]	; (820a8 <pmc_enable_periph_clk+0x50>)
   82062:	699a      	ldr	r2, [r3, #24]
   82064:	2301      	movs	r3, #1
   82066:	4083      	lsls	r3, r0
   82068:	4393      	bics	r3, r2
   8206a:	d018      	beq.n	8209e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   8206c:	2301      	movs	r3, #1
   8206e:	fa03 f000 	lsl.w	r0, r3, r0
   82072:	4b0d      	ldr	r3, [pc, #52]	; (820a8 <pmc_enable_periph_clk+0x50>)
   82074:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82076:	2000      	movs	r0, #0
   82078:	4770      	bx	lr
		ul_id -= 32;
   8207a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8207c:	4b0a      	ldr	r3, [pc, #40]	; (820a8 <pmc_enable_periph_clk+0x50>)
   8207e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   82082:	2301      	movs	r3, #1
   82084:	4083      	lsls	r3, r0
   82086:	4393      	bics	r3, r2
   82088:	d00b      	beq.n	820a2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   8208a:	2301      	movs	r3, #1
   8208c:	fa03 f000 	lsl.w	r0, r3, r0
   82090:	4b05      	ldr	r3, [pc, #20]	; (820a8 <pmc_enable_periph_clk+0x50>)
   82092:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   82096:	2000      	movs	r0, #0
   82098:	4770      	bx	lr
		return 1;
   8209a:	2001      	movs	r0, #1
   8209c:	4770      	bx	lr
	return 0;
   8209e:	2000      	movs	r0, #0
   820a0:	4770      	bx	lr
   820a2:	2000      	movs	r0, #0
}
   820a4:	4770      	bx	lr
   820a6:	bf00      	nop
   820a8:	400e0600 	.word	0x400e0600

000820ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   820ac:	e7fe      	b.n	820ac <Dummy_Handler>
	...

000820b0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   820b0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   820b2:	4b1c      	ldr	r3, [pc, #112]	; (82124 <Reset_Handler+0x74>)
   820b4:	4a1c      	ldr	r2, [pc, #112]	; (82128 <Reset_Handler+0x78>)
   820b6:	429a      	cmp	r2, r3
   820b8:	d010      	beq.n	820dc <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   820ba:	4b1c      	ldr	r3, [pc, #112]	; (8212c <Reset_Handler+0x7c>)
   820bc:	4a19      	ldr	r2, [pc, #100]	; (82124 <Reset_Handler+0x74>)
   820be:	429a      	cmp	r2, r3
   820c0:	d20c      	bcs.n	820dc <Reset_Handler+0x2c>
   820c2:	3b01      	subs	r3, #1
   820c4:	1a9b      	subs	r3, r3, r2
   820c6:	f023 0303 	bic.w	r3, r3, #3
   820ca:	3304      	adds	r3, #4
   820cc:	4413      	add	r3, r2
   820ce:	4916      	ldr	r1, [pc, #88]	; (82128 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   820d0:	f851 0b04 	ldr.w	r0, [r1], #4
   820d4:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   820d8:	429a      	cmp	r2, r3
   820da:	d1f9      	bne.n	820d0 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   820dc:	4b14      	ldr	r3, [pc, #80]	; (82130 <Reset_Handler+0x80>)
   820de:	4a15      	ldr	r2, [pc, #84]	; (82134 <Reset_Handler+0x84>)
   820e0:	429a      	cmp	r2, r3
   820e2:	d20a      	bcs.n	820fa <Reset_Handler+0x4a>
   820e4:	3b01      	subs	r3, #1
   820e6:	1a9b      	subs	r3, r3, r2
   820e8:	f023 0303 	bic.w	r3, r3, #3
   820ec:	3304      	adds	r3, #4
   820ee:	4413      	add	r3, r2
		*pDest++ = 0;
   820f0:	2100      	movs	r1, #0
   820f2:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   820f6:	4293      	cmp	r3, r2
   820f8:	d1fb      	bne.n	820f2 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   820fa:	4b0f      	ldr	r3, [pc, #60]	; (82138 <Reset_Handler+0x88>)
   820fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   82100:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82104:	490d      	ldr	r1, [pc, #52]	; (8213c <Reset_Handler+0x8c>)
   82106:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82108:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8210c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   82110:	d203      	bcs.n	8211a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82112:	688b      	ldr	r3, [r1, #8]
   82114:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82118:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8211a:	4b09      	ldr	r3, [pc, #36]	; (82140 <Reset_Handler+0x90>)
   8211c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8211e:	4b09      	ldr	r3, [pc, #36]	; (82144 <Reset_Handler+0x94>)
   82120:	4798      	blx	r3
   82122:	e7fe      	b.n	82122 <Reset_Handler+0x72>
   82124:	20070000 	.word	0x20070000
   82128:	00088d14 	.word	0x00088d14
   8212c:	20070ae0 	.word	0x20070ae0
   82130:	20070cf4 	.word	0x20070cf4
   82134:	20070ae0 	.word	0x20070ae0
   82138:	00080000 	.word	0x00080000
   8213c:	e000ed00 	.word	0xe000ed00
   82140:	000822b1 	.word	0x000822b1
   82144:	00080a21 	.word	0x00080a21

00082148 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82148:	4b3d      	ldr	r3, [pc, #244]	; (82240 <SystemCoreClockUpdate+0xf8>)
   8214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8214c:	f003 0303 	and.w	r3, r3, #3
   82150:	2b03      	cmp	r3, #3
   82152:	d80e      	bhi.n	82172 <SystemCoreClockUpdate+0x2a>
   82154:	e8df f003 	tbb	[pc, r3]
   82158:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8215c:	4b39      	ldr	r3, [pc, #228]	; (82244 <SystemCoreClockUpdate+0xfc>)
   8215e:	695b      	ldr	r3, [r3, #20]
   82160:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82164:	bf14      	ite	ne
   82166:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8216a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8216e:	4b36      	ldr	r3, [pc, #216]	; (82248 <SystemCoreClockUpdate+0x100>)
   82170:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82172:	4b33      	ldr	r3, [pc, #204]	; (82240 <SystemCoreClockUpdate+0xf8>)
   82174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82176:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8217a:	2b70      	cmp	r3, #112	; 0x70
   8217c:	d057      	beq.n	8222e <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8217e:	4b30      	ldr	r3, [pc, #192]	; (82240 <SystemCoreClockUpdate+0xf8>)
   82180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82182:	4931      	ldr	r1, [pc, #196]	; (82248 <SystemCoreClockUpdate+0x100>)
   82184:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82188:	680b      	ldr	r3, [r1, #0]
   8218a:	40d3      	lsrs	r3, r2
   8218c:	600b      	str	r3, [r1, #0]
   8218e:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82190:	4b2b      	ldr	r3, [pc, #172]	; (82240 <SystemCoreClockUpdate+0xf8>)
   82192:	6a1b      	ldr	r3, [r3, #32]
   82194:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82198:	d003      	beq.n	821a2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8219a:	4a2c      	ldr	r2, [pc, #176]	; (8224c <SystemCoreClockUpdate+0x104>)
   8219c:	4b2a      	ldr	r3, [pc, #168]	; (82248 <SystemCoreClockUpdate+0x100>)
   8219e:	601a      	str	r2, [r3, #0]
   821a0:	e7e7      	b.n	82172 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   821a2:	4a2b      	ldr	r2, [pc, #172]	; (82250 <SystemCoreClockUpdate+0x108>)
   821a4:	4b28      	ldr	r3, [pc, #160]	; (82248 <SystemCoreClockUpdate+0x100>)
   821a6:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   821a8:	4b25      	ldr	r3, [pc, #148]	; (82240 <SystemCoreClockUpdate+0xf8>)
   821aa:	6a1b      	ldr	r3, [r3, #32]
   821ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
   821b0:	2b10      	cmp	r3, #16
   821b2:	d005      	beq.n	821c0 <SystemCoreClockUpdate+0x78>
   821b4:	2b20      	cmp	r3, #32
   821b6:	d1dc      	bne.n	82172 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   821b8:	4a24      	ldr	r2, [pc, #144]	; (8224c <SystemCoreClockUpdate+0x104>)
   821ba:	4b23      	ldr	r3, [pc, #140]	; (82248 <SystemCoreClockUpdate+0x100>)
   821bc:	601a      	str	r2, [r3, #0]
				break;
   821be:	e7d8      	b.n	82172 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   821c0:	4a24      	ldr	r2, [pc, #144]	; (82254 <SystemCoreClockUpdate+0x10c>)
   821c2:	4b21      	ldr	r3, [pc, #132]	; (82248 <SystemCoreClockUpdate+0x100>)
   821c4:	601a      	str	r2, [r3, #0]
				break;
   821c6:	e7d4      	b.n	82172 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   821c8:	4b1d      	ldr	r3, [pc, #116]	; (82240 <SystemCoreClockUpdate+0xf8>)
   821ca:	6a1b      	ldr	r3, [r3, #32]
   821cc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   821d0:	d00c      	beq.n	821ec <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   821d2:	4a1e      	ldr	r2, [pc, #120]	; (8224c <SystemCoreClockUpdate+0x104>)
   821d4:	4b1c      	ldr	r3, [pc, #112]	; (82248 <SystemCoreClockUpdate+0x100>)
   821d6:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   821d8:	4b19      	ldr	r3, [pc, #100]	; (82240 <SystemCoreClockUpdate+0xf8>)
   821da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   821dc:	f003 0303 	and.w	r3, r3, #3
   821e0:	2b02      	cmp	r3, #2
   821e2:	d016      	beq.n	82212 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   821e4:	4a1c      	ldr	r2, [pc, #112]	; (82258 <SystemCoreClockUpdate+0x110>)
   821e6:	4b18      	ldr	r3, [pc, #96]	; (82248 <SystemCoreClockUpdate+0x100>)
   821e8:	601a      	str	r2, [r3, #0]
   821ea:	e7c2      	b.n	82172 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   821ec:	4a18      	ldr	r2, [pc, #96]	; (82250 <SystemCoreClockUpdate+0x108>)
   821ee:	4b16      	ldr	r3, [pc, #88]	; (82248 <SystemCoreClockUpdate+0x100>)
   821f0:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   821f2:	4b13      	ldr	r3, [pc, #76]	; (82240 <SystemCoreClockUpdate+0xf8>)
   821f4:	6a1b      	ldr	r3, [r3, #32]
   821f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   821fa:	2b10      	cmp	r3, #16
   821fc:	d005      	beq.n	8220a <SystemCoreClockUpdate+0xc2>
   821fe:	2b20      	cmp	r3, #32
   82200:	d1ea      	bne.n	821d8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   82202:	4a12      	ldr	r2, [pc, #72]	; (8224c <SystemCoreClockUpdate+0x104>)
   82204:	4b10      	ldr	r3, [pc, #64]	; (82248 <SystemCoreClockUpdate+0x100>)
   82206:	601a      	str	r2, [r3, #0]
				break;
   82208:	e7e6      	b.n	821d8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8220a:	4a12      	ldr	r2, [pc, #72]	; (82254 <SystemCoreClockUpdate+0x10c>)
   8220c:	4b0e      	ldr	r3, [pc, #56]	; (82248 <SystemCoreClockUpdate+0x100>)
   8220e:	601a      	str	r2, [r3, #0]
				break;
   82210:	e7e2      	b.n	821d8 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82212:	4a0b      	ldr	r2, [pc, #44]	; (82240 <SystemCoreClockUpdate+0xf8>)
   82214:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82216:	6a92      	ldr	r2, [r2, #40]	; 0x28
   82218:	480b      	ldr	r0, [pc, #44]	; (82248 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8221a:	f3c1 410a 	ubfx	r1, r1, #16, #11
   8221e:	6803      	ldr	r3, [r0, #0]
   82220:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82224:	b2d2      	uxtb	r2, r2
   82226:	fbb3 f3f2 	udiv	r3, r3, r2
   8222a:	6003      	str	r3, [r0, #0]
   8222c:	e7a1      	b.n	82172 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   8222e:	4a06      	ldr	r2, [pc, #24]	; (82248 <SystemCoreClockUpdate+0x100>)
   82230:	6813      	ldr	r3, [r2, #0]
   82232:	490a      	ldr	r1, [pc, #40]	; (8225c <SystemCoreClockUpdate+0x114>)
   82234:	fba1 1303 	umull	r1, r3, r1, r3
   82238:	085b      	lsrs	r3, r3, #1
   8223a:	6013      	str	r3, [r2, #0]
   8223c:	4770      	bx	lr
   8223e:	bf00      	nop
   82240:	400e0600 	.word	0x400e0600
   82244:	400e1a10 	.word	0x400e1a10
   82248:	20070130 	.word	0x20070130
   8224c:	00b71b00 	.word	0x00b71b00
   82250:	003d0900 	.word	0x003d0900
   82254:	007a1200 	.word	0x007a1200
   82258:	0e4e1c00 	.word	0x0e4e1c00
   8225c:	aaaaaaab 	.word	0xaaaaaaab

00082260 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82260:	4b0a      	ldr	r3, [pc, #40]	; (8228c <_sbrk+0x2c>)
   82262:	681b      	ldr	r3, [r3, #0]
   82264:	b153      	cbz	r3, 8227c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   82266:	4b09      	ldr	r3, [pc, #36]	; (8228c <_sbrk+0x2c>)
   82268:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   8226a:	181a      	adds	r2, r3, r0
   8226c:	4908      	ldr	r1, [pc, #32]	; (82290 <_sbrk+0x30>)
   8226e:	4291      	cmp	r1, r2
   82270:	db08      	blt.n	82284 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   82272:	4610      	mov	r0, r2
   82274:	4a05      	ldr	r2, [pc, #20]	; (8228c <_sbrk+0x2c>)
   82276:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82278:	4618      	mov	r0, r3
   8227a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   8227c:	4a05      	ldr	r2, [pc, #20]	; (82294 <_sbrk+0x34>)
   8227e:	4b03      	ldr	r3, [pc, #12]	; (8228c <_sbrk+0x2c>)
   82280:	601a      	str	r2, [r3, #0]
   82282:	e7f0      	b.n	82266 <_sbrk+0x6>
		return (caddr_t) -1;	
   82284:	f04f 30ff 	mov.w	r0, #4294967295
}
   82288:	4770      	bx	lr
   8228a:	bf00      	nop
   8228c:	20070c0c 	.word	0x20070c0c
   82290:	20087ffc 	.word	0x20087ffc
   82294:	20072cf8 	.word	0x20072cf8

00082298 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82298:	f04f 30ff 	mov.w	r0, #4294967295
   8229c:	4770      	bx	lr

0008229e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8229e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   822a2:	604b      	str	r3, [r1, #4]

	return 0;
}
   822a4:	2000      	movs	r0, #0
   822a6:	4770      	bx	lr

000822a8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   822a8:	2001      	movs	r0, #1
   822aa:	4770      	bx	lr

000822ac <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   822ac:	2000      	movs	r0, #0
   822ae:	4770      	bx	lr

000822b0 <__libc_init_array>:
   822b0:	b570      	push	{r4, r5, r6, lr}
   822b2:	4e0f      	ldr	r6, [pc, #60]	; (822f0 <__libc_init_array+0x40>)
   822b4:	4d0f      	ldr	r5, [pc, #60]	; (822f4 <__libc_init_array+0x44>)
   822b6:	1b76      	subs	r6, r6, r5
   822b8:	10b6      	asrs	r6, r6, #2
   822ba:	bf18      	it	ne
   822bc:	2400      	movne	r4, #0
   822be:	d005      	beq.n	822cc <__libc_init_array+0x1c>
   822c0:	3401      	adds	r4, #1
   822c2:	f855 3b04 	ldr.w	r3, [r5], #4
   822c6:	4798      	blx	r3
   822c8:	42a6      	cmp	r6, r4
   822ca:	d1f9      	bne.n	822c0 <__libc_init_array+0x10>
   822cc:	4e0a      	ldr	r6, [pc, #40]	; (822f8 <__libc_init_array+0x48>)
   822ce:	4d0b      	ldr	r5, [pc, #44]	; (822fc <__libc_init_array+0x4c>)
   822d0:	f006 fd0a 	bl	88ce8 <_init>
   822d4:	1b76      	subs	r6, r6, r5
   822d6:	10b6      	asrs	r6, r6, #2
   822d8:	bf18      	it	ne
   822da:	2400      	movne	r4, #0
   822dc:	d006      	beq.n	822ec <__libc_init_array+0x3c>
   822de:	3401      	adds	r4, #1
   822e0:	f855 3b04 	ldr.w	r3, [r5], #4
   822e4:	4798      	blx	r3
   822e6:	42a6      	cmp	r6, r4
   822e8:	d1f9      	bne.n	822de <__libc_init_array+0x2e>
   822ea:	bd70      	pop	{r4, r5, r6, pc}
   822ec:	bd70      	pop	{r4, r5, r6, pc}
   822ee:	bf00      	nop
   822f0:	00088cf4 	.word	0x00088cf4
   822f4:	00088cf4 	.word	0x00088cf4
   822f8:	00088cfc 	.word	0x00088cfc
   822fc:	00088cf4 	.word	0x00088cf4

00082300 <iprintf>:
   82300:	b40f      	push	{r0, r1, r2, r3}
   82302:	b510      	push	{r4, lr}
   82304:	4b07      	ldr	r3, [pc, #28]	; (82324 <iprintf+0x24>)
   82306:	b082      	sub	sp, #8
   82308:	ac04      	add	r4, sp, #16
   8230a:	f854 2b04 	ldr.w	r2, [r4], #4
   8230e:	6818      	ldr	r0, [r3, #0]
   82310:	4623      	mov	r3, r4
   82312:	6881      	ldr	r1, [r0, #8]
   82314:	9401      	str	r4, [sp, #4]
   82316:	f001 fc47 	bl	83ba8 <_vfiprintf_r>
   8231a:	b002      	add	sp, #8
   8231c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82320:	b004      	add	sp, #16
   82322:	4770      	bx	lr
   82324:	20070134 	.word	0x20070134

00082328 <memset>:
   82328:	b470      	push	{r4, r5, r6}
   8232a:	0786      	lsls	r6, r0, #30
   8232c:	d046      	beq.n	823bc <memset+0x94>
   8232e:	1e54      	subs	r4, r2, #1
   82330:	2a00      	cmp	r2, #0
   82332:	d041      	beq.n	823b8 <memset+0x90>
   82334:	b2ca      	uxtb	r2, r1
   82336:	4603      	mov	r3, r0
   82338:	e002      	b.n	82340 <memset+0x18>
   8233a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8233e:	d33b      	bcc.n	823b8 <memset+0x90>
   82340:	f803 2b01 	strb.w	r2, [r3], #1
   82344:	079d      	lsls	r5, r3, #30
   82346:	d1f8      	bne.n	8233a <memset+0x12>
   82348:	2c03      	cmp	r4, #3
   8234a:	d92e      	bls.n	823aa <memset+0x82>
   8234c:	b2cd      	uxtb	r5, r1
   8234e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82352:	2c0f      	cmp	r4, #15
   82354:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82358:	d919      	bls.n	8238e <memset+0x66>
   8235a:	4626      	mov	r6, r4
   8235c:	f103 0210 	add.w	r2, r3, #16
   82360:	3e10      	subs	r6, #16
   82362:	2e0f      	cmp	r6, #15
   82364:	f842 5c10 	str.w	r5, [r2, #-16]
   82368:	f842 5c0c 	str.w	r5, [r2, #-12]
   8236c:	f842 5c08 	str.w	r5, [r2, #-8]
   82370:	f842 5c04 	str.w	r5, [r2, #-4]
   82374:	f102 0210 	add.w	r2, r2, #16
   82378:	d8f2      	bhi.n	82360 <memset+0x38>
   8237a:	f1a4 0210 	sub.w	r2, r4, #16
   8237e:	f022 020f 	bic.w	r2, r2, #15
   82382:	f004 040f 	and.w	r4, r4, #15
   82386:	3210      	adds	r2, #16
   82388:	2c03      	cmp	r4, #3
   8238a:	4413      	add	r3, r2
   8238c:	d90d      	bls.n	823aa <memset+0x82>
   8238e:	461e      	mov	r6, r3
   82390:	4622      	mov	r2, r4
   82392:	3a04      	subs	r2, #4
   82394:	2a03      	cmp	r2, #3
   82396:	f846 5b04 	str.w	r5, [r6], #4
   8239a:	d8fa      	bhi.n	82392 <memset+0x6a>
   8239c:	1f22      	subs	r2, r4, #4
   8239e:	f022 0203 	bic.w	r2, r2, #3
   823a2:	3204      	adds	r2, #4
   823a4:	4413      	add	r3, r2
   823a6:	f004 0403 	and.w	r4, r4, #3
   823aa:	b12c      	cbz	r4, 823b8 <memset+0x90>
   823ac:	b2c9      	uxtb	r1, r1
   823ae:	441c      	add	r4, r3
   823b0:	f803 1b01 	strb.w	r1, [r3], #1
   823b4:	429c      	cmp	r4, r3
   823b6:	d1fb      	bne.n	823b0 <memset+0x88>
   823b8:	bc70      	pop	{r4, r5, r6}
   823ba:	4770      	bx	lr
   823bc:	4614      	mov	r4, r2
   823be:	4603      	mov	r3, r0
   823c0:	e7c2      	b.n	82348 <memset+0x20>
   823c2:	bf00      	nop

000823c4 <setbuf>:
   823c4:	2900      	cmp	r1, #0
   823c6:	bf0c      	ite	eq
   823c8:	2202      	moveq	r2, #2
   823ca:	2200      	movne	r2, #0
   823cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   823d0:	f000 b80e 	b.w	823f0 <setvbuf>

000823d4 <setjmp>:
   823d4:	46ec      	mov	ip, sp
   823d6:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   823da:	f04f 0000 	mov.w	r0, #0
   823de:	4770      	bx	lr

000823e0 <longjmp>:
   823e0:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   823e4:	46e5      	mov	sp, ip
   823e6:	0008      	movs	r0, r1
   823e8:	bf08      	it	eq
   823ea:	2001      	moveq	r0, #1
   823ec:	4770      	bx	lr
   823ee:	bf00      	nop

000823f0 <setvbuf>:
   823f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   823f4:	4d61      	ldr	r5, [pc, #388]	; (8257c <setvbuf+0x18c>)
   823f6:	b083      	sub	sp, #12
   823f8:	682d      	ldr	r5, [r5, #0]
   823fa:	4604      	mov	r4, r0
   823fc:	460f      	mov	r7, r1
   823fe:	4690      	mov	r8, r2
   82400:	461e      	mov	r6, r3
   82402:	b115      	cbz	r5, 8240a <setvbuf+0x1a>
   82404:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82406:	2b00      	cmp	r3, #0
   82408:	d064      	beq.n	824d4 <setvbuf+0xe4>
   8240a:	f1b8 0f02 	cmp.w	r8, #2
   8240e:	d006      	beq.n	8241e <setvbuf+0x2e>
   82410:	f1b8 0f01 	cmp.w	r8, #1
   82414:	f200 809f 	bhi.w	82556 <setvbuf+0x166>
   82418:	2e00      	cmp	r6, #0
   8241a:	f2c0 809c 	blt.w	82556 <setvbuf+0x166>
   8241e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82420:	07d8      	lsls	r0, r3, #31
   82422:	d534      	bpl.n	8248e <setvbuf+0x9e>
   82424:	4621      	mov	r1, r4
   82426:	4628      	mov	r0, r5
   82428:	f003 fb64 	bl	85af4 <_fflush_r>
   8242c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8242e:	b141      	cbz	r1, 82442 <setvbuf+0x52>
   82430:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82434:	4299      	cmp	r1, r3
   82436:	d002      	beq.n	8243e <setvbuf+0x4e>
   82438:	4628      	mov	r0, r5
   8243a:	f003 fcd9 	bl	85df0 <_free_r>
   8243e:	2300      	movs	r3, #0
   82440:	6323      	str	r3, [r4, #48]	; 0x30
   82442:	2200      	movs	r2, #0
   82444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82448:	61a2      	str	r2, [r4, #24]
   8244a:	6062      	str	r2, [r4, #4]
   8244c:	061a      	lsls	r2, r3, #24
   8244e:	d43a      	bmi.n	824c6 <setvbuf+0xd6>
   82450:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   82454:	f023 0303 	bic.w	r3, r3, #3
   82458:	f1b8 0f02 	cmp.w	r8, #2
   8245c:	81a3      	strh	r3, [r4, #12]
   8245e:	d01d      	beq.n	8249c <setvbuf+0xac>
   82460:	ab01      	add	r3, sp, #4
   82462:	466a      	mov	r2, sp
   82464:	4621      	mov	r1, r4
   82466:	4628      	mov	r0, r5
   82468:	f003 ff6e 	bl	86348 <__swhatbuf_r>
   8246c:	89a3      	ldrh	r3, [r4, #12]
   8246e:	4318      	orrs	r0, r3
   82470:	81a0      	strh	r0, [r4, #12]
   82472:	2e00      	cmp	r6, #0
   82474:	d132      	bne.n	824dc <setvbuf+0xec>
   82476:	9e00      	ldr	r6, [sp, #0]
   82478:	4630      	mov	r0, r6
   8247a:	f003 ffdd 	bl	86438 <malloc>
   8247e:	4607      	mov	r7, r0
   82480:	2800      	cmp	r0, #0
   82482:	d06b      	beq.n	8255c <setvbuf+0x16c>
   82484:	89a3      	ldrh	r3, [r4, #12]
   82486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8248a:	81a3      	strh	r3, [r4, #12]
   8248c:	e028      	b.n	824e0 <setvbuf+0xf0>
   8248e:	89a3      	ldrh	r3, [r4, #12]
   82490:	0599      	lsls	r1, r3, #22
   82492:	d4c7      	bmi.n	82424 <setvbuf+0x34>
   82494:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82496:	f003 ff53 	bl	86340 <__retarget_lock_acquire_recursive>
   8249a:	e7c3      	b.n	82424 <setvbuf+0x34>
   8249c:	2500      	movs	r5, #0
   8249e:	2600      	movs	r6, #0
   824a0:	2001      	movs	r0, #1
   824a2:	6e61      	ldr	r1, [r4, #100]	; 0x64
   824a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   824a8:	f043 0302 	orr.w	r3, r3, #2
   824ac:	60a6      	str	r6, [r4, #8]
   824ae:	07ce      	lsls	r6, r1, #31
   824b0:	81a3      	strh	r3, [r4, #12]
   824b2:	6160      	str	r0, [r4, #20]
   824b4:	6022      	str	r2, [r4, #0]
   824b6:	6122      	str	r2, [r4, #16]
   824b8:	d401      	bmi.n	824be <setvbuf+0xce>
   824ba:	0598      	lsls	r0, r3, #22
   824bc:	d53e      	bpl.n	8253c <setvbuf+0x14c>
   824be:	4628      	mov	r0, r5
   824c0:	b003      	add	sp, #12
   824c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   824c6:	6921      	ldr	r1, [r4, #16]
   824c8:	4628      	mov	r0, r5
   824ca:	f003 fc91 	bl	85df0 <_free_r>
   824ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   824d2:	e7bd      	b.n	82450 <setvbuf+0x60>
   824d4:	4628      	mov	r0, r5
   824d6:	f003 fb65 	bl	85ba4 <__sinit>
   824da:	e796      	b.n	8240a <setvbuf+0x1a>
   824dc:	2f00      	cmp	r7, #0
   824de:	d0cb      	beq.n	82478 <setvbuf+0x88>
   824e0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   824e2:	2b00      	cmp	r3, #0
   824e4:	d033      	beq.n	8254e <setvbuf+0x15e>
   824e6:	9b00      	ldr	r3, [sp, #0]
   824e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   824ec:	429e      	cmp	r6, r3
   824ee:	bf1c      	itt	ne
   824f0:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   824f4:	81a2      	strhne	r2, [r4, #12]
   824f6:	f1b8 0f01 	cmp.w	r8, #1
   824fa:	bf04      	itt	eq
   824fc:	f042 0201 	orreq.w	r2, r2, #1
   82500:	81a2      	strheq	r2, [r4, #12]
   82502:	b292      	uxth	r2, r2
   82504:	f012 0308 	ands.w	r3, r2, #8
   82508:	6027      	str	r7, [r4, #0]
   8250a:	6127      	str	r7, [r4, #16]
   8250c:	6166      	str	r6, [r4, #20]
   8250e:	d00e      	beq.n	8252e <setvbuf+0x13e>
   82510:	07d1      	lsls	r1, r2, #31
   82512:	d51a      	bpl.n	8254a <setvbuf+0x15a>
   82514:	2300      	movs	r3, #0
   82516:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82518:	4276      	negs	r6, r6
   8251a:	f015 0501 	ands.w	r5, r5, #1
   8251e:	61a6      	str	r6, [r4, #24]
   82520:	60a3      	str	r3, [r4, #8]
   82522:	d009      	beq.n	82538 <setvbuf+0x148>
   82524:	2500      	movs	r5, #0
   82526:	4628      	mov	r0, r5
   82528:	b003      	add	sp, #12
   8252a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8252e:	60a3      	str	r3, [r4, #8]
   82530:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82532:	f015 0501 	ands.w	r5, r5, #1
   82536:	d1f5      	bne.n	82524 <setvbuf+0x134>
   82538:	0593      	lsls	r3, r2, #22
   8253a:	d4c0      	bmi.n	824be <setvbuf+0xce>
   8253c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8253e:	f003 ff01 	bl	86344 <__retarget_lock_release_recursive>
   82542:	4628      	mov	r0, r5
   82544:	b003      	add	sp, #12
   82546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8254a:	60a6      	str	r6, [r4, #8]
   8254c:	e7f0      	b.n	82530 <setvbuf+0x140>
   8254e:	4628      	mov	r0, r5
   82550:	f003 fb28 	bl	85ba4 <__sinit>
   82554:	e7c7      	b.n	824e6 <setvbuf+0xf6>
   82556:	f04f 35ff 	mov.w	r5, #4294967295
   8255a:	e7b0      	b.n	824be <setvbuf+0xce>
   8255c:	f8dd 9000 	ldr.w	r9, [sp]
   82560:	45b1      	cmp	r9, r6
   82562:	d004      	beq.n	8256e <setvbuf+0x17e>
   82564:	4648      	mov	r0, r9
   82566:	f003 ff67 	bl	86438 <malloc>
   8256a:	4607      	mov	r7, r0
   8256c:	b920      	cbnz	r0, 82578 <setvbuf+0x188>
   8256e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82572:	f04f 35ff 	mov.w	r5, #4294967295
   82576:	e792      	b.n	8249e <setvbuf+0xae>
   82578:	464e      	mov	r6, r9
   8257a:	e783      	b.n	82484 <setvbuf+0x94>
   8257c:	20070134 	.word	0x20070134

00082580 <sprintf>:
   82580:	b40e      	push	{r1, r2, r3}
   82582:	4601      	mov	r1, r0
   82584:	b5f0      	push	{r4, r5, r6, r7, lr}
   82586:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   8258a:	f44f 7702 	mov.w	r7, #520	; 0x208
   8258e:	f64f 76ff 	movw	r6, #65535	; 0xffff
   82592:	b09c      	sub	sp, #112	; 0x70
   82594:	ac21      	add	r4, sp, #132	; 0x84
   82596:	f854 2b04 	ldr.w	r2, [r4], #4
   8259a:	4b0b      	ldr	r3, [pc, #44]	; (825c8 <sprintf+0x48>)
   8259c:	9102      	str	r1, [sp, #8]
   8259e:	9106      	str	r1, [sp, #24]
   825a0:	6818      	ldr	r0, [r3, #0]
   825a2:	a902      	add	r1, sp, #8
   825a4:	4623      	mov	r3, r4
   825a6:	9401      	str	r4, [sp, #4]
   825a8:	f8ad 7014 	strh.w	r7, [sp, #20]
   825ac:	9504      	str	r5, [sp, #16]
   825ae:	9507      	str	r5, [sp, #28]
   825b0:	f8ad 6016 	strh.w	r6, [sp, #22]
   825b4:	f000 f838 	bl	82628 <_svfprintf_r>
   825b8:	2200      	movs	r2, #0
   825ba:	9b02      	ldr	r3, [sp, #8]
   825bc:	701a      	strb	r2, [r3, #0]
   825be:	b01c      	add	sp, #112	; 0x70
   825c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   825c4:	b003      	add	sp, #12
   825c6:	4770      	bx	lr
   825c8:	20070134 	.word	0x20070134

000825cc <strlen>:
   825cc:	f020 0103 	bic.w	r1, r0, #3
   825d0:	f010 0003 	ands.w	r0, r0, #3
   825d4:	f1c0 0000 	rsb	r0, r0, #0
   825d8:	f851 3b04 	ldr.w	r3, [r1], #4
   825dc:	f100 0c04 	add.w	ip, r0, #4
   825e0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   825e4:	f06f 0200 	mvn.w	r2, #0
   825e8:	bf1c      	itt	ne
   825ea:	fa22 f20c 	lsrne.w	r2, r2, ip
   825ee:	4313      	orrne	r3, r2
   825f0:	f04f 0c01 	mov.w	ip, #1
   825f4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   825f8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   825fc:	eba3 020c 	sub.w	r2, r3, ip
   82600:	ea22 0203 	bic.w	r2, r2, r3
   82604:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   82608:	bf04      	itt	eq
   8260a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8260e:	3004      	addeq	r0, #4
   82610:	d0f4      	beq.n	825fc <strlen+0x30>
   82612:	f1c2 0100 	rsb	r1, r2, #0
   82616:	ea02 0201 	and.w	r2, r2, r1
   8261a:	fab2 f282 	clz	r2, r2
   8261e:	f1c2 021f 	rsb	r2, r2, #31
   82622:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   82626:	4770      	bx	lr

00082628 <_svfprintf_r>:
   82628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8262c:	b0c3      	sub	sp, #268	; 0x10c
   8262e:	460c      	mov	r4, r1
   82630:	910b      	str	r1, [sp, #44]	; 0x2c
   82632:	4692      	mov	sl, r2
   82634:	930f      	str	r3, [sp, #60]	; 0x3c
   82636:	900c      	str	r0, [sp, #48]	; 0x30
   82638:	f003 fe70 	bl	8631c <_localeconv_r>
   8263c:	6803      	ldr	r3, [r0, #0]
   8263e:	4618      	mov	r0, r3
   82640:	931a      	str	r3, [sp, #104]	; 0x68
   82642:	f7ff ffc3 	bl	825cc <strlen>
   82646:	89a3      	ldrh	r3, [r4, #12]
   82648:	9019      	str	r0, [sp, #100]	; 0x64
   8264a:	0619      	lsls	r1, r3, #24
   8264c:	d503      	bpl.n	82656 <_svfprintf_r+0x2e>
   8264e:	6923      	ldr	r3, [r4, #16]
   82650:	2b00      	cmp	r3, #0
   82652:	f001 8035 	beq.w	836c0 <_svfprintf_r+0x1098>
   82656:	2300      	movs	r3, #0
   82658:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   8265c:	46c8      	mov	r8, r9
   8265e:	9315      	str	r3, [sp, #84]	; 0x54
   82660:	9313      	str	r3, [sp, #76]	; 0x4c
   82662:	9314      	str	r3, [sp, #80]	; 0x50
   82664:	9318      	str	r3, [sp, #96]	; 0x60
   82666:	931b      	str	r3, [sp, #108]	; 0x6c
   82668:	9309      	str	r3, [sp, #36]	; 0x24
   8266a:	9316      	str	r3, [sp, #88]	; 0x58
   8266c:	9317      	str	r3, [sp, #92]	; 0x5c
   8266e:	9327      	str	r3, [sp, #156]	; 0x9c
   82670:	9326      	str	r3, [sp, #152]	; 0x98
   82672:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   82676:	f89a 3000 	ldrb.w	r3, [sl]
   8267a:	4654      	mov	r4, sl
   8267c:	b1eb      	cbz	r3, 826ba <_svfprintf_r+0x92>
   8267e:	2b25      	cmp	r3, #37	; 0x25
   82680:	d102      	bne.n	82688 <_svfprintf_r+0x60>
   82682:	e01a      	b.n	826ba <_svfprintf_r+0x92>
   82684:	2b25      	cmp	r3, #37	; 0x25
   82686:	d003      	beq.n	82690 <_svfprintf_r+0x68>
   82688:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8268c:	2b00      	cmp	r3, #0
   8268e:	d1f9      	bne.n	82684 <_svfprintf_r+0x5c>
   82690:	eba4 050a 	sub.w	r5, r4, sl
   82694:	b18d      	cbz	r5, 826ba <_svfprintf_r+0x92>
   82696:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82698:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8269a:	3301      	adds	r3, #1
   8269c:	442a      	add	r2, r5
   8269e:	2b07      	cmp	r3, #7
   826a0:	f8c8 a000 	str.w	sl, [r8]
   826a4:	f8c8 5004 	str.w	r5, [r8, #4]
   826a8:	9227      	str	r2, [sp, #156]	; 0x9c
   826aa:	9326      	str	r3, [sp, #152]	; 0x98
   826ac:	f300 808a 	bgt.w	827c4 <_svfprintf_r+0x19c>
   826b0:	f108 0808 	add.w	r8, r8, #8
   826b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   826b6:	442b      	add	r3, r5
   826b8:	9309      	str	r3, [sp, #36]	; 0x24
   826ba:	7823      	ldrb	r3, [r4, #0]
   826bc:	2b00      	cmp	r3, #0
   826be:	f000 8089 	beq.w	827d4 <_svfprintf_r+0x1ac>
   826c2:	2300      	movs	r3, #0
   826c4:	f04f 30ff 	mov.w	r0, #4294967295
   826c8:	461a      	mov	r2, r3
   826ca:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   826ce:	4619      	mov	r1, r3
   826d0:	930d      	str	r3, [sp, #52]	; 0x34
   826d2:	469b      	mov	fp, r3
   826d4:	7863      	ldrb	r3, [r4, #1]
   826d6:	f104 0a01 	add.w	sl, r4, #1
   826da:	900a      	str	r0, [sp, #40]	; 0x28
   826dc:	f10a 0a01 	add.w	sl, sl, #1
   826e0:	f1a3 0020 	sub.w	r0, r3, #32
   826e4:	2858      	cmp	r0, #88	; 0x58
   826e6:	f200 83b7 	bhi.w	82e58 <_svfprintf_r+0x830>
   826ea:	e8df f010 	tbh	[pc, r0, lsl #1]
   826ee:	034c      	.short	0x034c
   826f0:	03b503b5 	.word	0x03b503b5
   826f4:	03b50354 	.word	0x03b50354
   826f8:	03b503b5 	.word	0x03b503b5
   826fc:	03b503b5 	.word	0x03b503b5
   82700:	005903b5 	.word	0x005903b5
   82704:	03b50359 	.word	0x03b50359
   82708:	02140066 	.word	0x02140066
   8270c:	022f03b5 	.word	0x022f03b5
   82710:	03a503a5 	.word	0x03a503a5
   82714:	03a503a5 	.word	0x03a503a5
   82718:	03a503a5 	.word	0x03a503a5
   8271c:	03a503a5 	.word	0x03a503a5
   82720:	03b503a5 	.word	0x03b503a5
   82724:	03b503b5 	.word	0x03b503b5
   82728:	03b503b5 	.word	0x03b503b5
   8272c:	03b503b5 	.word	0x03b503b5
   82730:	03b503b5 	.word	0x03b503b5
   82734:	028b03b5 	.word	0x028b03b5
   82738:	03b502d3 	.word	0x03b502d3
   8273c:	03b502d3 	.word	0x03b502d3
   82740:	03b503b5 	.word	0x03b503b5
   82744:	031b03b5 	.word	0x031b03b5
   82748:	03b503b5 	.word	0x03b503b5
   8274c:	03b50320 	.word	0x03b50320
   82750:	03b503b5 	.word	0x03b503b5
   82754:	03b503b5 	.word	0x03b503b5
   82758:	03b50234 	.word	0x03b50234
   8275c:	024b03b5 	.word	0x024b03b5
   82760:	03b503b5 	.word	0x03b503b5
   82764:	03b503b5 	.word	0x03b503b5
   82768:	03b503b5 	.word	0x03b503b5
   8276c:	03b503b5 	.word	0x03b503b5
   82770:	03b503b5 	.word	0x03b503b5
   82774:	039e0276 	.word	0x039e0276
   82778:	02d302d3 	.word	0x02d302d3
   8277c:	036302d3 	.word	0x036302d3
   82780:	03b5039e 	.word	0x03b5039e
   82784:	036803b5 	.word	0x036803b5
   82788:	037503b5 	.word	0x037503b5
   8278c:	038c01dd 	.word	0x038c01dd
   82790:	03b5035e 	.word	0x03b5035e
   82794:	03b501f2 	.word	0x03b501f2
   82798:	03b50087 	.word	0x03b50087
   8279c:	033203b5 	.word	0x033203b5
   827a0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   827a2:	6823      	ldr	r3, [r4, #0]
   827a4:	4618      	mov	r0, r3
   827a6:	930d      	str	r3, [sp, #52]	; 0x34
   827a8:	4623      	mov	r3, r4
   827aa:	2800      	cmp	r0, #0
   827ac:	f103 0304 	add.w	r3, r3, #4
   827b0:	930f      	str	r3, [sp, #60]	; 0x3c
   827b2:	da04      	bge.n	827be <_svfprintf_r+0x196>
   827b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   827b6:	425b      	negs	r3, r3
   827b8:	930d      	str	r3, [sp, #52]	; 0x34
   827ba:	f04b 0b04 	orr.w	fp, fp, #4
   827be:	f89a 3000 	ldrb.w	r3, [sl]
   827c2:	e78b      	b.n	826dc <_svfprintf_r+0xb4>
   827c4:	aa25      	add	r2, sp, #148	; 0x94
   827c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   827c8:	980c      	ldr	r0, [sp, #48]	; 0x30
   827ca:	f004 ff29 	bl	87620 <__ssprint_r>
   827ce:	b940      	cbnz	r0, 827e2 <_svfprintf_r+0x1ba>
   827d0:	46c8      	mov	r8, r9
   827d2:	e76f      	b.n	826b4 <_svfprintf_r+0x8c>
   827d4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   827d6:	b123      	cbz	r3, 827e2 <_svfprintf_r+0x1ba>
   827d8:	980c      	ldr	r0, [sp, #48]	; 0x30
   827da:	aa25      	add	r2, sp, #148	; 0x94
   827dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   827de:	f004 ff1f 	bl	87620 <__ssprint_r>
   827e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   827e4:	899b      	ldrh	r3, [r3, #12]
   827e6:	f013 0f40 	tst.w	r3, #64	; 0x40
   827ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   827ec:	bf18      	it	ne
   827ee:	f04f 33ff 	movne.w	r3, #4294967295
   827f2:	9309      	str	r3, [sp, #36]	; 0x24
   827f4:	9809      	ldr	r0, [sp, #36]	; 0x24
   827f6:	b043      	add	sp, #268	; 0x10c
   827f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   827fc:	f01b 0f20 	tst.w	fp, #32
   82800:	9311      	str	r3, [sp, #68]	; 0x44
   82802:	f040 81af 	bne.w	82b64 <_svfprintf_r+0x53c>
   82806:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82808:	f01b 0f10 	tst.w	fp, #16
   8280c:	4613      	mov	r3, r2
   8280e:	f040 859a 	bne.w	83346 <_svfprintf_r+0xd1e>
   82812:	f01b 0f40 	tst.w	fp, #64	; 0x40
   82816:	f000 8596 	beq.w	83346 <_svfprintf_r+0xd1e>
   8281a:	2500      	movs	r5, #0
   8281c:	2301      	movs	r3, #1
   8281e:	8814      	ldrh	r4, [r2, #0]
   82820:	3204      	adds	r2, #4
   82822:	920f      	str	r2, [sp, #60]	; 0x3c
   82824:	2200      	movs	r2, #0
   82826:	4617      	mov	r7, r2
   82828:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   8282c:	990a      	ldr	r1, [sp, #40]	; 0x28
   8282e:	1c4a      	adds	r2, r1, #1
   82830:	f000 8210 	beq.w	82c54 <_svfprintf_r+0x62c>
   82834:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   82838:	9207      	str	r2, [sp, #28]
   8283a:	ea54 0205 	orrs.w	r2, r4, r5
   8283e:	f040 820f 	bne.w	82c60 <_svfprintf_r+0x638>
   82842:	2900      	cmp	r1, #0
   82844:	f040 8431 	bne.w	830aa <_svfprintf_r+0xa82>
   82848:	2b00      	cmp	r3, #0
   8284a:	f040 8539 	bne.w	832c0 <_svfprintf_r+0xc98>
   8284e:	f01b 0301 	ands.w	r3, fp, #1
   82852:	930e      	str	r3, [sp, #56]	; 0x38
   82854:	f000 8662 	beq.w	8351c <_svfprintf_r+0xef4>
   82858:	2330      	movs	r3, #48	; 0x30
   8285a:	ae42      	add	r6, sp, #264	; 0x108
   8285c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   82860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82862:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82864:	4293      	cmp	r3, r2
   82866:	bfb8      	it	lt
   82868:	4613      	movlt	r3, r2
   8286a:	9308      	str	r3, [sp, #32]
   8286c:	2300      	movs	r3, #0
   8286e:	9312      	str	r3, [sp, #72]	; 0x48
   82870:	b117      	cbz	r7, 82878 <_svfprintf_r+0x250>
   82872:	9b08      	ldr	r3, [sp, #32]
   82874:	3301      	adds	r3, #1
   82876:	9308      	str	r3, [sp, #32]
   82878:	9b07      	ldr	r3, [sp, #28]
   8287a:	f013 0302 	ands.w	r3, r3, #2
   8287e:	9310      	str	r3, [sp, #64]	; 0x40
   82880:	d002      	beq.n	82888 <_svfprintf_r+0x260>
   82882:	9b08      	ldr	r3, [sp, #32]
   82884:	3302      	adds	r3, #2
   82886:	9308      	str	r3, [sp, #32]
   82888:	9b07      	ldr	r3, [sp, #28]
   8288a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   8288e:	f040 8310 	bne.w	82eb2 <_svfprintf_r+0x88a>
   82892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82894:	9a08      	ldr	r2, [sp, #32]
   82896:	eba3 0b02 	sub.w	fp, r3, r2
   8289a:	f1bb 0f00 	cmp.w	fp, #0
   8289e:	f340 8308 	ble.w	82eb2 <_svfprintf_r+0x88a>
   828a2:	f1bb 0f10 	cmp.w	fp, #16
   828a6:	f340 87b2 	ble.w	8380e <_svfprintf_r+0x11e6>
   828aa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   828ac:	4643      	mov	r3, r8
   828ae:	4621      	mov	r1, r4
   828b0:	46a8      	mov	r8, r5
   828b2:	2710      	movs	r7, #16
   828b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   828b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   828b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   828ba:	e006      	b.n	828ca <_svfprintf_r+0x2a2>
   828bc:	f1ab 0b10 	sub.w	fp, fp, #16
   828c0:	f1bb 0f10 	cmp.w	fp, #16
   828c4:	f103 0308 	add.w	r3, r3, #8
   828c8:	dd18      	ble.n	828fc <_svfprintf_r+0x2d4>
   828ca:	3201      	adds	r2, #1
   828cc:	48ab      	ldr	r0, [pc, #684]	; (82b7c <_svfprintf_r+0x554>)
   828ce:	3110      	adds	r1, #16
   828d0:	2a07      	cmp	r2, #7
   828d2:	9127      	str	r1, [sp, #156]	; 0x9c
   828d4:	9226      	str	r2, [sp, #152]	; 0x98
   828d6:	e883 0081 	stmia.w	r3, {r0, r7}
   828da:	ddef      	ble.n	828bc <_svfprintf_r+0x294>
   828dc:	aa25      	add	r2, sp, #148	; 0x94
   828de:	4629      	mov	r1, r5
   828e0:	4620      	mov	r0, r4
   828e2:	f004 fe9d 	bl	87620 <__ssprint_r>
   828e6:	2800      	cmp	r0, #0
   828e8:	f47f af7b 	bne.w	827e2 <_svfprintf_r+0x1ba>
   828ec:	f1ab 0b10 	sub.w	fp, fp, #16
   828f0:	f1bb 0f10 	cmp.w	fp, #16
   828f4:	464b      	mov	r3, r9
   828f6:	9927      	ldr	r1, [sp, #156]	; 0x9c
   828f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   828fa:	dce6      	bgt.n	828ca <_svfprintf_r+0x2a2>
   828fc:	4645      	mov	r5, r8
   828fe:	460c      	mov	r4, r1
   82900:	4698      	mov	r8, r3
   82902:	3201      	adds	r2, #1
   82904:	4b9d      	ldr	r3, [pc, #628]	; (82b7c <_svfprintf_r+0x554>)
   82906:	445c      	add	r4, fp
   82908:	2a07      	cmp	r2, #7
   8290a:	9427      	str	r4, [sp, #156]	; 0x9c
   8290c:	9226      	str	r2, [sp, #152]	; 0x98
   8290e:	e888 0808 	stmia.w	r8, {r3, fp}
   82912:	f300 82c3 	bgt.w	82e9c <_svfprintf_r+0x874>
   82916:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8291a:	f108 0808 	add.w	r8, r8, #8
   8291e:	b187      	cbz	r7, 82942 <_svfprintf_r+0x31a>
   82920:	2101      	movs	r1, #1
   82922:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82924:	440c      	add	r4, r1
   82926:	440b      	add	r3, r1
   82928:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   8292c:	2b07      	cmp	r3, #7
   8292e:	9427      	str	r4, [sp, #156]	; 0x9c
   82930:	9326      	str	r3, [sp, #152]	; 0x98
   82932:	f8c8 1004 	str.w	r1, [r8, #4]
   82936:	f8c8 2000 	str.w	r2, [r8]
   8293a:	f300 83cd 	bgt.w	830d8 <_svfprintf_r+0xab0>
   8293e:	f108 0808 	add.w	r8, r8, #8
   82942:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82944:	b17b      	cbz	r3, 82966 <_svfprintf_r+0x33e>
   82946:	2102      	movs	r1, #2
   82948:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8294a:	440c      	add	r4, r1
   8294c:	3301      	adds	r3, #1
   8294e:	aa1e      	add	r2, sp, #120	; 0x78
   82950:	2b07      	cmp	r3, #7
   82952:	9427      	str	r4, [sp, #156]	; 0x9c
   82954:	9326      	str	r3, [sp, #152]	; 0x98
   82956:	f8c8 1004 	str.w	r1, [r8, #4]
   8295a:	f8c8 2000 	str.w	r2, [r8]
   8295e:	f300 8411 	bgt.w	83184 <_svfprintf_r+0xb5c>
   82962:	f108 0808 	add.w	r8, r8, #8
   82966:	2d80      	cmp	r5, #128	; 0x80
   82968:	f000 8304 	beq.w	82f74 <_svfprintf_r+0x94c>
   8296c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8296e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82970:	1a9f      	subs	r7, r3, r2
   82972:	2f00      	cmp	r7, #0
   82974:	dd37      	ble.n	829e6 <_svfprintf_r+0x3be>
   82976:	2f10      	cmp	r7, #16
   82978:	f340 8679 	ble.w	8366e <_svfprintf_r+0x1046>
   8297c:	4d80      	ldr	r5, [pc, #512]	; (82b80 <_svfprintf_r+0x558>)
   8297e:	4642      	mov	r2, r8
   82980:	4621      	mov	r1, r4
   82982:	46b0      	mov	r8, r6
   82984:	f04f 0b10 	mov.w	fp, #16
   82988:	462e      	mov	r6, r5
   8298a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8298c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8298e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82990:	e004      	b.n	8299c <_svfprintf_r+0x374>
   82992:	3f10      	subs	r7, #16
   82994:	2f10      	cmp	r7, #16
   82996:	f102 0208 	add.w	r2, r2, #8
   8299a:	dd15      	ble.n	829c8 <_svfprintf_r+0x3a0>
   8299c:	3301      	adds	r3, #1
   8299e:	3110      	adds	r1, #16
   829a0:	2b07      	cmp	r3, #7
   829a2:	9127      	str	r1, [sp, #156]	; 0x9c
   829a4:	9326      	str	r3, [sp, #152]	; 0x98
   829a6:	e882 0840 	stmia.w	r2, {r6, fp}
   829aa:	ddf2      	ble.n	82992 <_svfprintf_r+0x36a>
   829ac:	aa25      	add	r2, sp, #148	; 0x94
   829ae:	4629      	mov	r1, r5
   829b0:	4620      	mov	r0, r4
   829b2:	f004 fe35 	bl	87620 <__ssprint_r>
   829b6:	2800      	cmp	r0, #0
   829b8:	f47f af13 	bne.w	827e2 <_svfprintf_r+0x1ba>
   829bc:	3f10      	subs	r7, #16
   829be:	2f10      	cmp	r7, #16
   829c0:	464a      	mov	r2, r9
   829c2:	9927      	ldr	r1, [sp, #156]	; 0x9c
   829c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   829c6:	dce9      	bgt.n	8299c <_svfprintf_r+0x374>
   829c8:	4635      	mov	r5, r6
   829ca:	460c      	mov	r4, r1
   829cc:	4646      	mov	r6, r8
   829ce:	4690      	mov	r8, r2
   829d0:	3301      	adds	r3, #1
   829d2:	443c      	add	r4, r7
   829d4:	2b07      	cmp	r3, #7
   829d6:	9427      	str	r4, [sp, #156]	; 0x9c
   829d8:	9326      	str	r3, [sp, #152]	; 0x98
   829da:	e888 00a0 	stmia.w	r8, {r5, r7}
   829de:	f300 8370 	bgt.w	830c2 <_svfprintf_r+0xa9a>
   829e2:	f108 0808 	add.w	r8, r8, #8
   829e6:	9b07      	ldr	r3, [sp, #28]
   829e8:	05df      	lsls	r7, r3, #23
   829ea:	f100 8264 	bmi.w	82eb6 <_svfprintf_r+0x88e>
   829ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
   829f0:	990e      	ldr	r1, [sp, #56]	; 0x38
   829f2:	3301      	adds	r3, #1
   829f4:	440c      	add	r4, r1
   829f6:	2b07      	cmp	r3, #7
   829f8:	9427      	str	r4, [sp, #156]	; 0x9c
   829fa:	f8c8 6000 	str.w	r6, [r8]
   829fe:	f8c8 1004 	str.w	r1, [r8, #4]
   82a02:	9326      	str	r3, [sp, #152]	; 0x98
   82a04:	f300 83b3 	bgt.w	8316e <_svfprintf_r+0xb46>
   82a08:	f108 0808 	add.w	r8, r8, #8
   82a0c:	9b07      	ldr	r3, [sp, #28]
   82a0e:	075b      	lsls	r3, r3, #29
   82a10:	d53b      	bpl.n	82a8a <_svfprintf_r+0x462>
   82a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82a14:	9a08      	ldr	r2, [sp, #32]
   82a16:	1a9d      	subs	r5, r3, r2
   82a18:	2d00      	cmp	r5, #0
   82a1a:	dd36      	ble.n	82a8a <_svfprintf_r+0x462>
   82a1c:	2d10      	cmp	r5, #16
   82a1e:	f340 8721 	ble.w	83864 <_svfprintf_r+0x123c>
   82a22:	2610      	movs	r6, #16
   82a24:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82a26:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   82a28:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   82a2c:	e004      	b.n	82a38 <_svfprintf_r+0x410>
   82a2e:	3d10      	subs	r5, #16
   82a30:	2d10      	cmp	r5, #16
   82a32:	f108 0808 	add.w	r8, r8, #8
   82a36:	dd16      	ble.n	82a66 <_svfprintf_r+0x43e>
   82a38:	3301      	adds	r3, #1
   82a3a:	4a50      	ldr	r2, [pc, #320]	; (82b7c <_svfprintf_r+0x554>)
   82a3c:	3410      	adds	r4, #16
   82a3e:	2b07      	cmp	r3, #7
   82a40:	9427      	str	r4, [sp, #156]	; 0x9c
   82a42:	9326      	str	r3, [sp, #152]	; 0x98
   82a44:	e888 0044 	stmia.w	r8, {r2, r6}
   82a48:	ddf1      	ble.n	82a2e <_svfprintf_r+0x406>
   82a4a:	aa25      	add	r2, sp, #148	; 0x94
   82a4c:	4659      	mov	r1, fp
   82a4e:	4638      	mov	r0, r7
   82a50:	f004 fde6 	bl	87620 <__ssprint_r>
   82a54:	2800      	cmp	r0, #0
   82a56:	f47f aec4 	bne.w	827e2 <_svfprintf_r+0x1ba>
   82a5a:	3d10      	subs	r5, #16
   82a5c:	2d10      	cmp	r5, #16
   82a5e:	46c8      	mov	r8, r9
   82a60:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82a62:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82a64:	dce8      	bgt.n	82a38 <_svfprintf_r+0x410>
   82a66:	3301      	adds	r3, #1
   82a68:	4a44      	ldr	r2, [pc, #272]	; (82b7c <_svfprintf_r+0x554>)
   82a6a:	442c      	add	r4, r5
   82a6c:	2b07      	cmp	r3, #7
   82a6e:	9427      	str	r4, [sp, #156]	; 0x9c
   82a70:	9326      	str	r3, [sp, #152]	; 0x98
   82a72:	e888 0024 	stmia.w	r8, {r2, r5}
   82a76:	dd08      	ble.n	82a8a <_svfprintf_r+0x462>
   82a78:	aa25      	add	r2, sp, #148	; 0x94
   82a7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82a7c:	980c      	ldr	r0, [sp, #48]	; 0x30
   82a7e:	f004 fdcf 	bl	87620 <__ssprint_r>
   82a82:	2800      	cmp	r0, #0
   82a84:	f47f aead 	bne.w	827e2 <_svfprintf_r+0x1ba>
   82a88:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82a8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   82a8e:	9908      	ldr	r1, [sp, #32]
   82a90:	428a      	cmp	r2, r1
   82a92:	bfac      	ite	ge
   82a94:	189b      	addge	r3, r3, r2
   82a96:	185b      	addlt	r3, r3, r1
   82a98:	9309      	str	r3, [sp, #36]	; 0x24
   82a9a:	2c00      	cmp	r4, #0
   82a9c:	f040 82fb 	bne.w	83096 <_svfprintf_r+0xa6e>
   82aa0:	2300      	movs	r3, #0
   82aa2:	46c8      	mov	r8, r9
   82aa4:	9326      	str	r3, [sp, #152]	; 0x98
   82aa6:	e5e6      	b.n	82676 <_svfprintf_r+0x4e>
   82aa8:	9311      	str	r3, [sp, #68]	; 0x44
   82aaa:	f01b 0320 	ands.w	r3, fp, #32
   82aae:	f040 8145 	bne.w	82d3c <_svfprintf_r+0x714>
   82ab2:	f01b 0210 	ands.w	r2, fp, #16
   82ab6:	f040 8466 	bne.w	83386 <_svfprintf_r+0xd5e>
   82aba:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   82abe:	f000 8462 	beq.w	83386 <_svfprintf_r+0xd5e>
   82ac2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   82ac4:	4613      	mov	r3, r2
   82ac6:	460a      	mov	r2, r1
   82ac8:	3204      	adds	r2, #4
   82aca:	880c      	ldrh	r4, [r1, #0]
   82acc:	2500      	movs	r5, #0
   82ace:	920f      	str	r2, [sp, #60]	; 0x3c
   82ad0:	e6a8      	b.n	82824 <_svfprintf_r+0x1fc>
   82ad2:	2500      	movs	r5, #0
   82ad4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82ad6:	9311      	str	r3, [sp, #68]	; 0x44
   82ad8:	6816      	ldr	r6, [r2, #0]
   82ada:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   82ade:	1d14      	adds	r4, r2, #4
   82ae0:	2e00      	cmp	r6, #0
   82ae2:	f000 86cd 	beq.w	83880 <_svfprintf_r+0x1258>
   82ae6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   82ae8:	1c53      	adds	r3, r2, #1
   82aea:	f000 861b 	beq.w	83724 <_svfprintf_r+0x10fc>
   82aee:	4629      	mov	r1, r5
   82af0:	4630      	mov	r0, r6
   82af2:	f003 ff61 	bl	869b8 <memchr>
   82af6:	2800      	cmp	r0, #0
   82af8:	f000 870d 	beq.w	83916 <_svfprintf_r+0x12ee>
   82afc:	1b83      	subs	r3, r0, r6
   82afe:	950a      	str	r5, [sp, #40]	; 0x28
   82b00:	930e      	str	r3, [sp, #56]	; 0x38
   82b02:	940f      	str	r4, [sp, #60]	; 0x3c
   82b04:	f8cd b01c 	str.w	fp, [sp, #28]
   82b08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   82b0c:	9308      	str	r3, [sp, #32]
   82b0e:	9512      	str	r5, [sp, #72]	; 0x48
   82b10:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82b14:	e6ac      	b.n	82870 <_svfprintf_r+0x248>
   82b16:	f89a 3000 	ldrb.w	r3, [sl]
   82b1a:	f10a 0401 	add.w	r4, sl, #1
   82b1e:	2b2a      	cmp	r3, #42	; 0x2a
   82b20:	f000 87c2 	beq.w	83aa8 <_svfprintf_r+0x1480>
   82b24:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82b28:	2809      	cmp	r0, #9
   82b2a:	46a2      	mov	sl, r4
   82b2c:	f200 8718 	bhi.w	83960 <_svfprintf_r+0x1338>
   82b30:	2300      	movs	r3, #0
   82b32:	461c      	mov	r4, r3
   82b34:	f81a 3b01 	ldrb.w	r3, [sl], #1
   82b38:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82b3c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   82b40:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82b44:	2809      	cmp	r0, #9
   82b46:	d9f5      	bls.n	82b34 <_svfprintf_r+0x50c>
   82b48:	940a      	str	r4, [sp, #40]	; 0x28
   82b4a:	e5c9      	b.n	826e0 <_svfprintf_r+0xb8>
   82b4c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   82b50:	f89a 3000 	ldrb.w	r3, [sl]
   82b54:	e5c2      	b.n	826dc <_svfprintf_r+0xb4>
   82b56:	f04b 0b10 	orr.w	fp, fp, #16
   82b5a:	f01b 0f20 	tst.w	fp, #32
   82b5e:	9311      	str	r3, [sp, #68]	; 0x44
   82b60:	f43f ae51 	beq.w	82806 <_svfprintf_r+0x1de>
   82b64:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82b66:	3407      	adds	r4, #7
   82b68:	f024 0307 	bic.w	r3, r4, #7
   82b6c:	f103 0208 	add.w	r2, r3, #8
   82b70:	e9d3 4500 	ldrd	r4, r5, [r3]
   82b74:	920f      	str	r2, [sp, #60]	; 0x3c
   82b76:	2301      	movs	r3, #1
   82b78:	e654      	b.n	82824 <_svfprintf_r+0x1fc>
   82b7a:	bf00      	nop
   82b7c:	00088a84 	.word	0x00088a84
   82b80:	00088a94 	.word	0x00088a94
   82b84:	9311      	str	r3, [sp, #68]	; 0x44
   82b86:	2a00      	cmp	r2, #0
   82b88:	f040 87ad 	bne.w	83ae6 <_svfprintf_r+0x14be>
   82b8c:	4bbe      	ldr	r3, [pc, #760]	; (82e88 <_svfprintf_r+0x860>)
   82b8e:	f01b 0f20 	tst.w	fp, #32
   82b92:	9318      	str	r3, [sp, #96]	; 0x60
   82b94:	f040 80e7 	bne.w	82d66 <_svfprintf_r+0x73e>
   82b98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82b9a:	f01b 0f10 	tst.w	fp, #16
   82b9e:	4613      	mov	r3, r2
   82ba0:	f040 83d8 	bne.w	83354 <_svfprintf_r+0xd2c>
   82ba4:	f01b 0f40 	tst.w	fp, #64	; 0x40
   82ba8:	f000 83d4 	beq.w	83354 <_svfprintf_r+0xd2c>
   82bac:	2500      	movs	r5, #0
   82bae:	3304      	adds	r3, #4
   82bb0:	8814      	ldrh	r4, [r2, #0]
   82bb2:	930f      	str	r3, [sp, #60]	; 0x3c
   82bb4:	f01b 0f01 	tst.w	fp, #1
   82bb8:	f000 80e3 	beq.w	82d82 <_svfprintf_r+0x75a>
   82bbc:	ea54 0305 	orrs.w	r3, r4, r5
   82bc0:	f000 80df 	beq.w	82d82 <_svfprintf_r+0x75a>
   82bc4:	2330      	movs	r3, #48	; 0x30
   82bc6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   82bca:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   82bce:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   82bd2:	f04b 0b02 	orr.w	fp, fp, #2
   82bd6:	2302      	movs	r3, #2
   82bd8:	e624      	b.n	82824 <_svfprintf_r+0x1fc>
   82bda:	2201      	movs	r2, #1
   82bdc:	9311      	str	r3, [sp, #68]	; 0x44
   82bde:	2300      	movs	r3, #0
   82be0:	4611      	mov	r1, r2
   82be2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   82be4:	9208      	str	r2, [sp, #32]
   82be6:	6802      	ldr	r2, [r0, #0]
   82be8:	461f      	mov	r7, r3
   82bea:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   82bee:	930a      	str	r3, [sp, #40]	; 0x28
   82bf0:	9312      	str	r3, [sp, #72]	; 0x48
   82bf2:	1d03      	adds	r3, r0, #4
   82bf4:	f8cd b01c 	str.w	fp, [sp, #28]
   82bf8:	910e      	str	r1, [sp, #56]	; 0x38
   82bfa:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   82bfe:	930f      	str	r3, [sp, #60]	; 0x3c
   82c00:	ae28      	add	r6, sp, #160	; 0xa0
   82c02:	e639      	b.n	82878 <_svfprintf_r+0x250>
   82c04:	9311      	str	r3, [sp, #68]	; 0x44
   82c06:	2a00      	cmp	r2, #0
   82c08:	f040 8784 	bne.w	83b14 <_svfprintf_r+0x14ec>
   82c0c:	f04b 0b10 	orr.w	fp, fp, #16
   82c10:	f01b 0f20 	tst.w	fp, #32
   82c14:	f040 8475 	bne.w	83502 <_svfprintf_r+0xeda>
   82c18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82c1a:	f01b 0f10 	tst.w	fp, #16
   82c1e:	4613      	mov	r3, r2
   82c20:	f040 839d 	bne.w	8335e <_svfprintf_r+0xd36>
   82c24:	f01b 0f40 	tst.w	fp, #64	; 0x40
   82c28:	f000 8399 	beq.w	8335e <_svfprintf_r+0xd36>
   82c2c:	f9b2 4000 	ldrsh.w	r4, [r2]
   82c30:	3304      	adds	r3, #4
   82c32:	17e5      	asrs	r5, r4, #31
   82c34:	930f      	str	r3, [sp, #60]	; 0x3c
   82c36:	4622      	mov	r2, r4
   82c38:	462b      	mov	r3, r5
   82c3a:	2a00      	cmp	r2, #0
   82c3c:	f173 0300 	sbcs.w	r3, r3, #0
   82c40:	f2c0 8398 	blt.w	83374 <_svfprintf_r+0xd4c>
   82c44:	990a      	ldr	r1, [sp, #40]	; 0x28
   82c46:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82c4a:	1c4a      	adds	r2, r1, #1
   82c4c:	f04f 0301 	mov.w	r3, #1
   82c50:	f47f adf0 	bne.w	82834 <_svfprintf_r+0x20c>
   82c54:	ea54 0205 	orrs.w	r2, r4, r5
   82c58:	f000 8229 	beq.w	830ae <_svfprintf_r+0xa86>
   82c5c:	f8cd b01c 	str.w	fp, [sp, #28]
   82c60:	2b01      	cmp	r3, #1
   82c62:	f000 830e 	beq.w	83282 <_svfprintf_r+0xc5a>
   82c66:	2b02      	cmp	r3, #2
   82c68:	f040 829c 	bne.w	831a4 <_svfprintf_r+0xb7c>
   82c6c:	464e      	mov	r6, r9
   82c6e:	9818      	ldr	r0, [sp, #96]	; 0x60
   82c70:	0923      	lsrs	r3, r4, #4
   82c72:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   82c76:	0929      	lsrs	r1, r5, #4
   82c78:	f004 020f 	and.w	r2, r4, #15
   82c7c:	460d      	mov	r5, r1
   82c7e:	461c      	mov	r4, r3
   82c80:	5c83      	ldrb	r3, [r0, r2]
   82c82:	f806 3d01 	strb.w	r3, [r6, #-1]!
   82c86:	ea54 0305 	orrs.w	r3, r4, r5
   82c8a:	d1f1      	bne.n	82c70 <_svfprintf_r+0x648>
   82c8c:	eba9 0306 	sub.w	r3, r9, r6
   82c90:	930e      	str	r3, [sp, #56]	; 0x38
   82c92:	e5e5      	b.n	82860 <_svfprintf_r+0x238>
   82c94:	9311      	str	r3, [sp, #68]	; 0x44
   82c96:	2a00      	cmp	r2, #0
   82c98:	f040 8738 	bne.w	83b0c <_svfprintf_r+0x14e4>
   82c9c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82c9e:	f01b 0f08 	tst.w	fp, #8
   82ca2:	f104 0407 	add.w	r4, r4, #7
   82ca6:	f000 84cf 	beq.w	83648 <_svfprintf_r+0x1020>
   82caa:	f024 0307 	bic.w	r3, r4, #7
   82cae:	f103 0208 	add.w	r2, r3, #8
   82cb2:	920f      	str	r2, [sp, #60]	; 0x3c
   82cb4:	681a      	ldr	r2, [r3, #0]
   82cb6:	685b      	ldr	r3, [r3, #4]
   82cb8:	9215      	str	r2, [sp, #84]	; 0x54
   82cba:	9314      	str	r3, [sp, #80]	; 0x50
   82cbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82cbe:	9d15      	ldr	r5, [sp, #84]	; 0x54
   82cc0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   82cc4:	4628      	mov	r0, r5
   82cc6:	4621      	mov	r1, r4
   82cc8:	f04f 32ff 	mov.w	r2, #4294967295
   82ccc:	4b6f      	ldr	r3, [pc, #444]	; (82e8c <_svfprintf_r+0x864>)
   82cce:	f005 fb1b 	bl	88308 <__aeabi_dcmpun>
   82cd2:	2800      	cmp	r0, #0
   82cd4:	f040 8434 	bne.w	83540 <_svfprintf_r+0xf18>
   82cd8:	4628      	mov	r0, r5
   82cda:	4621      	mov	r1, r4
   82cdc:	f04f 32ff 	mov.w	r2, #4294967295
   82ce0:	4b6a      	ldr	r3, [pc, #424]	; (82e8c <_svfprintf_r+0x864>)
   82ce2:	f005 faf3 	bl	882cc <__aeabi_dcmple>
   82ce6:	2800      	cmp	r0, #0
   82ce8:	f040 842a 	bne.w	83540 <_svfprintf_r+0xf18>
   82cec:	a815      	add	r0, sp, #84	; 0x54
   82cee:	c80d      	ldmia	r0, {r0, r2, r3}
   82cf0:	9914      	ldr	r1, [sp, #80]	; 0x50
   82cf2:	f005 fae1 	bl	882b8 <__aeabi_dcmplt>
   82cf6:	2800      	cmp	r0, #0
   82cf8:	f040 85d4 	bne.w	838a4 <_svfprintf_r+0x127c>
   82cfc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82d00:	2303      	movs	r3, #3
   82d02:	461a      	mov	r2, r3
   82d04:	9308      	str	r3, [sp, #32]
   82d06:	2300      	movs	r3, #0
   82d08:	4e61      	ldr	r6, [pc, #388]	; (82e90 <_svfprintf_r+0x868>)
   82d0a:	4619      	mov	r1, r3
   82d0c:	930a      	str	r3, [sp, #40]	; 0x28
   82d0e:	4b61      	ldr	r3, [pc, #388]	; (82e94 <_svfprintf_r+0x86c>)
   82d10:	920e      	str	r2, [sp, #56]	; 0x38
   82d12:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82d14:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   82d18:	9007      	str	r0, [sp, #28]
   82d1a:	9112      	str	r1, [sp, #72]	; 0x48
   82d1c:	2a47      	cmp	r2, #71	; 0x47
   82d1e:	bfd8      	it	le
   82d20:	461e      	movle	r6, r3
   82d22:	e5a5      	b.n	82870 <_svfprintf_r+0x248>
   82d24:	f04b 0b08 	orr.w	fp, fp, #8
   82d28:	f89a 3000 	ldrb.w	r3, [sl]
   82d2c:	e4d6      	b.n	826dc <_svfprintf_r+0xb4>
   82d2e:	f04b 0b10 	orr.w	fp, fp, #16
   82d32:	9311      	str	r3, [sp, #68]	; 0x44
   82d34:	f01b 0320 	ands.w	r3, fp, #32
   82d38:	f43f aebb 	beq.w	82ab2 <_svfprintf_r+0x48a>
   82d3c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82d3e:	3407      	adds	r4, #7
   82d40:	f024 0307 	bic.w	r3, r4, #7
   82d44:	f103 0208 	add.w	r2, r3, #8
   82d48:	e9d3 4500 	ldrd	r4, r5, [r3]
   82d4c:	920f      	str	r2, [sp, #60]	; 0x3c
   82d4e:	2300      	movs	r3, #0
   82d50:	e568      	b.n	82824 <_svfprintf_r+0x1fc>
   82d52:	9311      	str	r3, [sp, #68]	; 0x44
   82d54:	2a00      	cmp	r2, #0
   82d56:	f040 86c2 	bne.w	83ade <_svfprintf_r+0x14b6>
   82d5a:	4b4f      	ldr	r3, [pc, #316]	; (82e98 <_svfprintf_r+0x870>)
   82d5c:	f01b 0f20 	tst.w	fp, #32
   82d60:	9318      	str	r3, [sp, #96]	; 0x60
   82d62:	f43f af19 	beq.w	82b98 <_svfprintf_r+0x570>
   82d66:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82d68:	f01b 0f01 	tst.w	fp, #1
   82d6c:	f104 0407 	add.w	r4, r4, #7
   82d70:	f024 0307 	bic.w	r3, r4, #7
   82d74:	f103 0208 	add.w	r2, r3, #8
   82d78:	920f      	str	r2, [sp, #60]	; 0x3c
   82d7a:	e9d3 4500 	ldrd	r4, r5, [r3]
   82d7e:	f47f af1d 	bne.w	82bbc <_svfprintf_r+0x594>
   82d82:	2302      	movs	r3, #2
   82d84:	e54e      	b.n	82824 <_svfprintf_r+0x1fc>
   82d86:	f89a 3000 	ldrb.w	r3, [sl]
   82d8a:	2900      	cmp	r1, #0
   82d8c:	f47f aca6 	bne.w	826dc <_svfprintf_r+0xb4>
   82d90:	2201      	movs	r2, #1
   82d92:	2120      	movs	r1, #32
   82d94:	e4a2      	b.n	826dc <_svfprintf_r+0xb4>
   82d96:	f04b 0b01 	orr.w	fp, fp, #1
   82d9a:	f89a 3000 	ldrb.w	r3, [sl]
   82d9e:	e49d      	b.n	826dc <_svfprintf_r+0xb4>
   82da0:	f89a 3000 	ldrb.w	r3, [sl]
   82da4:	2201      	movs	r2, #1
   82da6:	212b      	movs	r1, #43	; 0x2b
   82da8:	e498      	b.n	826dc <_svfprintf_r+0xb4>
   82daa:	f04b 0b20 	orr.w	fp, fp, #32
   82dae:	f89a 3000 	ldrb.w	r3, [sl]
   82db2:	e493      	b.n	826dc <_svfprintf_r+0xb4>
   82db4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   82db8:	f89a 3000 	ldrb.w	r3, [sl]
   82dbc:	e48e      	b.n	826dc <_svfprintf_r+0xb4>
   82dbe:	f89a 3000 	ldrb.w	r3, [sl]
   82dc2:	2b6c      	cmp	r3, #108	; 0x6c
   82dc4:	bf03      	ittte	eq
   82dc6:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   82dca:	f04b 0b20 	orreq.w	fp, fp, #32
   82dce:	f10a 0a01 	addeq.w	sl, sl, #1
   82dd2:	f04b 0b10 	orrne.w	fp, fp, #16
   82dd6:	e481      	b.n	826dc <_svfprintf_r+0xb4>
   82dd8:	2a00      	cmp	r2, #0
   82dda:	f040 867c 	bne.w	83ad6 <_svfprintf_r+0x14ae>
   82dde:	f01b 0f20 	tst.w	fp, #32
   82de2:	f040 8452 	bne.w	8368a <_svfprintf_r+0x1062>
   82de6:	f01b 0f10 	tst.w	fp, #16
   82dea:	f040 8438 	bne.w	8365e <_svfprintf_r+0x1036>
   82dee:	f01b 0f40 	tst.w	fp, #64	; 0x40
   82df2:	f000 8434 	beq.w	8365e <_svfprintf_r+0x1036>
   82df6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82df8:	6813      	ldr	r3, [r2, #0]
   82dfa:	3204      	adds	r2, #4
   82dfc:	920f      	str	r2, [sp, #60]	; 0x3c
   82dfe:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   82e02:	801a      	strh	r2, [r3, #0]
   82e04:	e437      	b.n	82676 <_svfprintf_r+0x4e>
   82e06:	2378      	movs	r3, #120	; 0x78
   82e08:	2230      	movs	r2, #48	; 0x30
   82e0a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   82e0c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   82e10:	9311      	str	r3, [sp, #68]	; 0x44
   82e12:	1d03      	adds	r3, r0, #4
   82e14:	930f      	str	r3, [sp, #60]	; 0x3c
   82e16:	4b20      	ldr	r3, [pc, #128]	; (82e98 <_svfprintf_r+0x870>)
   82e18:	6804      	ldr	r4, [r0, #0]
   82e1a:	9318      	str	r3, [sp, #96]	; 0x60
   82e1c:	f04b 0b02 	orr.w	fp, fp, #2
   82e20:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   82e24:	2500      	movs	r5, #0
   82e26:	2302      	movs	r3, #2
   82e28:	e4fc      	b.n	82824 <_svfprintf_r+0x1fc>
   82e2a:	9311      	str	r3, [sp, #68]	; 0x44
   82e2c:	2a00      	cmp	r2, #0
   82e2e:	f43f aeef 	beq.w	82c10 <_svfprintf_r+0x5e8>
   82e32:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   82e36:	e6eb      	b.n	82c10 <_svfprintf_r+0x5e8>
   82e38:	2000      	movs	r0, #0
   82e3a:	4604      	mov	r4, r0
   82e3c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82e40:	f81a 3b01 	ldrb.w	r3, [sl], #1
   82e44:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82e48:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   82e4c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82e50:	2809      	cmp	r0, #9
   82e52:	d9f5      	bls.n	82e40 <_svfprintf_r+0x818>
   82e54:	940d      	str	r4, [sp, #52]	; 0x34
   82e56:	e443      	b.n	826e0 <_svfprintf_r+0xb8>
   82e58:	9311      	str	r3, [sp, #68]	; 0x44
   82e5a:	2a00      	cmp	r2, #0
   82e5c:	f040 864a 	bne.w	83af4 <_svfprintf_r+0x14cc>
   82e60:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82e62:	2a00      	cmp	r2, #0
   82e64:	f43f acb6 	beq.w	827d4 <_svfprintf_r+0x1ac>
   82e68:	2300      	movs	r3, #0
   82e6a:	2101      	movs	r1, #1
   82e6c:	461f      	mov	r7, r3
   82e6e:	9108      	str	r1, [sp, #32]
   82e70:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   82e74:	f8cd b01c 	str.w	fp, [sp, #28]
   82e78:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   82e7c:	930a      	str	r3, [sp, #40]	; 0x28
   82e7e:	9312      	str	r3, [sp, #72]	; 0x48
   82e80:	910e      	str	r1, [sp, #56]	; 0x38
   82e82:	ae28      	add	r6, sp, #160	; 0xa0
   82e84:	e4f8      	b.n	82878 <_svfprintf_r+0x250>
   82e86:	bf00      	nop
   82e88:	00088a50 	.word	0x00088a50
   82e8c:	7fefffff 	.word	0x7fefffff
   82e90:	00088a44 	.word	0x00088a44
   82e94:	00088a40 	.word	0x00088a40
   82e98:	00088a64 	.word	0x00088a64
   82e9c:	aa25      	add	r2, sp, #148	; 0x94
   82e9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82ea0:	980c      	ldr	r0, [sp, #48]	; 0x30
   82ea2:	f004 fbbd 	bl	87620 <__ssprint_r>
   82ea6:	2800      	cmp	r0, #0
   82ea8:	f47f ac9b 	bne.w	827e2 <_svfprintf_r+0x1ba>
   82eac:	46c8      	mov	r8, r9
   82eae:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82eb2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82eb4:	e533      	b.n	8291e <_svfprintf_r+0x2f6>
   82eb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82eb8:	2b65      	cmp	r3, #101	; 0x65
   82eba:	f340 809a 	ble.w	82ff2 <_svfprintf_r+0x9ca>
   82ebe:	a815      	add	r0, sp, #84	; 0x54
   82ec0:	c80d      	ldmia	r0, {r0, r2, r3}
   82ec2:	9914      	ldr	r1, [sp, #80]	; 0x50
   82ec4:	f005 f9ee 	bl	882a4 <__aeabi_dcmpeq>
   82ec8:	2800      	cmp	r0, #0
   82eca:	f000 8193 	beq.w	831f4 <_svfprintf_r+0xbcc>
   82ece:	2101      	movs	r1, #1
   82ed0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82ed2:	4ab5      	ldr	r2, [pc, #724]	; (831a8 <_svfprintf_r+0xb80>)
   82ed4:	440b      	add	r3, r1
   82ed6:	440c      	add	r4, r1
   82ed8:	2b07      	cmp	r3, #7
   82eda:	9427      	str	r4, [sp, #156]	; 0x9c
   82edc:	9326      	str	r3, [sp, #152]	; 0x98
   82ede:	f8c8 1004 	str.w	r1, [r8, #4]
   82ee2:	f8c8 2000 	str.w	r2, [r8]
   82ee6:	f300 83c6 	bgt.w	83676 <_svfprintf_r+0x104e>
   82eea:	f108 0808 	add.w	r8, r8, #8
   82eee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   82ef0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   82ef2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82ef4:	4293      	cmp	r3, r2
   82ef6:	db03      	blt.n	82f00 <_svfprintf_r+0x8d8>
   82ef8:	9b07      	ldr	r3, [sp, #28]
   82efa:	07dd      	lsls	r5, r3, #31
   82efc:	f57f ad86 	bpl.w	82a0c <_svfprintf_r+0x3e4>
   82f00:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82f02:	9919      	ldr	r1, [sp, #100]	; 0x64
   82f04:	3301      	adds	r3, #1
   82f06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   82f08:	440c      	add	r4, r1
   82f0a:	2b07      	cmp	r3, #7
   82f0c:	f8c8 2000 	str.w	r2, [r8]
   82f10:	f8c8 1004 	str.w	r1, [r8, #4]
   82f14:	9427      	str	r4, [sp, #156]	; 0x9c
   82f16:	9326      	str	r3, [sp, #152]	; 0x98
   82f18:	f300 83c4 	bgt.w	836a4 <_svfprintf_r+0x107c>
   82f1c:	f108 0808 	add.w	r8, r8, #8
   82f20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82f22:	1e5e      	subs	r6, r3, #1
   82f24:	2e00      	cmp	r6, #0
   82f26:	f77f ad71 	ble.w	82a0c <_svfprintf_r+0x3e4>
   82f2a:	2e10      	cmp	r6, #16
   82f2c:	f340 8575 	ble.w	83a1a <_svfprintf_r+0x13f2>
   82f30:	4622      	mov	r2, r4
   82f32:	2710      	movs	r7, #16
   82f34:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82f36:	4d9d      	ldr	r5, [pc, #628]	; (831ac <_svfprintf_r+0xb84>)
   82f38:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   82f3c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   82f3e:	e005      	b.n	82f4c <_svfprintf_r+0x924>
   82f40:	f108 0808 	add.w	r8, r8, #8
   82f44:	3e10      	subs	r6, #16
   82f46:	2e10      	cmp	r6, #16
   82f48:	f340 8225 	ble.w	83396 <_svfprintf_r+0xd6e>
   82f4c:	3301      	adds	r3, #1
   82f4e:	3210      	adds	r2, #16
   82f50:	2b07      	cmp	r3, #7
   82f52:	9227      	str	r2, [sp, #156]	; 0x9c
   82f54:	9326      	str	r3, [sp, #152]	; 0x98
   82f56:	e888 00a0 	stmia.w	r8, {r5, r7}
   82f5a:	ddf1      	ble.n	82f40 <_svfprintf_r+0x918>
   82f5c:	aa25      	add	r2, sp, #148	; 0x94
   82f5e:	4621      	mov	r1, r4
   82f60:	4658      	mov	r0, fp
   82f62:	f004 fb5d 	bl	87620 <__ssprint_r>
   82f66:	2800      	cmp	r0, #0
   82f68:	f47f ac3b 	bne.w	827e2 <_svfprintf_r+0x1ba>
   82f6c:	46c8      	mov	r8, r9
   82f6e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   82f70:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82f72:	e7e7      	b.n	82f44 <_svfprintf_r+0x91c>
   82f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82f76:	9a08      	ldr	r2, [sp, #32]
   82f78:	1a9f      	subs	r7, r3, r2
   82f7a:	2f00      	cmp	r7, #0
   82f7c:	f77f acf6 	ble.w	8296c <_svfprintf_r+0x344>
   82f80:	2f10      	cmp	r7, #16
   82f82:	f340 84a8 	ble.w	838d6 <_svfprintf_r+0x12ae>
   82f86:	4d89      	ldr	r5, [pc, #548]	; (831ac <_svfprintf_r+0xb84>)
   82f88:	4642      	mov	r2, r8
   82f8a:	4621      	mov	r1, r4
   82f8c:	46b0      	mov	r8, r6
   82f8e:	f04f 0b10 	mov.w	fp, #16
   82f92:	462e      	mov	r6, r5
   82f94:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82f96:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82f98:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82f9a:	e004      	b.n	82fa6 <_svfprintf_r+0x97e>
   82f9c:	3f10      	subs	r7, #16
   82f9e:	2f10      	cmp	r7, #16
   82fa0:	f102 0208 	add.w	r2, r2, #8
   82fa4:	dd15      	ble.n	82fd2 <_svfprintf_r+0x9aa>
   82fa6:	3301      	adds	r3, #1
   82fa8:	3110      	adds	r1, #16
   82faa:	2b07      	cmp	r3, #7
   82fac:	9127      	str	r1, [sp, #156]	; 0x9c
   82fae:	9326      	str	r3, [sp, #152]	; 0x98
   82fb0:	e882 0840 	stmia.w	r2, {r6, fp}
   82fb4:	ddf2      	ble.n	82f9c <_svfprintf_r+0x974>
   82fb6:	aa25      	add	r2, sp, #148	; 0x94
   82fb8:	4629      	mov	r1, r5
   82fba:	4620      	mov	r0, r4
   82fbc:	f004 fb30 	bl	87620 <__ssprint_r>
   82fc0:	2800      	cmp	r0, #0
   82fc2:	f47f ac0e 	bne.w	827e2 <_svfprintf_r+0x1ba>
   82fc6:	3f10      	subs	r7, #16
   82fc8:	2f10      	cmp	r7, #16
   82fca:	464a      	mov	r2, r9
   82fcc:	9927      	ldr	r1, [sp, #156]	; 0x9c
   82fce:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82fd0:	dce9      	bgt.n	82fa6 <_svfprintf_r+0x97e>
   82fd2:	4635      	mov	r5, r6
   82fd4:	460c      	mov	r4, r1
   82fd6:	4646      	mov	r6, r8
   82fd8:	4690      	mov	r8, r2
   82fda:	3301      	adds	r3, #1
   82fdc:	443c      	add	r4, r7
   82fde:	2b07      	cmp	r3, #7
   82fe0:	9427      	str	r4, [sp, #156]	; 0x9c
   82fe2:	9326      	str	r3, [sp, #152]	; 0x98
   82fe4:	e888 00a0 	stmia.w	r8, {r5, r7}
   82fe8:	f300 829e 	bgt.w	83528 <_svfprintf_r+0xf00>
   82fec:	f108 0808 	add.w	r8, r8, #8
   82ff0:	e4bc      	b.n	8296c <_svfprintf_r+0x344>
   82ff2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82ff4:	2b01      	cmp	r3, #1
   82ff6:	f340 824f 	ble.w	83498 <_svfprintf_r+0xe70>
   82ffa:	2301      	movs	r3, #1
   82ffc:	9f26      	ldr	r7, [sp, #152]	; 0x98
   82ffe:	441c      	add	r4, r3
   83000:	441f      	add	r7, r3
   83002:	2f07      	cmp	r7, #7
   83004:	9427      	str	r4, [sp, #156]	; 0x9c
   83006:	f8c8 6000 	str.w	r6, [r8]
   8300a:	9726      	str	r7, [sp, #152]	; 0x98
   8300c:	f8c8 3004 	str.w	r3, [r8, #4]
   83010:	f300 825f 	bgt.w	834d2 <_svfprintf_r+0xeaa>
   83014:	f108 0808 	add.w	r8, r8, #8
   83018:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8301a:	3701      	adds	r7, #1
   8301c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   8301e:	4414      	add	r4, r2
   83020:	2f07      	cmp	r7, #7
   83022:	9427      	str	r4, [sp, #156]	; 0x9c
   83024:	9726      	str	r7, [sp, #152]	; 0x98
   83026:	f8c8 3000 	str.w	r3, [r8]
   8302a:	f8c8 2004 	str.w	r2, [r8, #4]
   8302e:	f300 825c 	bgt.w	834ea <_svfprintf_r+0xec2>
   83032:	f108 0808 	add.w	r8, r8, #8
   83036:	a815      	add	r0, sp, #84	; 0x54
   83038:	c80d      	ldmia	r0, {r0, r2, r3}
   8303a:	9914      	ldr	r1, [sp, #80]	; 0x50
   8303c:	f005 f932 	bl	882a4 <__aeabi_dcmpeq>
   83040:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   83042:	2800      	cmp	r0, #0
   83044:	f040 8141 	bne.w	832ca <_svfprintf_r+0xca2>
   83048:	3b01      	subs	r3, #1
   8304a:	3701      	adds	r7, #1
   8304c:	3601      	adds	r6, #1
   8304e:	441c      	add	r4, r3
   83050:	2f07      	cmp	r7, #7
   83052:	f8c8 6000 	str.w	r6, [r8]
   83056:	9726      	str	r7, [sp, #152]	; 0x98
   83058:	9427      	str	r4, [sp, #156]	; 0x9c
   8305a:	f8c8 3004 	str.w	r3, [r8, #4]
   8305e:	f300 8166 	bgt.w	8332e <_svfprintf_r+0xd06>
   83062:	f108 0808 	add.w	r8, r8, #8
   83066:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   83068:	3701      	adds	r7, #1
   8306a:	4414      	add	r4, r2
   8306c:	ab21      	add	r3, sp, #132	; 0x84
   8306e:	2f07      	cmp	r7, #7
   83070:	9427      	str	r4, [sp, #156]	; 0x9c
   83072:	9726      	str	r7, [sp, #152]	; 0x98
   83074:	f8c8 2004 	str.w	r2, [r8, #4]
   83078:	f8c8 3000 	str.w	r3, [r8]
   8307c:	f77f acc4 	ble.w	82a08 <_svfprintf_r+0x3e0>
   83080:	aa25      	add	r2, sp, #148	; 0x94
   83082:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83084:	980c      	ldr	r0, [sp, #48]	; 0x30
   83086:	f004 facb 	bl	87620 <__ssprint_r>
   8308a:	2800      	cmp	r0, #0
   8308c:	f47f aba9 	bne.w	827e2 <_svfprintf_r+0x1ba>
   83090:	46c8      	mov	r8, r9
   83092:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83094:	e4ba      	b.n	82a0c <_svfprintf_r+0x3e4>
   83096:	aa25      	add	r2, sp, #148	; 0x94
   83098:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8309a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8309c:	f004 fac0 	bl	87620 <__ssprint_r>
   830a0:	2800      	cmp	r0, #0
   830a2:	f43f acfd 	beq.w	82aa0 <_svfprintf_r+0x478>
   830a6:	f7ff bb9c 	b.w	827e2 <_svfprintf_r+0x1ba>
   830aa:	f8dd b01c 	ldr.w	fp, [sp, #28]
   830ae:	2b01      	cmp	r3, #1
   830b0:	f000 817e 	beq.w	833b0 <_svfprintf_r+0xd88>
   830b4:	2b02      	cmp	r3, #2
   830b6:	d171      	bne.n	8319c <_svfprintf_r+0xb74>
   830b8:	f8cd b01c 	str.w	fp, [sp, #28]
   830bc:	2400      	movs	r4, #0
   830be:	2500      	movs	r5, #0
   830c0:	e5d4      	b.n	82c6c <_svfprintf_r+0x644>
   830c2:	aa25      	add	r2, sp, #148	; 0x94
   830c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   830c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   830c8:	f004 faaa 	bl	87620 <__ssprint_r>
   830cc:	2800      	cmp	r0, #0
   830ce:	f47f ab88 	bne.w	827e2 <_svfprintf_r+0x1ba>
   830d2:	46c8      	mov	r8, r9
   830d4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   830d6:	e486      	b.n	829e6 <_svfprintf_r+0x3be>
   830d8:	aa25      	add	r2, sp, #148	; 0x94
   830da:	990b      	ldr	r1, [sp, #44]	; 0x2c
   830dc:	980c      	ldr	r0, [sp, #48]	; 0x30
   830de:	f004 fa9f 	bl	87620 <__ssprint_r>
   830e2:	2800      	cmp	r0, #0
   830e4:	f47f ab7d 	bne.w	827e2 <_svfprintf_r+0x1ba>
   830e8:	46c8      	mov	r8, r9
   830ea:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   830ec:	e429      	b.n	82942 <_svfprintf_r+0x31a>
   830ee:	2001      	movs	r0, #1
   830f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   830f2:	4a2d      	ldr	r2, [pc, #180]	; (831a8 <_svfprintf_r+0xb80>)
   830f4:	4403      	add	r3, r0
   830f6:	4404      	add	r4, r0
   830f8:	2b07      	cmp	r3, #7
   830fa:	9427      	str	r4, [sp, #156]	; 0x9c
   830fc:	9326      	str	r3, [sp, #152]	; 0x98
   830fe:	f8c8 0004 	str.w	r0, [r8, #4]
   83102:	f8c8 2000 	str.w	r2, [r8]
   83106:	f340 82d8 	ble.w	836ba <_svfprintf_r+0x1092>
   8310a:	aa25      	add	r2, sp, #148	; 0x94
   8310c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8310e:	980c      	ldr	r0, [sp, #48]	; 0x30
   83110:	f004 fa86 	bl	87620 <__ssprint_r>
   83114:	2800      	cmp	r0, #0
   83116:	f47f ab64 	bne.w	827e2 <_svfprintf_r+0x1ba>
   8311a:	46c8      	mov	r8, r9
   8311c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   8311e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83120:	b929      	cbnz	r1, 8312e <_svfprintf_r+0xb06>
   83122:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   83124:	b91b      	cbnz	r3, 8312e <_svfprintf_r+0xb06>
   83126:	9b07      	ldr	r3, [sp, #28]
   83128:	07d8      	lsls	r0, r3, #31
   8312a:	f57f ac6f 	bpl.w	82a0c <_svfprintf_r+0x3e4>
   8312e:	9819      	ldr	r0, [sp, #100]	; 0x64
   83130:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83132:	4602      	mov	r2, r0
   83134:	3301      	adds	r3, #1
   83136:	4422      	add	r2, r4
   83138:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   8313a:	2b07      	cmp	r3, #7
   8313c:	9227      	str	r2, [sp, #156]	; 0x9c
   8313e:	f8c8 4000 	str.w	r4, [r8]
   83142:	f8c8 0004 	str.w	r0, [r8, #4]
   83146:	9326      	str	r3, [sp, #152]	; 0x98
   83148:	f300 8431 	bgt.w	839ae <_svfprintf_r+0x1386>
   8314c:	f108 0808 	add.w	r8, r8, #8
   83150:	2900      	cmp	r1, #0
   83152:	f2c0 8409 	blt.w	83968 <_svfprintf_r+0x1340>
   83156:	9913      	ldr	r1, [sp, #76]	; 0x4c
   83158:	3301      	adds	r3, #1
   8315a:	188c      	adds	r4, r1, r2
   8315c:	2b07      	cmp	r3, #7
   8315e:	9427      	str	r4, [sp, #156]	; 0x9c
   83160:	9326      	str	r3, [sp, #152]	; 0x98
   83162:	f8c8 6000 	str.w	r6, [r8]
   83166:	f8c8 1004 	str.w	r1, [r8, #4]
   8316a:	f77f ac4d 	ble.w	82a08 <_svfprintf_r+0x3e0>
   8316e:	aa25      	add	r2, sp, #148	; 0x94
   83170:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83172:	980c      	ldr	r0, [sp, #48]	; 0x30
   83174:	f004 fa54 	bl	87620 <__ssprint_r>
   83178:	2800      	cmp	r0, #0
   8317a:	f47f ab32 	bne.w	827e2 <_svfprintf_r+0x1ba>
   8317e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83180:	46c8      	mov	r8, r9
   83182:	e443      	b.n	82a0c <_svfprintf_r+0x3e4>
   83184:	aa25      	add	r2, sp, #148	; 0x94
   83186:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83188:	980c      	ldr	r0, [sp, #48]	; 0x30
   8318a:	f004 fa49 	bl	87620 <__ssprint_r>
   8318e:	2800      	cmp	r0, #0
   83190:	f47f ab27 	bne.w	827e2 <_svfprintf_r+0x1ba>
   83194:	46c8      	mov	r8, r9
   83196:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83198:	f7ff bbe5 	b.w	82966 <_svfprintf_r+0x33e>
   8319c:	2400      	movs	r4, #0
   8319e:	2500      	movs	r5, #0
   831a0:	f8cd b01c 	str.w	fp, [sp, #28]
   831a4:	4649      	mov	r1, r9
   831a6:	e004      	b.n	831b2 <_svfprintf_r+0xb8a>
   831a8:	00088a80 	.word	0x00088a80
   831ac:	00088a94 	.word	0x00088a94
   831b0:	4631      	mov	r1, r6
   831b2:	08e2      	lsrs	r2, r4, #3
   831b4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   831b8:	08e8      	lsrs	r0, r5, #3
   831ba:	f004 0307 	and.w	r3, r4, #7
   831be:	4605      	mov	r5, r0
   831c0:	4614      	mov	r4, r2
   831c2:	3330      	adds	r3, #48	; 0x30
   831c4:	ea54 0205 	orrs.w	r2, r4, r5
   831c8:	f801 3c01 	strb.w	r3, [r1, #-1]
   831cc:	f101 36ff 	add.w	r6, r1, #4294967295
   831d0:	d1ee      	bne.n	831b0 <_svfprintf_r+0xb88>
   831d2:	9a07      	ldr	r2, [sp, #28]
   831d4:	07d2      	lsls	r2, r2, #31
   831d6:	f57f ad59 	bpl.w	82c8c <_svfprintf_r+0x664>
   831da:	2b30      	cmp	r3, #48	; 0x30
   831dc:	f43f ad56 	beq.w	82c8c <_svfprintf_r+0x664>
   831e0:	2330      	movs	r3, #48	; 0x30
   831e2:	3902      	subs	r1, #2
   831e4:	f806 3c01 	strb.w	r3, [r6, #-1]
   831e8:	eba9 0301 	sub.w	r3, r9, r1
   831ec:	930e      	str	r3, [sp, #56]	; 0x38
   831ee:	460e      	mov	r6, r1
   831f0:	f7ff bb36 	b.w	82860 <_svfprintf_r+0x238>
   831f4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   831f6:	2900      	cmp	r1, #0
   831f8:	f77f af79 	ble.w	830ee <_svfprintf_r+0xac6>
   831fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   831fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   83200:	4293      	cmp	r3, r2
   83202:	bfa8      	it	ge
   83204:	4613      	movge	r3, r2
   83206:	2b00      	cmp	r3, #0
   83208:	461f      	mov	r7, r3
   8320a:	dd0b      	ble.n	83224 <_svfprintf_r+0xbfc>
   8320c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8320e:	443c      	add	r4, r7
   83210:	3301      	adds	r3, #1
   83212:	2b07      	cmp	r3, #7
   83214:	9427      	str	r4, [sp, #156]	; 0x9c
   83216:	e888 00c0 	stmia.w	r8, {r6, r7}
   8321a:	9326      	str	r3, [sp, #152]	; 0x98
   8321c:	f300 82fb 	bgt.w	83816 <_svfprintf_r+0x11ee>
   83220:	f108 0808 	add.w	r8, r8, #8
   83224:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83226:	2f00      	cmp	r7, #0
   83228:	bfa8      	it	ge
   8322a:	1bdb      	subge	r3, r3, r7
   8322c:	2b00      	cmp	r3, #0
   8322e:	461f      	mov	r7, r3
   83230:	f340 80d7 	ble.w	833e2 <_svfprintf_r+0xdba>
   83234:	2b10      	cmp	r3, #16
   83236:	f340 8434 	ble.w	83aa2 <_svfprintf_r+0x147a>
   8323a:	4dba      	ldr	r5, [pc, #744]	; (83524 <_svfprintf_r+0xefc>)
   8323c:	4642      	mov	r2, r8
   8323e:	4621      	mov	r1, r4
   83240:	46b0      	mov	r8, r6
   83242:	f04f 0b10 	mov.w	fp, #16
   83246:	462e      	mov	r6, r5
   83248:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8324a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8324c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8324e:	e004      	b.n	8325a <_svfprintf_r+0xc32>
   83250:	3208      	adds	r2, #8
   83252:	3f10      	subs	r7, #16
   83254:	2f10      	cmp	r7, #16
   83256:	f340 80b5 	ble.w	833c4 <_svfprintf_r+0xd9c>
   8325a:	3301      	adds	r3, #1
   8325c:	3110      	adds	r1, #16
   8325e:	2b07      	cmp	r3, #7
   83260:	9127      	str	r1, [sp, #156]	; 0x9c
   83262:	9326      	str	r3, [sp, #152]	; 0x98
   83264:	e882 0840 	stmia.w	r2, {r6, fp}
   83268:	ddf2      	ble.n	83250 <_svfprintf_r+0xc28>
   8326a:	aa25      	add	r2, sp, #148	; 0x94
   8326c:	4629      	mov	r1, r5
   8326e:	4620      	mov	r0, r4
   83270:	f004 f9d6 	bl	87620 <__ssprint_r>
   83274:	2800      	cmp	r0, #0
   83276:	f47f aab4 	bne.w	827e2 <_svfprintf_r+0x1ba>
   8327a:	464a      	mov	r2, r9
   8327c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   8327e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83280:	e7e7      	b.n	83252 <_svfprintf_r+0xc2a>
   83282:	2d00      	cmp	r5, #0
   83284:	bf08      	it	eq
   83286:	2c0a      	cmpeq	r4, #10
   83288:	f0c0 8090 	bcc.w	833ac <_svfprintf_r+0xd84>
   8328c:	464e      	mov	r6, r9
   8328e:	4620      	mov	r0, r4
   83290:	4629      	mov	r1, r5
   83292:	220a      	movs	r2, #10
   83294:	2300      	movs	r3, #0
   83296:	f005 f875 	bl	88384 <__aeabi_uldivmod>
   8329a:	3230      	adds	r2, #48	; 0x30
   8329c:	f806 2d01 	strb.w	r2, [r6, #-1]!
   832a0:	4620      	mov	r0, r4
   832a2:	4629      	mov	r1, r5
   832a4:	2300      	movs	r3, #0
   832a6:	220a      	movs	r2, #10
   832a8:	f005 f86c 	bl	88384 <__aeabi_uldivmod>
   832ac:	4604      	mov	r4, r0
   832ae:	460d      	mov	r5, r1
   832b0:	ea54 0305 	orrs.w	r3, r4, r5
   832b4:	d1eb      	bne.n	8328e <_svfprintf_r+0xc66>
   832b6:	eba9 0306 	sub.w	r3, r9, r6
   832ba:	930e      	str	r3, [sp, #56]	; 0x38
   832bc:	f7ff bad0 	b.w	82860 <_svfprintf_r+0x238>
   832c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   832c2:	464e      	mov	r6, r9
   832c4:	930e      	str	r3, [sp, #56]	; 0x38
   832c6:	f7ff bacb 	b.w	82860 <_svfprintf_r+0x238>
   832ca:	1e5e      	subs	r6, r3, #1
   832cc:	2e00      	cmp	r6, #0
   832ce:	f77f aeca 	ble.w	83066 <_svfprintf_r+0xa3e>
   832d2:	2e10      	cmp	r6, #16
   832d4:	f340 83e3 	ble.w	83a9e <_svfprintf_r+0x1476>
   832d8:	4622      	mov	r2, r4
   832da:	f04f 0b10 	mov.w	fp, #16
   832de:	4d91      	ldr	r5, [pc, #580]	; (83524 <_svfprintf_r+0xefc>)
   832e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   832e2:	e004      	b.n	832ee <_svfprintf_r+0xcc6>
   832e4:	3e10      	subs	r6, #16
   832e6:	2e10      	cmp	r6, #16
   832e8:	f108 0808 	add.w	r8, r8, #8
   832ec:	dd15      	ble.n	8331a <_svfprintf_r+0xcf2>
   832ee:	3701      	adds	r7, #1
   832f0:	3210      	adds	r2, #16
   832f2:	2f07      	cmp	r7, #7
   832f4:	9227      	str	r2, [sp, #156]	; 0x9c
   832f6:	9726      	str	r7, [sp, #152]	; 0x98
   832f8:	e888 0820 	stmia.w	r8, {r5, fp}
   832fc:	ddf2      	ble.n	832e4 <_svfprintf_r+0xcbc>
   832fe:	aa25      	add	r2, sp, #148	; 0x94
   83300:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83302:	4620      	mov	r0, r4
   83304:	f004 f98c 	bl	87620 <__ssprint_r>
   83308:	2800      	cmp	r0, #0
   8330a:	f47f aa6a 	bne.w	827e2 <_svfprintf_r+0x1ba>
   8330e:	3e10      	subs	r6, #16
   83310:	2e10      	cmp	r6, #16
   83312:	46c8      	mov	r8, r9
   83314:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83316:	9f26      	ldr	r7, [sp, #152]	; 0x98
   83318:	dce9      	bgt.n	832ee <_svfprintf_r+0xcc6>
   8331a:	4614      	mov	r4, r2
   8331c:	3701      	adds	r7, #1
   8331e:	4434      	add	r4, r6
   83320:	2f07      	cmp	r7, #7
   83322:	9427      	str	r4, [sp, #156]	; 0x9c
   83324:	9726      	str	r7, [sp, #152]	; 0x98
   83326:	e888 0060 	stmia.w	r8, {r5, r6}
   8332a:	f77f ae9a 	ble.w	83062 <_svfprintf_r+0xa3a>
   8332e:	aa25      	add	r2, sp, #148	; 0x94
   83330:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83332:	980c      	ldr	r0, [sp, #48]	; 0x30
   83334:	f004 f974 	bl	87620 <__ssprint_r>
   83338:	2800      	cmp	r0, #0
   8333a:	f47f aa52 	bne.w	827e2 <_svfprintf_r+0x1ba>
   8333e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83340:	9f26      	ldr	r7, [sp, #152]	; 0x98
   83342:	46c8      	mov	r8, r9
   83344:	e68f      	b.n	83066 <_svfprintf_r+0xa3e>
   83346:	3204      	adds	r2, #4
   83348:	681c      	ldr	r4, [r3, #0]
   8334a:	2500      	movs	r5, #0
   8334c:	2301      	movs	r3, #1
   8334e:	920f      	str	r2, [sp, #60]	; 0x3c
   83350:	f7ff ba68 	b.w	82824 <_svfprintf_r+0x1fc>
   83354:	681c      	ldr	r4, [r3, #0]
   83356:	3304      	adds	r3, #4
   83358:	930f      	str	r3, [sp, #60]	; 0x3c
   8335a:	2500      	movs	r5, #0
   8335c:	e42a      	b.n	82bb4 <_svfprintf_r+0x58c>
   8335e:	681c      	ldr	r4, [r3, #0]
   83360:	3304      	adds	r3, #4
   83362:	17e5      	asrs	r5, r4, #31
   83364:	4622      	mov	r2, r4
   83366:	930f      	str	r3, [sp, #60]	; 0x3c
   83368:	462b      	mov	r3, r5
   8336a:	2a00      	cmp	r2, #0
   8336c:	f173 0300 	sbcs.w	r3, r3, #0
   83370:	f6bf ac68 	bge.w	82c44 <_svfprintf_r+0x61c>
   83374:	272d      	movs	r7, #45	; 0x2d
   83376:	4264      	negs	r4, r4
   83378:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8337c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   83380:	2301      	movs	r3, #1
   83382:	f7ff ba53 	b.w	8282c <_svfprintf_r+0x204>
   83386:	990f      	ldr	r1, [sp, #60]	; 0x3c
   83388:	2500      	movs	r5, #0
   8338a:	460a      	mov	r2, r1
   8338c:	3204      	adds	r2, #4
   8338e:	680c      	ldr	r4, [r1, #0]
   83390:	920f      	str	r2, [sp, #60]	; 0x3c
   83392:	f7ff ba47 	b.w	82824 <_svfprintf_r+0x1fc>
   83396:	4614      	mov	r4, r2
   83398:	3301      	adds	r3, #1
   8339a:	4434      	add	r4, r6
   8339c:	2b07      	cmp	r3, #7
   8339e:	9427      	str	r4, [sp, #156]	; 0x9c
   833a0:	9326      	str	r3, [sp, #152]	; 0x98
   833a2:	e888 0060 	stmia.w	r8, {r5, r6}
   833a6:	f77f ab2f 	ble.w	82a08 <_svfprintf_r+0x3e0>
   833aa:	e6e0      	b.n	8316e <_svfprintf_r+0xb46>
   833ac:	f8dd b01c 	ldr.w	fp, [sp, #28]
   833b0:	2301      	movs	r3, #1
   833b2:	ae42      	add	r6, sp, #264	; 0x108
   833b4:	3430      	adds	r4, #48	; 0x30
   833b6:	f8cd b01c 	str.w	fp, [sp, #28]
   833ba:	f806 4d41 	strb.w	r4, [r6, #-65]!
   833be:	930e      	str	r3, [sp, #56]	; 0x38
   833c0:	f7ff ba4e 	b.w	82860 <_svfprintf_r+0x238>
   833c4:	4635      	mov	r5, r6
   833c6:	460c      	mov	r4, r1
   833c8:	4646      	mov	r6, r8
   833ca:	4690      	mov	r8, r2
   833cc:	3301      	adds	r3, #1
   833ce:	443c      	add	r4, r7
   833d0:	2b07      	cmp	r3, #7
   833d2:	9427      	str	r4, [sp, #156]	; 0x9c
   833d4:	9326      	str	r3, [sp, #152]	; 0x98
   833d6:	e888 00a0 	stmia.w	r8, {r5, r7}
   833da:	f300 8246 	bgt.w	8386a <_svfprintf_r+0x1242>
   833de:	f108 0808 	add.w	r8, r8, #8
   833e2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   833e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   833e6:	429a      	cmp	r2, r3
   833e8:	db45      	blt.n	83476 <_svfprintf_r+0xe4e>
   833ea:	9b07      	ldr	r3, [sp, #28]
   833ec:	07d9      	lsls	r1, r3, #31
   833ee:	d442      	bmi.n	83476 <_svfprintf_r+0xe4e>
   833f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   833f2:	9812      	ldr	r0, [sp, #72]	; 0x48
   833f4:	1a9a      	subs	r2, r3, r2
   833f6:	1a1d      	subs	r5, r3, r0
   833f8:	4295      	cmp	r5, r2
   833fa:	bfa8      	it	ge
   833fc:	4615      	movge	r5, r2
   833fe:	2d00      	cmp	r5, #0
   83400:	dd0e      	ble.n	83420 <_svfprintf_r+0xdf8>
   83402:	9926      	ldr	r1, [sp, #152]	; 0x98
   83404:	4406      	add	r6, r0
   83406:	3101      	adds	r1, #1
   83408:	442c      	add	r4, r5
   8340a:	2907      	cmp	r1, #7
   8340c:	f8c8 6000 	str.w	r6, [r8]
   83410:	9427      	str	r4, [sp, #156]	; 0x9c
   83412:	f8c8 5004 	str.w	r5, [r8, #4]
   83416:	9126      	str	r1, [sp, #152]	; 0x98
   83418:	f300 8216 	bgt.w	83848 <_svfprintf_r+0x1220>
   8341c:	f108 0808 	add.w	r8, r8, #8
   83420:	2d00      	cmp	r5, #0
   83422:	bfb4      	ite	lt
   83424:	4616      	movlt	r6, r2
   83426:	1b56      	subge	r6, r2, r5
   83428:	2e00      	cmp	r6, #0
   8342a:	f77f aaef 	ble.w	82a0c <_svfprintf_r+0x3e4>
   8342e:	2e10      	cmp	r6, #16
   83430:	f340 82f3 	ble.w	83a1a <_svfprintf_r+0x13f2>
   83434:	4622      	mov	r2, r4
   83436:	2710      	movs	r7, #16
   83438:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8343a:	4d3a      	ldr	r5, [pc, #232]	; (83524 <_svfprintf_r+0xefc>)
   8343c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   83440:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   83442:	e004      	b.n	8344e <_svfprintf_r+0xe26>
   83444:	f108 0808 	add.w	r8, r8, #8
   83448:	3e10      	subs	r6, #16
   8344a:	2e10      	cmp	r6, #16
   8344c:	dda3      	ble.n	83396 <_svfprintf_r+0xd6e>
   8344e:	3301      	adds	r3, #1
   83450:	3210      	adds	r2, #16
   83452:	2b07      	cmp	r3, #7
   83454:	9227      	str	r2, [sp, #156]	; 0x9c
   83456:	9326      	str	r3, [sp, #152]	; 0x98
   83458:	e888 00a0 	stmia.w	r8, {r5, r7}
   8345c:	ddf2      	ble.n	83444 <_svfprintf_r+0xe1c>
   8345e:	aa25      	add	r2, sp, #148	; 0x94
   83460:	4621      	mov	r1, r4
   83462:	4658      	mov	r0, fp
   83464:	f004 f8dc 	bl	87620 <__ssprint_r>
   83468:	2800      	cmp	r0, #0
   8346a:	f47f a9ba 	bne.w	827e2 <_svfprintf_r+0x1ba>
   8346e:	46c8      	mov	r8, r9
   83470:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83472:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83474:	e7e8      	b.n	83448 <_svfprintf_r+0xe20>
   83476:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83478:	9819      	ldr	r0, [sp, #100]	; 0x64
   8347a:	3301      	adds	r3, #1
   8347c:	991a      	ldr	r1, [sp, #104]	; 0x68
   8347e:	4404      	add	r4, r0
   83480:	2b07      	cmp	r3, #7
   83482:	9427      	str	r4, [sp, #156]	; 0x9c
   83484:	f8c8 1000 	str.w	r1, [r8]
   83488:	f8c8 0004 	str.w	r0, [r8, #4]
   8348c:	9326      	str	r3, [sp, #152]	; 0x98
   8348e:	f300 81cf 	bgt.w	83830 <_svfprintf_r+0x1208>
   83492:	f108 0808 	add.w	r8, r8, #8
   83496:	e7ab      	b.n	833f0 <_svfprintf_r+0xdc8>
   83498:	9b07      	ldr	r3, [sp, #28]
   8349a:	07da      	lsls	r2, r3, #31
   8349c:	f53f adad 	bmi.w	82ffa <_svfprintf_r+0x9d2>
   834a0:	2301      	movs	r3, #1
   834a2:	9f26      	ldr	r7, [sp, #152]	; 0x98
   834a4:	441c      	add	r4, r3
   834a6:	441f      	add	r7, r3
   834a8:	2f07      	cmp	r7, #7
   834aa:	9427      	str	r4, [sp, #156]	; 0x9c
   834ac:	f8c8 6000 	str.w	r6, [r8]
   834b0:	9726      	str	r7, [sp, #152]	; 0x98
   834b2:	f8c8 3004 	str.w	r3, [r8, #4]
   834b6:	f77f add4 	ble.w	83062 <_svfprintf_r+0xa3a>
   834ba:	aa25      	add	r2, sp, #148	; 0x94
   834bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   834be:	980c      	ldr	r0, [sp, #48]	; 0x30
   834c0:	f004 f8ae 	bl	87620 <__ssprint_r>
   834c4:	2800      	cmp	r0, #0
   834c6:	f47f a98c 	bne.w	827e2 <_svfprintf_r+0x1ba>
   834ca:	46c8      	mov	r8, r9
   834cc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   834ce:	9f26      	ldr	r7, [sp, #152]	; 0x98
   834d0:	e5c9      	b.n	83066 <_svfprintf_r+0xa3e>
   834d2:	aa25      	add	r2, sp, #148	; 0x94
   834d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   834d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   834d8:	f004 f8a2 	bl	87620 <__ssprint_r>
   834dc:	2800      	cmp	r0, #0
   834de:	f47f a980 	bne.w	827e2 <_svfprintf_r+0x1ba>
   834e2:	46c8      	mov	r8, r9
   834e4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   834e6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   834e8:	e596      	b.n	83018 <_svfprintf_r+0x9f0>
   834ea:	aa25      	add	r2, sp, #148	; 0x94
   834ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   834ee:	980c      	ldr	r0, [sp, #48]	; 0x30
   834f0:	f004 f896 	bl	87620 <__ssprint_r>
   834f4:	2800      	cmp	r0, #0
   834f6:	f47f a974 	bne.w	827e2 <_svfprintf_r+0x1ba>
   834fa:	46c8      	mov	r8, r9
   834fc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   834fe:	9f26      	ldr	r7, [sp, #152]	; 0x98
   83500:	e599      	b.n	83036 <_svfprintf_r+0xa0e>
   83502:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   83504:	3407      	adds	r4, #7
   83506:	f024 0407 	bic.w	r4, r4, #7
   8350a:	f104 0108 	add.w	r1, r4, #8
   8350e:	e9d4 2300 	ldrd	r2, r3, [r4]
   83512:	910f      	str	r1, [sp, #60]	; 0x3c
   83514:	4614      	mov	r4, r2
   83516:	461d      	mov	r5, r3
   83518:	f7ff bb8f 	b.w	82c3a <_svfprintf_r+0x612>
   8351c:	464e      	mov	r6, r9
   8351e:	f7ff b99f 	b.w	82860 <_svfprintf_r+0x238>
   83522:	bf00      	nop
   83524:	00088a94 	.word	0x00088a94
   83528:	aa25      	add	r2, sp, #148	; 0x94
   8352a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8352c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8352e:	f004 f877 	bl	87620 <__ssprint_r>
   83532:	2800      	cmp	r0, #0
   83534:	f47f a955 	bne.w	827e2 <_svfprintf_r+0x1ba>
   83538:	46c8      	mov	r8, r9
   8353a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8353c:	f7ff ba16 	b.w	8296c <_svfprintf_r+0x344>
   83540:	9c15      	ldr	r4, [sp, #84]	; 0x54
   83542:	4622      	mov	r2, r4
   83544:	4620      	mov	r0, r4
   83546:	9c14      	ldr	r4, [sp, #80]	; 0x50
   83548:	4623      	mov	r3, r4
   8354a:	4621      	mov	r1, r4
   8354c:	f004 fedc 	bl	88308 <__aeabi_dcmpun>
   83550:	2800      	cmp	r0, #0
   83552:	f040 8273 	bne.w	83a3c <_svfprintf_r+0x1414>
   83556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83558:	3301      	adds	r3, #1
   8355a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8355c:	f023 0320 	bic.w	r3, r3, #32
   83560:	930e      	str	r3, [sp, #56]	; 0x38
   83562:	f000 819c 	beq.w	8389e <_svfprintf_r+0x1276>
   83566:	2b47      	cmp	r3, #71	; 0x47
   83568:	f000 80d6 	beq.w	83718 <_svfprintf_r+0x10f0>
   8356c:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   83570:	9307      	str	r3, [sp, #28]
   83572:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83574:	1e1f      	subs	r7, r3, #0
   83576:	9b15      	ldr	r3, [sp, #84]	; 0x54
   83578:	9308      	str	r3, [sp, #32]
   8357a:	bfb7      	itett	lt
   8357c:	463b      	movlt	r3, r7
   8357e:	2300      	movge	r3, #0
   83580:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   83584:	232d      	movlt	r3, #45	; 0x2d
   83586:	9310      	str	r3, [sp, #64]	; 0x40
   83588:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8358a:	2b66      	cmp	r3, #102	; 0x66
   8358c:	f000 8190 	beq.w	838b0 <_svfprintf_r+0x1288>
   83590:	2b46      	cmp	r3, #70	; 0x46
   83592:	f000 80a4 	beq.w	836de <_svfprintf_r+0x10b6>
   83596:	2002      	movs	r0, #2
   83598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8359a:	a923      	add	r1, sp, #140	; 0x8c
   8359c:	2b45      	cmp	r3, #69	; 0x45
   8359e:	bf0a      	itet	eq
   835a0:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   835a2:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   835a4:	1c5d      	addeq	r5, r3, #1
   835a6:	e88d 0021 	stmia.w	sp, {r0, r5}
   835aa:	9104      	str	r1, [sp, #16]
   835ac:	a820      	add	r0, sp, #128	; 0x80
   835ae:	a91f      	add	r1, sp, #124	; 0x7c
   835b0:	463b      	mov	r3, r7
   835b2:	9003      	str	r0, [sp, #12]
   835b4:	9a08      	ldr	r2, [sp, #32]
   835b6:	9102      	str	r1, [sp, #8]
   835b8:	980c      	ldr	r0, [sp, #48]	; 0x30
   835ba:	f001 fadd 	bl	84b78 <_dtoa_r>
   835be:	9b11      	ldr	r3, [sp, #68]	; 0x44
   835c0:	4606      	mov	r6, r0
   835c2:	2b67      	cmp	r3, #103	; 0x67
   835c4:	f040 81ba 	bne.w	8393c <_svfprintf_r+0x1314>
   835c8:	f01b 0f01 	tst.w	fp, #1
   835cc:	f000 8223 	beq.w	83a16 <_svfprintf_r+0x13ee>
   835d0:	1974      	adds	r4, r6, r5
   835d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   835d4:	9808      	ldr	r0, [sp, #32]
   835d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   835d8:	4639      	mov	r1, r7
   835da:	f004 fe63 	bl	882a4 <__aeabi_dcmpeq>
   835de:	2800      	cmp	r0, #0
   835e0:	f040 8124 	bne.w	8382c <_svfprintf_r+0x1204>
   835e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   835e6:	42a3      	cmp	r3, r4
   835e8:	d206      	bcs.n	835f8 <_svfprintf_r+0xfd0>
   835ea:	2130      	movs	r1, #48	; 0x30
   835ec:	1c5a      	adds	r2, r3, #1
   835ee:	9223      	str	r2, [sp, #140]	; 0x8c
   835f0:	7019      	strb	r1, [r3, #0]
   835f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   835f4:	429c      	cmp	r4, r3
   835f6:	d8f9      	bhi.n	835ec <_svfprintf_r+0xfc4>
   835f8:	1b9b      	subs	r3, r3, r6
   835fa:	9313      	str	r3, [sp, #76]	; 0x4c
   835fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   835fe:	2b47      	cmp	r3, #71	; 0x47
   83600:	f000 80a2 	beq.w	83748 <_svfprintf_r+0x1120>
   83604:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83606:	2b65      	cmp	r3, #101	; 0x65
   83608:	f340 81a7 	ble.w	8395a <_svfprintf_r+0x1332>
   8360c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8360e:	2b66      	cmp	r3, #102	; 0x66
   83610:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   83612:	9312      	str	r3, [sp, #72]	; 0x48
   83614:	f000 8171 	beq.w	838fa <_svfprintf_r+0x12d2>
   83618:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8361a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8361c:	4619      	mov	r1, r3
   8361e:	4291      	cmp	r1, r2
   83620:	f300 815d 	bgt.w	838de <_svfprintf_r+0x12b6>
   83624:	f01b 0f01 	tst.w	fp, #1
   83628:	f040 81f0 	bne.w	83a0c <_svfprintf_r+0x13e4>
   8362c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   83630:	9308      	str	r3, [sp, #32]
   83632:	2367      	movs	r3, #103	; 0x67
   83634:	920e      	str	r2, [sp, #56]	; 0x38
   83636:	9311      	str	r3, [sp, #68]	; 0x44
   83638:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8363a:	2b00      	cmp	r3, #0
   8363c:	d17d      	bne.n	8373a <_svfprintf_r+0x1112>
   8363e:	930a      	str	r3, [sp, #40]	; 0x28
   83640:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83644:	f7ff b914 	b.w	82870 <_svfprintf_r+0x248>
   83648:	f024 0407 	bic.w	r4, r4, #7
   8364c:	6823      	ldr	r3, [r4, #0]
   8364e:	9315      	str	r3, [sp, #84]	; 0x54
   83650:	6863      	ldr	r3, [r4, #4]
   83652:	9314      	str	r3, [sp, #80]	; 0x50
   83654:	f104 0308 	add.w	r3, r4, #8
   83658:	930f      	str	r3, [sp, #60]	; 0x3c
   8365a:	f7ff bb2f 	b.w	82cbc <_svfprintf_r+0x694>
   8365e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83660:	6813      	ldr	r3, [r2, #0]
   83662:	3204      	adds	r2, #4
   83664:	920f      	str	r2, [sp, #60]	; 0x3c
   83666:	9a09      	ldr	r2, [sp, #36]	; 0x24
   83668:	601a      	str	r2, [r3, #0]
   8366a:	f7ff b804 	b.w	82676 <_svfprintf_r+0x4e>
   8366e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83670:	4daf      	ldr	r5, [pc, #700]	; (83930 <_svfprintf_r+0x1308>)
   83672:	f7ff b9ad 	b.w	829d0 <_svfprintf_r+0x3a8>
   83676:	aa25      	add	r2, sp, #148	; 0x94
   83678:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8367a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8367c:	f003 ffd0 	bl	87620 <__ssprint_r>
   83680:	2800      	cmp	r0, #0
   83682:	f47f a8ae 	bne.w	827e2 <_svfprintf_r+0x1ba>
   83686:	46c8      	mov	r8, r9
   83688:	e431      	b.n	82eee <_svfprintf_r+0x8c6>
   8368a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8368c:	4613      	mov	r3, r2
   8368e:	3304      	adds	r3, #4
   83690:	930f      	str	r3, [sp, #60]	; 0x3c
   83692:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83694:	6811      	ldr	r1, [r2, #0]
   83696:	17dd      	asrs	r5, r3, #31
   83698:	461a      	mov	r2, r3
   8369a:	462b      	mov	r3, r5
   8369c:	e9c1 2300 	strd	r2, r3, [r1]
   836a0:	f7fe bfe9 	b.w	82676 <_svfprintf_r+0x4e>
   836a4:	aa25      	add	r2, sp, #148	; 0x94
   836a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   836a8:	980c      	ldr	r0, [sp, #48]	; 0x30
   836aa:	f003 ffb9 	bl	87620 <__ssprint_r>
   836ae:	2800      	cmp	r0, #0
   836b0:	f47f a897 	bne.w	827e2 <_svfprintf_r+0x1ba>
   836b4:	46c8      	mov	r8, r9
   836b6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   836b8:	e432      	b.n	82f20 <_svfprintf_r+0x8f8>
   836ba:	f108 0808 	add.w	r8, r8, #8
   836be:	e52f      	b.n	83120 <_svfprintf_r+0xaf8>
   836c0:	2140      	movs	r1, #64	; 0x40
   836c2:	980c      	ldr	r0, [sp, #48]	; 0x30
   836c4:	f002 fec0 	bl	86448 <_malloc_r>
   836c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   836ca:	6010      	str	r0, [r2, #0]
   836cc:	6110      	str	r0, [r2, #16]
   836ce:	2800      	cmp	r0, #0
   836d0:	f000 8214 	beq.w	83afc <_svfprintf_r+0x14d4>
   836d4:	2340      	movs	r3, #64	; 0x40
   836d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   836d8:	6153      	str	r3, [r2, #20]
   836da:	f7fe bfbc 	b.w	82656 <_svfprintf_r+0x2e>
   836de:	2003      	movs	r0, #3
   836e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   836e2:	a923      	add	r1, sp, #140	; 0x8c
   836e4:	e88d 0011 	stmia.w	sp, {r0, r4}
   836e8:	9104      	str	r1, [sp, #16]
   836ea:	a820      	add	r0, sp, #128	; 0x80
   836ec:	a91f      	add	r1, sp, #124	; 0x7c
   836ee:	9003      	str	r0, [sp, #12]
   836f0:	9a08      	ldr	r2, [sp, #32]
   836f2:	463b      	mov	r3, r7
   836f4:	9102      	str	r1, [sp, #8]
   836f6:	980c      	ldr	r0, [sp, #48]	; 0x30
   836f8:	f001 fa3e 	bl	84b78 <_dtoa_r>
   836fc:	4625      	mov	r5, r4
   836fe:	4606      	mov	r6, r0
   83700:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83702:	1974      	adds	r4, r6, r5
   83704:	2b46      	cmp	r3, #70	; 0x46
   83706:	f47f af64 	bne.w	835d2 <_svfprintf_r+0xfaa>
   8370a:	7833      	ldrb	r3, [r6, #0]
   8370c:	2b30      	cmp	r3, #48	; 0x30
   8370e:	f000 8187 	beq.w	83a20 <_svfprintf_r+0x13f8>
   83712:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   83714:	442c      	add	r4, r5
   83716:	e75c      	b.n	835d2 <_svfprintf_r+0xfaa>
   83718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8371a:	2b00      	cmp	r3, #0
   8371c:	bf08      	it	eq
   8371e:	2301      	moveq	r3, #1
   83720:	930a      	str	r3, [sp, #40]	; 0x28
   83722:	e723      	b.n	8356c <_svfprintf_r+0xf44>
   83724:	4630      	mov	r0, r6
   83726:	950a      	str	r5, [sp, #40]	; 0x28
   83728:	f7fe ff50 	bl	825cc <strlen>
   8372c:	940f      	str	r4, [sp, #60]	; 0x3c
   8372e:	900e      	str	r0, [sp, #56]	; 0x38
   83730:	f8cd b01c 	str.w	fp, [sp, #28]
   83734:	4603      	mov	r3, r0
   83736:	f7ff b9e7 	b.w	82b08 <_svfprintf_r+0x4e0>
   8373a:	272d      	movs	r7, #45	; 0x2d
   8373c:	2300      	movs	r3, #0
   8373e:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   83742:	930a      	str	r3, [sp, #40]	; 0x28
   83744:	f7ff b895 	b.w	82872 <_svfprintf_r+0x24a>
   83748:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8374a:	461a      	mov	r2, r3
   8374c:	9312      	str	r3, [sp, #72]	; 0x48
   8374e:	3303      	adds	r3, #3
   83750:	db04      	blt.n	8375c <_svfprintf_r+0x1134>
   83752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83754:	4619      	mov	r1, r3
   83756:	4291      	cmp	r1, r2
   83758:	f6bf af5e 	bge.w	83618 <_svfprintf_r+0xff0>
   8375c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8375e:	3b02      	subs	r3, #2
   83760:	9311      	str	r3, [sp, #68]	; 0x44
   83762:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83764:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   83768:	3b01      	subs	r3, #1
   8376a:	2b00      	cmp	r3, #0
   8376c:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   83770:	bfb4      	ite	lt
   83772:	222d      	movlt	r2, #45	; 0x2d
   83774:	222b      	movge	r2, #43	; 0x2b
   83776:	931f      	str	r3, [sp, #124]	; 0x7c
   83778:	bfb8      	it	lt
   8377a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   8377c:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   83780:	bfb8      	it	lt
   83782:	f1c3 0301 	rsblt	r3, r3, #1
   83786:	2b09      	cmp	r3, #9
   83788:	f340 811f 	ble.w	839ca <_svfprintf_r+0x13a2>
   8378c:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   83790:	4601      	mov	r1, r0
   83792:	4c68      	ldr	r4, [pc, #416]	; (83934 <_svfprintf_r+0x130c>)
   83794:	e000      	b.n	83798 <_svfprintf_r+0x1170>
   83796:	4611      	mov	r1, r2
   83798:	fb84 5203 	smull	r5, r2, r4, r3
   8379c:	17dd      	asrs	r5, r3, #31
   8379e:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   837a2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   837a6:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   837aa:	3230      	adds	r2, #48	; 0x30
   837ac:	2d09      	cmp	r5, #9
   837ae:	f801 2c01 	strb.w	r2, [r1, #-1]
   837b2:	462b      	mov	r3, r5
   837b4:	f101 32ff 	add.w	r2, r1, #4294967295
   837b8:	dced      	bgt.n	83796 <_svfprintf_r+0x116e>
   837ba:	3330      	adds	r3, #48	; 0x30
   837bc:	3902      	subs	r1, #2
   837be:	b2dc      	uxtb	r4, r3
   837c0:	4288      	cmp	r0, r1
   837c2:	f802 4c01 	strb.w	r4, [r2, #-1]
   837c6:	f240 8192 	bls.w	83aee <_svfprintf_r+0x14c6>
   837ca:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   837ce:	4613      	mov	r3, r2
   837d0:	e001      	b.n	837d6 <_svfprintf_r+0x11ae>
   837d2:	f813 4b01 	ldrb.w	r4, [r3], #1
   837d6:	4283      	cmp	r3, r0
   837d8:	f801 4b01 	strb.w	r4, [r1], #1
   837dc:	d1f9      	bne.n	837d2 <_svfprintf_r+0x11aa>
   837de:	3301      	adds	r3, #1
   837e0:	1a9b      	subs	r3, r3, r2
   837e2:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   837e6:	4413      	add	r3, r2
   837e8:	aa21      	add	r2, sp, #132	; 0x84
   837ea:	1a9b      	subs	r3, r3, r2
   837ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   837ee:	931b      	str	r3, [sp, #108]	; 0x6c
   837f0:	2a01      	cmp	r2, #1
   837f2:	4413      	add	r3, r2
   837f4:	930e      	str	r3, [sp, #56]	; 0x38
   837f6:	f340 8148 	ble.w	83a8a <_svfprintf_r+0x1462>
   837fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   837fc:	9a19      	ldr	r2, [sp, #100]	; 0x64
   837fe:	4413      	add	r3, r2
   83800:	930e      	str	r3, [sp, #56]	; 0x38
   83802:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   83806:	9308      	str	r3, [sp, #32]
   83808:	2300      	movs	r3, #0
   8380a:	9312      	str	r3, [sp, #72]	; 0x48
   8380c:	e714      	b.n	83638 <_svfprintf_r+0x1010>
   8380e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83810:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83812:	f7ff b876 	b.w	82902 <_svfprintf_r+0x2da>
   83816:	aa25      	add	r2, sp, #148	; 0x94
   83818:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8381a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8381c:	f003 ff00 	bl	87620 <__ssprint_r>
   83820:	2800      	cmp	r0, #0
   83822:	f47e afde 	bne.w	827e2 <_svfprintf_r+0x1ba>
   83826:	46c8      	mov	r8, r9
   83828:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8382a:	e4fb      	b.n	83224 <_svfprintf_r+0xbfc>
   8382c:	4623      	mov	r3, r4
   8382e:	e6e3      	b.n	835f8 <_svfprintf_r+0xfd0>
   83830:	aa25      	add	r2, sp, #148	; 0x94
   83832:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83834:	980c      	ldr	r0, [sp, #48]	; 0x30
   83836:	f003 fef3 	bl	87620 <__ssprint_r>
   8383a:	2800      	cmp	r0, #0
   8383c:	f47e afd1 	bne.w	827e2 <_svfprintf_r+0x1ba>
   83840:	46c8      	mov	r8, r9
   83842:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   83844:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83846:	e5d3      	b.n	833f0 <_svfprintf_r+0xdc8>
   83848:	aa25      	add	r2, sp, #148	; 0x94
   8384a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8384c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8384e:	f003 fee7 	bl	87620 <__ssprint_r>
   83852:	2800      	cmp	r0, #0
   83854:	f47e afc5 	bne.w	827e2 <_svfprintf_r+0x1ba>
   83858:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8385a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8385c:	46c8      	mov	r8, r9
   8385e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83860:	1a9a      	subs	r2, r3, r2
   83862:	e5dd      	b.n	83420 <_svfprintf_r+0xdf8>
   83864:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83866:	f7ff b8fe 	b.w	82a66 <_svfprintf_r+0x43e>
   8386a:	aa25      	add	r2, sp, #148	; 0x94
   8386c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8386e:	980c      	ldr	r0, [sp, #48]	; 0x30
   83870:	f003 fed6 	bl	87620 <__ssprint_r>
   83874:	2800      	cmp	r0, #0
   83876:	f47e afb4 	bne.w	827e2 <_svfprintf_r+0x1ba>
   8387a:	46c8      	mov	r8, r9
   8387c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8387e:	e5b0      	b.n	833e2 <_svfprintf_r+0xdba>
   83880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83882:	4637      	mov	r7, r6
   83884:	2b06      	cmp	r3, #6
   83886:	bf28      	it	cs
   83888:	2306      	movcs	r3, #6
   8388a:	960a      	str	r6, [sp, #40]	; 0x28
   8388c:	9612      	str	r6, [sp, #72]	; 0x48
   8388e:	9308      	str	r3, [sp, #32]
   83890:	940f      	str	r4, [sp, #60]	; 0x3c
   83892:	f8cd b01c 	str.w	fp, [sp, #28]
   83896:	930e      	str	r3, [sp, #56]	; 0x38
   83898:	4e27      	ldr	r6, [pc, #156]	; (83938 <_svfprintf_r+0x1310>)
   8389a:	f7fe bfe9 	b.w	82870 <_svfprintf_r+0x248>
   8389e:	2306      	movs	r3, #6
   838a0:	930a      	str	r3, [sp, #40]	; 0x28
   838a2:	e663      	b.n	8356c <_svfprintf_r+0xf44>
   838a4:	232d      	movs	r3, #45	; 0x2d
   838a6:	461f      	mov	r7, r3
   838a8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   838ac:	f7ff ba28 	b.w	82d00 <_svfprintf_r+0x6d8>
   838b0:	2003      	movs	r0, #3
   838b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   838b4:	a923      	add	r1, sp, #140	; 0x8c
   838b6:	e88d 0011 	stmia.w	sp, {r0, r4}
   838ba:	9104      	str	r1, [sp, #16]
   838bc:	a820      	add	r0, sp, #128	; 0x80
   838be:	a91f      	add	r1, sp, #124	; 0x7c
   838c0:	9003      	str	r0, [sp, #12]
   838c2:	9a08      	ldr	r2, [sp, #32]
   838c4:	463b      	mov	r3, r7
   838c6:	9102      	str	r1, [sp, #8]
   838c8:	980c      	ldr	r0, [sp, #48]	; 0x30
   838ca:	f001 f955 	bl	84b78 <_dtoa_r>
   838ce:	4625      	mov	r5, r4
   838d0:	4606      	mov	r6, r0
   838d2:	1904      	adds	r4, r0, r4
   838d4:	e719      	b.n	8370a <_svfprintf_r+0x10e2>
   838d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   838d8:	4d15      	ldr	r5, [pc, #84]	; (83930 <_svfprintf_r+0x1308>)
   838da:	f7ff bb7e 	b.w	82fda <_svfprintf_r+0x9b2>
   838de:	9a19      	ldr	r2, [sp, #100]	; 0x64
   838e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   838e2:	4413      	add	r3, r2
   838e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   838e6:	930e      	str	r3, [sp, #56]	; 0x38
   838e8:	2a00      	cmp	r2, #0
   838ea:	f340 80c7 	ble.w	83a7c <_svfprintf_r+0x1454>
   838ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   838f2:	9308      	str	r3, [sp, #32]
   838f4:	2367      	movs	r3, #103	; 0x67
   838f6:	9311      	str	r3, [sp, #68]	; 0x44
   838f8:	e69e      	b.n	83638 <_svfprintf_r+0x1010>
   838fa:	2b00      	cmp	r3, #0
   838fc:	f340 80e1 	ble.w	83ac2 <_svfprintf_r+0x149a>
   83900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83902:	2a00      	cmp	r2, #0
   83904:	f040 80b0 	bne.w	83a68 <_svfprintf_r+0x1440>
   83908:	f01b 0f01 	tst.w	fp, #1
   8390c:	f040 80ac 	bne.w	83a68 <_svfprintf_r+0x1440>
   83910:	9308      	str	r3, [sp, #32]
   83912:	930e      	str	r3, [sp, #56]	; 0x38
   83914:	e690      	b.n	83638 <_svfprintf_r+0x1010>
   83916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83918:	940f      	str	r4, [sp, #60]	; 0x3c
   8391a:	9308      	str	r3, [sp, #32]
   8391c:	930e      	str	r3, [sp, #56]	; 0x38
   8391e:	900a      	str	r0, [sp, #40]	; 0x28
   83920:	f8cd b01c 	str.w	fp, [sp, #28]
   83924:	9012      	str	r0, [sp, #72]	; 0x48
   83926:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8392a:	f7fe bfa1 	b.w	82870 <_svfprintf_r+0x248>
   8392e:	bf00      	nop
   83930:	00088a94 	.word	0x00088a94
   83934:	66666667 	.word	0x66666667
   83938:	00088a78 	.word	0x00088a78
   8393c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8393e:	2b47      	cmp	r3, #71	; 0x47
   83940:	f47f ae46 	bne.w	835d0 <_svfprintf_r+0xfa8>
   83944:	f01b 0f01 	tst.w	fp, #1
   83948:	f47f aeda 	bne.w	83700 <_svfprintf_r+0x10d8>
   8394c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8394e:	1b9b      	subs	r3, r3, r6
   83950:	9313      	str	r3, [sp, #76]	; 0x4c
   83952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83954:	2b47      	cmp	r3, #71	; 0x47
   83956:	f43f aef7 	beq.w	83748 <_svfprintf_r+0x1120>
   8395a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8395c:	9312      	str	r3, [sp, #72]	; 0x48
   8395e:	e700      	b.n	83762 <_svfprintf_r+0x113a>
   83960:	2000      	movs	r0, #0
   83962:	900a      	str	r0, [sp, #40]	; 0x28
   83964:	f7fe bebc 	b.w	826e0 <_svfprintf_r+0xb8>
   83968:	424f      	negs	r7, r1
   8396a:	3110      	adds	r1, #16
   8396c:	da35      	bge.n	839da <_svfprintf_r+0x13b2>
   8396e:	2410      	movs	r4, #16
   83970:	4d6a      	ldr	r5, [pc, #424]	; (83b1c <_svfprintf_r+0x14f4>)
   83972:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   83976:	e004      	b.n	83982 <_svfprintf_r+0x135a>
   83978:	f108 0808 	add.w	r8, r8, #8
   8397c:	3f10      	subs	r7, #16
   8397e:	2f10      	cmp	r7, #16
   83980:	dd2c      	ble.n	839dc <_svfprintf_r+0x13b4>
   83982:	3301      	adds	r3, #1
   83984:	3210      	adds	r2, #16
   83986:	2b07      	cmp	r3, #7
   83988:	9227      	str	r2, [sp, #156]	; 0x9c
   8398a:	9326      	str	r3, [sp, #152]	; 0x98
   8398c:	f8c8 5000 	str.w	r5, [r8]
   83990:	f8c8 4004 	str.w	r4, [r8, #4]
   83994:	ddf0      	ble.n	83978 <_svfprintf_r+0x1350>
   83996:	aa25      	add	r2, sp, #148	; 0x94
   83998:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8399a:	4658      	mov	r0, fp
   8399c:	f003 fe40 	bl	87620 <__ssprint_r>
   839a0:	2800      	cmp	r0, #0
   839a2:	f47e af1e 	bne.w	827e2 <_svfprintf_r+0x1ba>
   839a6:	46c8      	mov	r8, r9
   839a8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   839aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   839ac:	e7e6      	b.n	8397c <_svfprintf_r+0x1354>
   839ae:	aa25      	add	r2, sp, #148	; 0x94
   839b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   839b2:	980c      	ldr	r0, [sp, #48]	; 0x30
   839b4:	f003 fe34 	bl	87620 <__ssprint_r>
   839b8:	2800      	cmp	r0, #0
   839ba:	f47e af12 	bne.w	827e2 <_svfprintf_r+0x1ba>
   839be:	46c8      	mov	r8, r9
   839c0:	991f      	ldr	r1, [sp, #124]	; 0x7c
   839c2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   839c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   839c6:	f7ff bbc3 	b.w	83150 <_svfprintf_r+0xb28>
   839ca:	2230      	movs	r2, #48	; 0x30
   839cc:	4413      	add	r3, r2
   839ce:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   839d2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   839d6:	ab22      	add	r3, sp, #136	; 0x88
   839d8:	e706      	b.n	837e8 <_svfprintf_r+0x11c0>
   839da:	4d50      	ldr	r5, [pc, #320]	; (83b1c <_svfprintf_r+0x14f4>)
   839dc:	3301      	adds	r3, #1
   839de:	443a      	add	r2, r7
   839e0:	2b07      	cmp	r3, #7
   839e2:	e888 00a0 	stmia.w	r8, {r5, r7}
   839e6:	9227      	str	r2, [sp, #156]	; 0x9c
   839e8:	9326      	str	r3, [sp, #152]	; 0x98
   839ea:	f108 0808 	add.w	r8, r8, #8
   839ee:	f77f abb2 	ble.w	83156 <_svfprintf_r+0xb2e>
   839f2:	aa25      	add	r2, sp, #148	; 0x94
   839f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   839f6:	980c      	ldr	r0, [sp, #48]	; 0x30
   839f8:	f003 fe12 	bl	87620 <__ssprint_r>
   839fc:	2800      	cmp	r0, #0
   839fe:	f47e aef0 	bne.w	827e2 <_svfprintf_r+0x1ba>
   83a02:	46c8      	mov	r8, r9
   83a04:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83a06:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83a08:	f7ff bba5 	b.w	83156 <_svfprintf_r+0xb2e>
   83a0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83a0e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   83a10:	4413      	add	r3, r2
   83a12:	930e      	str	r3, [sp, #56]	; 0x38
   83a14:	e76b      	b.n	838ee <_svfprintf_r+0x12c6>
   83a16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   83a18:	e5ee      	b.n	835f8 <_svfprintf_r+0xfd0>
   83a1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83a1c:	4d3f      	ldr	r5, [pc, #252]	; (83b1c <_svfprintf_r+0x14f4>)
   83a1e:	e4bb      	b.n	83398 <_svfprintf_r+0xd70>
   83a20:	9a16      	ldr	r2, [sp, #88]	; 0x58
   83a22:	9808      	ldr	r0, [sp, #32]
   83a24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   83a26:	4639      	mov	r1, r7
   83a28:	f004 fc3c 	bl	882a4 <__aeabi_dcmpeq>
   83a2c:	2800      	cmp	r0, #0
   83a2e:	f47f ae70 	bne.w	83712 <_svfprintf_r+0x10ea>
   83a32:	f1c5 0501 	rsb	r5, r5, #1
   83a36:	951f      	str	r5, [sp, #124]	; 0x7c
   83a38:	442c      	add	r4, r5
   83a3a:	e5ca      	b.n	835d2 <_svfprintf_r+0xfaa>
   83a3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83a3e:	4e38      	ldr	r6, [pc, #224]	; (83b20 <_svfprintf_r+0x14f8>)
   83a40:	2b00      	cmp	r3, #0
   83a42:	bfbe      	ittt	lt
   83a44:	232d      	movlt	r3, #45	; 0x2d
   83a46:	461f      	movlt	r7, r3
   83a48:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   83a4c:	f04f 0303 	mov.w	r3, #3
   83a50:	461a      	mov	r2, r3
   83a52:	9308      	str	r3, [sp, #32]
   83a54:	f04f 0300 	mov.w	r3, #0
   83a58:	bfa8      	it	ge
   83a5a:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   83a5e:	4619      	mov	r1, r3
   83a60:	930a      	str	r3, [sp, #40]	; 0x28
   83a62:	4b30      	ldr	r3, [pc, #192]	; (83b24 <_svfprintf_r+0x14fc>)
   83a64:	f7ff b954 	b.w	82d10 <_svfprintf_r+0x6e8>
   83a68:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83a6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   83a6c:	4413      	add	r3, r2
   83a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83a70:	441a      	add	r2, r3
   83a72:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   83a76:	920e      	str	r2, [sp, #56]	; 0x38
   83a78:	9308      	str	r3, [sp, #32]
   83a7a:	e5dd      	b.n	83638 <_svfprintf_r+0x1010>
   83a7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83a7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   83a80:	f1c3 0301 	rsb	r3, r3, #1
   83a84:	441a      	add	r2, r3
   83a86:	4613      	mov	r3, r2
   83a88:	e7c3      	b.n	83a12 <_svfprintf_r+0x13ea>
   83a8a:	f01b 0301 	ands.w	r3, fp, #1
   83a8e:	9312      	str	r3, [sp, #72]	; 0x48
   83a90:	f47f aeb3 	bne.w	837fa <_svfprintf_r+0x11d2>
   83a94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83a96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   83a9a:	9308      	str	r3, [sp, #32]
   83a9c:	e5cc      	b.n	83638 <_svfprintf_r+0x1010>
   83a9e:	4d1f      	ldr	r5, [pc, #124]	; (83b1c <_svfprintf_r+0x14f4>)
   83aa0:	e43c      	b.n	8331c <_svfprintf_r+0xcf4>
   83aa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83aa4:	4d1d      	ldr	r5, [pc, #116]	; (83b1c <_svfprintf_r+0x14f4>)
   83aa6:	e491      	b.n	833cc <_svfprintf_r+0xda4>
   83aa8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   83aaa:	f89a 3001 	ldrb.w	r3, [sl, #1]
   83aae:	6828      	ldr	r0, [r5, #0]
   83ab0:	46a2      	mov	sl, r4
   83ab2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   83ab6:	900a      	str	r0, [sp, #40]	; 0x28
   83ab8:	4628      	mov	r0, r5
   83aba:	3004      	adds	r0, #4
   83abc:	900f      	str	r0, [sp, #60]	; 0x3c
   83abe:	f7fe be0d 	b.w	826dc <_svfprintf_r+0xb4>
   83ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83ac4:	b913      	cbnz	r3, 83acc <_svfprintf_r+0x14a4>
   83ac6:	f01b 0f01 	tst.w	fp, #1
   83aca:	d002      	beq.n	83ad2 <_svfprintf_r+0x14aa>
   83acc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   83ace:	3301      	adds	r3, #1
   83ad0:	e7cd      	b.n	83a6e <_svfprintf_r+0x1446>
   83ad2:	2301      	movs	r3, #1
   83ad4:	e71c      	b.n	83910 <_svfprintf_r+0x12e8>
   83ad6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83ada:	f7ff b980 	b.w	82dde <_svfprintf_r+0x7b6>
   83ade:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83ae2:	f7ff b93a 	b.w	82d5a <_svfprintf_r+0x732>
   83ae6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83aea:	f7ff b84f 	b.w	82b8c <_svfprintf_r+0x564>
   83aee:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   83af2:	e679      	b.n	837e8 <_svfprintf_r+0x11c0>
   83af4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83af8:	f7ff b9b2 	b.w	82e60 <_svfprintf_r+0x838>
   83afc:	f04f 32ff 	mov.w	r2, #4294967295
   83b00:	230c      	movs	r3, #12
   83b02:	9209      	str	r2, [sp, #36]	; 0x24
   83b04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83b06:	6013      	str	r3, [r2, #0]
   83b08:	f7fe be74 	b.w	827f4 <_svfprintf_r+0x1cc>
   83b0c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83b10:	f7ff b8c4 	b.w	82c9c <_svfprintf_r+0x674>
   83b14:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83b18:	f7ff b878 	b.w	82c0c <_svfprintf_r+0x5e4>
   83b1c:	00088a94 	.word	0x00088a94
   83b20:	00088a4c 	.word	0x00088a4c
   83b24:	00088a48 	.word	0x00088a48

00083b28 <__sprint_r.part.0>:
   83b28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83b2c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   83b2e:	4693      	mov	fp, r2
   83b30:	049c      	lsls	r4, r3, #18
   83b32:	d52f      	bpl.n	83b94 <__sprint_r.part.0+0x6c>
   83b34:	6893      	ldr	r3, [r2, #8]
   83b36:	6812      	ldr	r2, [r2, #0]
   83b38:	b353      	cbz	r3, 83b90 <__sprint_r.part.0+0x68>
   83b3a:	460e      	mov	r6, r1
   83b3c:	4607      	mov	r7, r0
   83b3e:	f102 0908 	add.w	r9, r2, #8
   83b42:	e919 0420 	ldmdb	r9, {r5, sl}
   83b46:	ea5f 089a 	movs.w	r8, sl, lsr #2
   83b4a:	d017      	beq.n	83b7c <__sprint_r.part.0+0x54>
   83b4c:	2400      	movs	r4, #0
   83b4e:	3d04      	subs	r5, #4
   83b50:	e001      	b.n	83b56 <__sprint_r.part.0+0x2e>
   83b52:	45a0      	cmp	r8, r4
   83b54:	d010      	beq.n	83b78 <__sprint_r.part.0+0x50>
   83b56:	4632      	mov	r2, r6
   83b58:	f855 1f04 	ldr.w	r1, [r5, #4]!
   83b5c:	4638      	mov	r0, r7
   83b5e:	f002 f8c3 	bl	85ce8 <_fputwc_r>
   83b62:	1c43      	adds	r3, r0, #1
   83b64:	f104 0401 	add.w	r4, r4, #1
   83b68:	d1f3      	bne.n	83b52 <__sprint_r.part.0+0x2a>
   83b6a:	2300      	movs	r3, #0
   83b6c:	f8cb 3008 	str.w	r3, [fp, #8]
   83b70:	f8cb 3004 	str.w	r3, [fp, #4]
   83b74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83b78:	f8db 3008 	ldr.w	r3, [fp, #8]
   83b7c:	f02a 0a03 	bic.w	sl, sl, #3
   83b80:	eba3 030a 	sub.w	r3, r3, sl
   83b84:	f8cb 3008 	str.w	r3, [fp, #8]
   83b88:	f109 0908 	add.w	r9, r9, #8
   83b8c:	2b00      	cmp	r3, #0
   83b8e:	d1d8      	bne.n	83b42 <__sprint_r.part.0+0x1a>
   83b90:	2000      	movs	r0, #0
   83b92:	e7ea      	b.n	83b6a <__sprint_r.part.0+0x42>
   83b94:	f002 fa12 	bl	85fbc <__sfvwrite_r>
   83b98:	2300      	movs	r3, #0
   83b9a:	f8cb 3008 	str.w	r3, [fp, #8]
   83b9e:	f8cb 3004 	str.w	r3, [fp, #4]
   83ba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83ba6:	bf00      	nop

00083ba8 <_vfiprintf_r>:
   83ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83bac:	b0ad      	sub	sp, #180	; 0xb4
   83bae:	461d      	mov	r5, r3
   83bb0:	468b      	mov	fp, r1
   83bb2:	4690      	mov	r8, r2
   83bb4:	9307      	str	r3, [sp, #28]
   83bb6:	9006      	str	r0, [sp, #24]
   83bb8:	b118      	cbz	r0, 83bc2 <_vfiprintf_r+0x1a>
   83bba:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83bbc:	2b00      	cmp	r3, #0
   83bbe:	f000 80f3 	beq.w	83da8 <_vfiprintf_r+0x200>
   83bc2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   83bc6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   83bca:	07df      	lsls	r7, r3, #31
   83bcc:	b281      	uxth	r1, r0
   83bce:	d402      	bmi.n	83bd6 <_vfiprintf_r+0x2e>
   83bd0:	058e      	lsls	r6, r1, #22
   83bd2:	f140 80fc 	bpl.w	83dce <_vfiprintf_r+0x226>
   83bd6:	048c      	lsls	r4, r1, #18
   83bd8:	d40a      	bmi.n	83bf0 <_vfiprintf_r+0x48>
   83bda:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   83bde:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   83be2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83be6:	f8ab 100c 	strh.w	r1, [fp, #12]
   83bea:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   83bee:	b289      	uxth	r1, r1
   83bf0:	0708      	lsls	r0, r1, #28
   83bf2:	f140 80b3 	bpl.w	83d5c <_vfiprintf_r+0x1b4>
   83bf6:	f8db 3010 	ldr.w	r3, [fp, #16]
   83bfa:	2b00      	cmp	r3, #0
   83bfc:	f000 80ae 	beq.w	83d5c <_vfiprintf_r+0x1b4>
   83c00:	f001 031a 	and.w	r3, r1, #26
   83c04:	2b0a      	cmp	r3, #10
   83c06:	f000 80b5 	beq.w	83d74 <_vfiprintf_r+0x1cc>
   83c0a:	2300      	movs	r3, #0
   83c0c:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   83c10:	46d1      	mov	r9, sl
   83c12:	930b      	str	r3, [sp, #44]	; 0x2c
   83c14:	9303      	str	r3, [sp, #12]
   83c16:	9311      	str	r3, [sp, #68]	; 0x44
   83c18:	9310      	str	r3, [sp, #64]	; 0x40
   83c1a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   83c1e:	f8cd b010 	str.w	fp, [sp, #16]
   83c22:	f898 3000 	ldrb.w	r3, [r8]
   83c26:	4644      	mov	r4, r8
   83c28:	b1fb      	cbz	r3, 83c6a <_vfiprintf_r+0xc2>
   83c2a:	2b25      	cmp	r3, #37	; 0x25
   83c2c:	d102      	bne.n	83c34 <_vfiprintf_r+0x8c>
   83c2e:	e01c      	b.n	83c6a <_vfiprintf_r+0xc2>
   83c30:	2b25      	cmp	r3, #37	; 0x25
   83c32:	d003      	beq.n	83c3c <_vfiprintf_r+0x94>
   83c34:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   83c38:	2b00      	cmp	r3, #0
   83c3a:	d1f9      	bne.n	83c30 <_vfiprintf_r+0x88>
   83c3c:	eba4 0508 	sub.w	r5, r4, r8
   83c40:	b19d      	cbz	r5, 83c6a <_vfiprintf_r+0xc2>
   83c42:	9b10      	ldr	r3, [sp, #64]	; 0x40
   83c44:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83c46:	3301      	adds	r3, #1
   83c48:	442a      	add	r2, r5
   83c4a:	2b07      	cmp	r3, #7
   83c4c:	f8c9 8000 	str.w	r8, [r9]
   83c50:	f8c9 5004 	str.w	r5, [r9, #4]
   83c54:	9211      	str	r2, [sp, #68]	; 0x44
   83c56:	9310      	str	r3, [sp, #64]	; 0x40
   83c58:	dd7a      	ble.n	83d50 <_vfiprintf_r+0x1a8>
   83c5a:	2a00      	cmp	r2, #0
   83c5c:	f040 84b5 	bne.w	845ca <_vfiprintf_r+0xa22>
   83c60:	46d1      	mov	r9, sl
   83c62:	9b03      	ldr	r3, [sp, #12]
   83c64:	9210      	str	r2, [sp, #64]	; 0x40
   83c66:	442b      	add	r3, r5
   83c68:	9303      	str	r3, [sp, #12]
   83c6a:	7823      	ldrb	r3, [r4, #0]
   83c6c:	2b00      	cmp	r3, #0
   83c6e:	f000 83e5 	beq.w	8443c <_vfiprintf_r+0x894>
   83c72:	2000      	movs	r0, #0
   83c74:	f04f 0300 	mov.w	r3, #0
   83c78:	f104 0801 	add.w	r8, r4, #1
   83c7c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   83c80:	7862      	ldrb	r2, [r4, #1]
   83c82:	4606      	mov	r6, r0
   83c84:	4605      	mov	r5, r0
   83c86:	4603      	mov	r3, r0
   83c88:	f04f 34ff 	mov.w	r4, #4294967295
   83c8c:	f108 0801 	add.w	r8, r8, #1
   83c90:	f1a2 0120 	sub.w	r1, r2, #32
   83c94:	2958      	cmp	r1, #88	; 0x58
   83c96:	f200 82d9 	bhi.w	8424c <_vfiprintf_r+0x6a4>
   83c9a:	e8df f011 	tbh	[pc, r1, lsl #1]
   83c9e:	0228      	.short	0x0228
   83ca0:	02d702d7 	.word	0x02d702d7
   83ca4:	02d70230 	.word	0x02d70230
   83ca8:	02d702d7 	.word	0x02d702d7
   83cac:	02d702d7 	.word	0x02d702d7
   83cb0:	00a002d7 	.word	0x00a002d7
   83cb4:	02d70288 	.word	0x02d70288
   83cb8:	02b800a8 	.word	0x02b800a8
   83cbc:	01a602d7 	.word	0x01a602d7
   83cc0:	01ab01ab 	.word	0x01ab01ab
   83cc4:	01ab01ab 	.word	0x01ab01ab
   83cc8:	01ab01ab 	.word	0x01ab01ab
   83ccc:	01ab01ab 	.word	0x01ab01ab
   83cd0:	02d701ab 	.word	0x02d701ab
   83cd4:	02d702d7 	.word	0x02d702d7
   83cd8:	02d702d7 	.word	0x02d702d7
   83cdc:	02d702d7 	.word	0x02d702d7
   83ce0:	02d702d7 	.word	0x02d702d7
   83ce4:	01b902d7 	.word	0x01b902d7
   83ce8:	02d702d7 	.word	0x02d702d7
   83cec:	02d702d7 	.word	0x02d702d7
   83cf0:	02d702d7 	.word	0x02d702d7
   83cf4:	02d702d7 	.word	0x02d702d7
   83cf8:	02d702d7 	.word	0x02d702d7
   83cfc:	02d7019e 	.word	0x02d7019e
   83d00:	02d702d7 	.word	0x02d702d7
   83d04:	02d702d7 	.word	0x02d702d7
   83d08:	02d701a2 	.word	0x02d701a2
   83d0c:	025a02d7 	.word	0x025a02d7
   83d10:	02d702d7 	.word	0x02d702d7
   83d14:	02d702d7 	.word	0x02d702d7
   83d18:	02d702d7 	.word	0x02d702d7
   83d1c:	02d702d7 	.word	0x02d702d7
   83d20:	02d702d7 	.word	0x02d702d7
   83d24:	02220261 	.word	0x02220261
   83d28:	02d702d7 	.word	0x02d702d7
   83d2c:	027602d7 	.word	0x027602d7
   83d30:	02d70222 	.word	0x02d70222
   83d34:	027b02d7 	.word	0x027b02d7
   83d38:	01fc02d7 	.word	0x01fc02d7
   83d3c:	02100189 	.word	0x02100189
   83d40:	02d702d2 	.word	0x02d702d2
   83d44:	02d70295 	.word	0x02d70295
   83d48:	02d700ad 	.word	0x02d700ad
   83d4c:	023502d7 	.word	0x023502d7
   83d50:	f109 0908 	add.w	r9, r9, #8
   83d54:	9b03      	ldr	r3, [sp, #12]
   83d56:	442b      	add	r3, r5
   83d58:	9303      	str	r3, [sp, #12]
   83d5a:	e786      	b.n	83c6a <_vfiprintf_r+0xc2>
   83d5c:	4659      	mov	r1, fp
   83d5e:	9806      	ldr	r0, [sp, #24]
   83d60:	f000 fe02 	bl	84968 <__swsetup_r>
   83d64:	bb18      	cbnz	r0, 83dae <_vfiprintf_r+0x206>
   83d66:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   83d6a:	f001 031a 	and.w	r3, r1, #26
   83d6e:	2b0a      	cmp	r3, #10
   83d70:	f47f af4b 	bne.w	83c0a <_vfiprintf_r+0x62>
   83d74:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   83d78:	2b00      	cmp	r3, #0
   83d7a:	f6ff af46 	blt.w	83c0a <_vfiprintf_r+0x62>
   83d7e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   83d82:	07db      	lsls	r3, r3, #31
   83d84:	d405      	bmi.n	83d92 <_vfiprintf_r+0x1ea>
   83d86:	058f      	lsls	r7, r1, #22
   83d88:	d403      	bmi.n	83d92 <_vfiprintf_r+0x1ea>
   83d8a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   83d8e:	f002 fad9 	bl	86344 <__retarget_lock_release_recursive>
   83d92:	462b      	mov	r3, r5
   83d94:	4642      	mov	r2, r8
   83d96:	4659      	mov	r1, fp
   83d98:	9806      	ldr	r0, [sp, #24]
   83d9a:	f000 fd49 	bl	84830 <__sbprintf>
   83d9e:	9003      	str	r0, [sp, #12]
   83da0:	9803      	ldr	r0, [sp, #12]
   83da2:	b02d      	add	sp, #180	; 0xb4
   83da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83da8:	f001 fefc 	bl	85ba4 <__sinit>
   83dac:	e709      	b.n	83bc2 <_vfiprintf_r+0x1a>
   83dae:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   83db2:	07d9      	lsls	r1, r3, #31
   83db4:	d404      	bmi.n	83dc0 <_vfiprintf_r+0x218>
   83db6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   83dba:	059a      	lsls	r2, r3, #22
   83dbc:	f140 84ae 	bpl.w	8471c <_vfiprintf_r+0xb74>
   83dc0:	f04f 33ff 	mov.w	r3, #4294967295
   83dc4:	9303      	str	r3, [sp, #12]
   83dc6:	9803      	ldr	r0, [sp, #12]
   83dc8:	b02d      	add	sp, #180	; 0xb4
   83dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83dce:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   83dd2:	f002 fab5 	bl	86340 <__retarget_lock_acquire_recursive>
   83dd6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   83dda:	b281      	uxth	r1, r0
   83ddc:	e6fb      	b.n	83bd6 <_vfiprintf_r+0x2e>
   83dde:	9907      	ldr	r1, [sp, #28]
   83de0:	460a      	mov	r2, r1
   83de2:	680d      	ldr	r5, [r1, #0]
   83de4:	3204      	adds	r2, #4
   83de6:	2d00      	cmp	r5, #0
   83de8:	9207      	str	r2, [sp, #28]
   83dea:	da02      	bge.n	83df2 <_vfiprintf_r+0x24a>
   83dec:	426d      	negs	r5, r5
   83dee:	f043 0304 	orr.w	r3, r3, #4
   83df2:	f898 2000 	ldrb.w	r2, [r8]
   83df6:	e749      	b.n	83c8c <_vfiprintf_r+0xe4>
   83df8:	9508      	str	r5, [sp, #32]
   83dfa:	069e      	lsls	r6, r3, #26
   83dfc:	f100 845a 	bmi.w	846b4 <_vfiprintf_r+0xb0c>
   83e00:	9907      	ldr	r1, [sp, #28]
   83e02:	06dd      	lsls	r5, r3, #27
   83e04:	460a      	mov	r2, r1
   83e06:	f100 83ef 	bmi.w	845e8 <_vfiprintf_r+0xa40>
   83e0a:	0658      	lsls	r0, r3, #25
   83e0c:	f140 83ec 	bpl.w	845e8 <_vfiprintf_r+0xa40>
   83e10:	2700      	movs	r7, #0
   83e12:	2201      	movs	r2, #1
   83e14:	880e      	ldrh	r6, [r1, #0]
   83e16:	3104      	adds	r1, #4
   83e18:	9107      	str	r1, [sp, #28]
   83e1a:	f04f 0100 	mov.w	r1, #0
   83e1e:	2500      	movs	r5, #0
   83e20:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   83e24:	1c61      	adds	r1, r4, #1
   83e26:	f000 8117 	beq.w	84058 <_vfiprintf_r+0x4b0>
   83e2a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   83e2e:	9102      	str	r1, [sp, #8]
   83e30:	ea56 0107 	orrs.w	r1, r6, r7
   83e34:	f040 8115 	bne.w	84062 <_vfiprintf_r+0x4ba>
   83e38:	2c00      	cmp	r4, #0
   83e3a:	f040 835b 	bne.w	844f4 <_vfiprintf_r+0x94c>
   83e3e:	2a00      	cmp	r2, #0
   83e40:	f040 83b6 	bne.w	845b0 <_vfiprintf_r+0xa08>
   83e44:	f013 0301 	ands.w	r3, r3, #1
   83e48:	9305      	str	r3, [sp, #20]
   83e4a:	f000 8455 	beq.w	846f8 <_vfiprintf_r+0xb50>
   83e4e:	2330      	movs	r3, #48	; 0x30
   83e50:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   83e54:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   83e58:	9b05      	ldr	r3, [sp, #20]
   83e5a:	42a3      	cmp	r3, r4
   83e5c:	bfb8      	it	lt
   83e5e:	4623      	movlt	r3, r4
   83e60:	9301      	str	r3, [sp, #4]
   83e62:	b10d      	cbz	r5, 83e68 <_vfiprintf_r+0x2c0>
   83e64:	3301      	adds	r3, #1
   83e66:	9301      	str	r3, [sp, #4]
   83e68:	9b02      	ldr	r3, [sp, #8]
   83e6a:	f013 0302 	ands.w	r3, r3, #2
   83e6e:	9309      	str	r3, [sp, #36]	; 0x24
   83e70:	d002      	beq.n	83e78 <_vfiprintf_r+0x2d0>
   83e72:	9b01      	ldr	r3, [sp, #4]
   83e74:	3302      	adds	r3, #2
   83e76:	9301      	str	r3, [sp, #4]
   83e78:	9b02      	ldr	r3, [sp, #8]
   83e7a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   83e7e:	930a      	str	r3, [sp, #40]	; 0x28
   83e80:	f040 8215 	bne.w	842ae <_vfiprintf_r+0x706>
   83e84:	9b08      	ldr	r3, [sp, #32]
   83e86:	9a01      	ldr	r2, [sp, #4]
   83e88:	1a9d      	subs	r5, r3, r2
   83e8a:	2d00      	cmp	r5, #0
   83e8c:	f340 820f 	ble.w	842ae <_vfiprintf_r+0x706>
   83e90:	2d10      	cmp	r5, #16
   83e92:	f340 8484 	ble.w	8479e <_vfiprintf_r+0xbf6>
   83e96:	9b10      	ldr	r3, [sp, #64]	; 0x40
   83e98:	46ce      	mov	lr, r9
   83e9a:	2710      	movs	r7, #16
   83e9c:	46a1      	mov	r9, r4
   83e9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83ea0:	4ec5      	ldr	r6, [pc, #788]	; (841b8 <_vfiprintf_r+0x610>)
   83ea2:	4619      	mov	r1, r3
   83ea4:	9c06      	ldr	r4, [sp, #24]
   83ea6:	e007      	b.n	83eb8 <_vfiprintf_r+0x310>
   83ea8:	f101 0c02 	add.w	ip, r1, #2
   83eac:	4601      	mov	r1, r0
   83eae:	f10e 0e08 	add.w	lr, lr, #8
   83eb2:	3d10      	subs	r5, #16
   83eb4:	2d10      	cmp	r5, #16
   83eb6:	dd11      	ble.n	83edc <_vfiprintf_r+0x334>
   83eb8:	1c48      	adds	r0, r1, #1
   83eba:	3210      	adds	r2, #16
   83ebc:	2807      	cmp	r0, #7
   83ebe:	9211      	str	r2, [sp, #68]	; 0x44
   83ec0:	e88e 00c0 	stmia.w	lr, {r6, r7}
   83ec4:	9010      	str	r0, [sp, #64]	; 0x40
   83ec6:	ddef      	ble.n	83ea8 <_vfiprintf_r+0x300>
   83ec8:	2a00      	cmp	r2, #0
   83eca:	f040 81d9 	bne.w	84280 <_vfiprintf_r+0x6d8>
   83ece:	3d10      	subs	r5, #16
   83ed0:	2d10      	cmp	r5, #16
   83ed2:	4611      	mov	r1, r2
   83ed4:	f04f 0c01 	mov.w	ip, #1
   83ed8:	46d6      	mov	lr, sl
   83eda:	dced      	bgt.n	83eb8 <_vfiprintf_r+0x310>
   83edc:	464c      	mov	r4, r9
   83ede:	4661      	mov	r1, ip
   83ee0:	46f1      	mov	r9, lr
   83ee2:	442a      	add	r2, r5
   83ee4:	2907      	cmp	r1, #7
   83ee6:	9211      	str	r2, [sp, #68]	; 0x44
   83ee8:	f8c9 6000 	str.w	r6, [r9]
   83eec:	f8c9 5004 	str.w	r5, [r9, #4]
   83ef0:	9110      	str	r1, [sp, #64]	; 0x40
   83ef2:	f300 82eb 	bgt.w	844cc <_vfiprintf_r+0x924>
   83ef6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83efa:	f109 0908 	add.w	r9, r9, #8
   83efe:	1c48      	adds	r0, r1, #1
   83f00:	2d00      	cmp	r5, #0
   83f02:	f040 81dc 	bne.w	842be <_vfiprintf_r+0x716>
   83f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83f08:	2b00      	cmp	r3, #0
   83f0a:	f000 81f6 	beq.w	842fa <_vfiprintf_r+0x752>
   83f0e:	2102      	movs	r1, #2
   83f10:	ab0e      	add	r3, sp, #56	; 0x38
   83f12:	440a      	add	r2, r1
   83f14:	2807      	cmp	r0, #7
   83f16:	9211      	str	r2, [sp, #68]	; 0x44
   83f18:	9010      	str	r0, [sp, #64]	; 0x40
   83f1a:	f8c9 1004 	str.w	r1, [r9, #4]
   83f1e:	f8c9 3000 	str.w	r3, [r9]
   83f22:	f340 81e6 	ble.w	842f2 <_vfiprintf_r+0x74a>
   83f26:	2a00      	cmp	r2, #0
   83f28:	f040 8395 	bne.w	84656 <_vfiprintf_r+0xaae>
   83f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83f2e:	2001      	movs	r0, #1
   83f30:	2b80      	cmp	r3, #128	; 0x80
   83f32:	4611      	mov	r1, r2
   83f34:	46d1      	mov	r9, sl
   83f36:	f040 81e4 	bne.w	84302 <_vfiprintf_r+0x75a>
   83f3a:	9b08      	ldr	r3, [sp, #32]
   83f3c:	9d01      	ldr	r5, [sp, #4]
   83f3e:	1b5e      	subs	r6, r3, r5
   83f40:	2e00      	cmp	r6, #0
   83f42:	f340 81de 	ble.w	84302 <_vfiprintf_r+0x75a>
   83f46:	2e10      	cmp	r6, #16
   83f48:	f340 843c 	ble.w	847c4 <_vfiprintf_r+0xc1c>
   83f4c:	46cc      	mov	ip, r9
   83f4e:	2710      	movs	r7, #16
   83f50:	46a1      	mov	r9, r4
   83f52:	4d9a      	ldr	r5, [pc, #616]	; (841bc <_vfiprintf_r+0x614>)
   83f54:	9c06      	ldr	r4, [sp, #24]
   83f56:	e007      	b.n	83f68 <_vfiprintf_r+0x3c0>
   83f58:	f101 0e02 	add.w	lr, r1, #2
   83f5c:	4601      	mov	r1, r0
   83f5e:	f10c 0c08 	add.w	ip, ip, #8
   83f62:	3e10      	subs	r6, #16
   83f64:	2e10      	cmp	r6, #16
   83f66:	dd11      	ble.n	83f8c <_vfiprintf_r+0x3e4>
   83f68:	1c48      	adds	r0, r1, #1
   83f6a:	3210      	adds	r2, #16
   83f6c:	2807      	cmp	r0, #7
   83f6e:	9211      	str	r2, [sp, #68]	; 0x44
   83f70:	e88c 00a0 	stmia.w	ip, {r5, r7}
   83f74:	9010      	str	r0, [sp, #64]	; 0x40
   83f76:	ddef      	ble.n	83f58 <_vfiprintf_r+0x3b0>
   83f78:	2a00      	cmp	r2, #0
   83f7a:	f040 829b 	bne.w	844b4 <_vfiprintf_r+0x90c>
   83f7e:	3e10      	subs	r6, #16
   83f80:	2e10      	cmp	r6, #16
   83f82:	f04f 0e01 	mov.w	lr, #1
   83f86:	4611      	mov	r1, r2
   83f88:	46d4      	mov	ip, sl
   83f8a:	dced      	bgt.n	83f68 <_vfiprintf_r+0x3c0>
   83f8c:	464c      	mov	r4, r9
   83f8e:	46e1      	mov	r9, ip
   83f90:	4432      	add	r2, r6
   83f92:	f1be 0f07 	cmp.w	lr, #7
   83f96:	9211      	str	r2, [sp, #68]	; 0x44
   83f98:	e889 0060 	stmia.w	r9, {r5, r6}
   83f9c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   83fa0:	f300 8366 	bgt.w	84670 <_vfiprintf_r+0xac8>
   83fa4:	f109 0908 	add.w	r9, r9, #8
   83fa8:	f10e 0001 	add.w	r0, lr, #1
   83fac:	4671      	mov	r1, lr
   83fae:	e1a8      	b.n	84302 <_vfiprintf_r+0x75a>
   83fb0:	9508      	str	r5, [sp, #32]
   83fb2:	f013 0220 	ands.w	r2, r3, #32
   83fb6:	f040 8389 	bne.w	846cc <_vfiprintf_r+0xb24>
   83fba:	f013 0110 	ands.w	r1, r3, #16
   83fbe:	f040 8319 	bne.w	845f4 <_vfiprintf_r+0xa4c>
   83fc2:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   83fc6:	f000 8315 	beq.w	845f4 <_vfiprintf_r+0xa4c>
   83fca:	9807      	ldr	r0, [sp, #28]
   83fcc:	460a      	mov	r2, r1
   83fce:	4601      	mov	r1, r0
   83fd0:	3104      	adds	r1, #4
   83fd2:	8806      	ldrh	r6, [r0, #0]
   83fd4:	2700      	movs	r7, #0
   83fd6:	9107      	str	r1, [sp, #28]
   83fd8:	e71f      	b.n	83e1a <_vfiprintf_r+0x272>
   83fda:	9508      	str	r5, [sp, #32]
   83fdc:	f043 0310 	orr.w	r3, r3, #16
   83fe0:	e7e7      	b.n	83fb2 <_vfiprintf_r+0x40a>
   83fe2:	9508      	str	r5, [sp, #32]
   83fe4:	f043 0310 	orr.w	r3, r3, #16
   83fe8:	e707      	b.n	83dfa <_vfiprintf_r+0x252>
   83fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83fee:	f898 2000 	ldrb.w	r2, [r8]
   83ff2:	e64b      	b.n	83c8c <_vfiprintf_r+0xe4>
   83ff4:	2500      	movs	r5, #0
   83ff6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   83ffa:	f818 2b01 	ldrb.w	r2, [r8], #1
   83ffe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   84002:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   84006:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8400a:	2909      	cmp	r1, #9
   8400c:	d9f5      	bls.n	83ffa <_vfiprintf_r+0x452>
   8400e:	e63f      	b.n	83c90 <_vfiprintf_r+0xe8>
   84010:	9508      	str	r5, [sp, #32]
   84012:	2800      	cmp	r0, #0
   84014:	f040 8402 	bne.w	8481c <_vfiprintf_r+0xc74>
   84018:	f043 0310 	orr.w	r3, r3, #16
   8401c:	069e      	lsls	r6, r3, #26
   8401e:	f100 833d 	bmi.w	8469c <_vfiprintf_r+0xaf4>
   84022:	9907      	ldr	r1, [sp, #28]
   84024:	06dd      	lsls	r5, r3, #27
   84026:	460a      	mov	r2, r1
   84028:	f100 82f0 	bmi.w	8460c <_vfiprintf_r+0xa64>
   8402c:	0658      	lsls	r0, r3, #25
   8402e:	f140 82ed 	bpl.w	8460c <_vfiprintf_r+0xa64>
   84032:	f9b1 6000 	ldrsh.w	r6, [r1]
   84036:	3204      	adds	r2, #4
   84038:	17f7      	asrs	r7, r6, #31
   8403a:	4630      	mov	r0, r6
   8403c:	4639      	mov	r1, r7
   8403e:	9207      	str	r2, [sp, #28]
   84040:	2800      	cmp	r0, #0
   84042:	f171 0200 	sbcs.w	r2, r1, #0
   84046:	f2c0 835a 	blt.w	846fe <_vfiprintf_r+0xb56>
   8404a:	1c61      	adds	r1, r4, #1
   8404c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   84050:	f04f 0201 	mov.w	r2, #1
   84054:	f47f aee9 	bne.w	83e2a <_vfiprintf_r+0x282>
   84058:	ea56 0107 	orrs.w	r1, r6, r7
   8405c:	f000 824b 	beq.w	844f6 <_vfiprintf_r+0x94e>
   84060:	9302      	str	r3, [sp, #8]
   84062:	2a01      	cmp	r2, #1
   84064:	f000 828a 	beq.w	8457c <_vfiprintf_r+0x9d4>
   84068:	2a02      	cmp	r2, #2
   8406a:	f040 825a 	bne.w	84522 <_vfiprintf_r+0x97a>
   8406e:	46d3      	mov	fp, sl
   84070:	980b      	ldr	r0, [sp, #44]	; 0x2c
   84072:	0933      	lsrs	r3, r6, #4
   84074:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   84078:	0939      	lsrs	r1, r7, #4
   8407a:	f006 020f 	and.w	r2, r6, #15
   8407e:	460f      	mov	r7, r1
   84080:	461e      	mov	r6, r3
   84082:	5c83      	ldrb	r3, [r0, r2]
   84084:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   84088:	ea56 0307 	orrs.w	r3, r6, r7
   8408c:	d1f1      	bne.n	84072 <_vfiprintf_r+0x4ca>
   8408e:	ebaa 030b 	sub.w	r3, sl, fp
   84092:	9305      	str	r3, [sp, #20]
   84094:	e6e0      	b.n	83e58 <_vfiprintf_r+0x2b0>
   84096:	2800      	cmp	r0, #0
   84098:	f040 83bd 	bne.w	84816 <_vfiprintf_r+0xc6e>
   8409c:	0699      	lsls	r1, r3, #26
   8409e:	f100 8359 	bmi.w	84754 <_vfiprintf_r+0xbac>
   840a2:	06da      	lsls	r2, r3, #27
   840a4:	f100 80e5 	bmi.w	84272 <_vfiprintf_r+0x6ca>
   840a8:	065b      	lsls	r3, r3, #25
   840aa:	f140 80e2 	bpl.w	84272 <_vfiprintf_r+0x6ca>
   840ae:	9a07      	ldr	r2, [sp, #28]
   840b0:	6813      	ldr	r3, [r2, #0]
   840b2:	3204      	adds	r2, #4
   840b4:	9207      	str	r2, [sp, #28]
   840b6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   840ba:	801a      	strh	r2, [r3, #0]
   840bc:	e5b1      	b.n	83c22 <_vfiprintf_r+0x7a>
   840be:	2278      	movs	r2, #120	; 0x78
   840c0:	2130      	movs	r1, #48	; 0x30
   840c2:	9508      	str	r5, [sp, #32]
   840c4:	9d07      	ldr	r5, [sp, #28]
   840c6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   840ca:	1d2a      	adds	r2, r5, #4
   840cc:	9207      	str	r2, [sp, #28]
   840ce:	4a3c      	ldr	r2, [pc, #240]	; (841c0 <_vfiprintf_r+0x618>)
   840d0:	682e      	ldr	r6, [r5, #0]
   840d2:	920b      	str	r2, [sp, #44]	; 0x2c
   840d4:	f043 0302 	orr.w	r3, r3, #2
   840d8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   840dc:	2700      	movs	r7, #0
   840de:	2202      	movs	r2, #2
   840e0:	e69b      	b.n	83e1a <_vfiprintf_r+0x272>
   840e2:	9508      	str	r5, [sp, #32]
   840e4:	2800      	cmp	r0, #0
   840e6:	d099      	beq.n	8401c <_vfiprintf_r+0x474>
   840e8:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   840ec:	e796      	b.n	8401c <_vfiprintf_r+0x474>
   840ee:	f898 2000 	ldrb.w	r2, [r8]
   840f2:	2e00      	cmp	r6, #0
   840f4:	f47f adca 	bne.w	83c8c <_vfiprintf_r+0xe4>
   840f8:	2001      	movs	r0, #1
   840fa:	2620      	movs	r6, #32
   840fc:	e5c6      	b.n	83c8c <_vfiprintf_r+0xe4>
   840fe:	f043 0301 	orr.w	r3, r3, #1
   84102:	f898 2000 	ldrb.w	r2, [r8]
   84106:	e5c1      	b.n	83c8c <_vfiprintf_r+0xe4>
   84108:	9508      	str	r5, [sp, #32]
   8410a:	2800      	cmp	r0, #0
   8410c:	f040 8380 	bne.w	84810 <_vfiprintf_r+0xc68>
   84110:	492b      	ldr	r1, [pc, #172]	; (841c0 <_vfiprintf_r+0x618>)
   84112:	910b      	str	r1, [sp, #44]	; 0x2c
   84114:	069f      	lsls	r7, r3, #26
   84116:	f100 82e5 	bmi.w	846e4 <_vfiprintf_r+0xb3c>
   8411a:	9807      	ldr	r0, [sp, #28]
   8411c:	06de      	lsls	r6, r3, #27
   8411e:	4601      	mov	r1, r0
   84120:	f100 826f 	bmi.w	84602 <_vfiprintf_r+0xa5a>
   84124:	065d      	lsls	r5, r3, #25
   84126:	f140 826c 	bpl.w	84602 <_vfiprintf_r+0xa5a>
   8412a:	2700      	movs	r7, #0
   8412c:	3104      	adds	r1, #4
   8412e:	8806      	ldrh	r6, [r0, #0]
   84130:	9107      	str	r1, [sp, #28]
   84132:	07d8      	lsls	r0, r3, #31
   84134:	f140 8220 	bpl.w	84578 <_vfiprintf_r+0x9d0>
   84138:	ea56 0107 	orrs.w	r1, r6, r7
   8413c:	f000 821c 	beq.w	84578 <_vfiprintf_r+0x9d0>
   84140:	2130      	movs	r1, #48	; 0x30
   84142:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   84146:	f043 0302 	orr.w	r3, r3, #2
   8414a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   8414e:	2202      	movs	r2, #2
   84150:	e663      	b.n	83e1a <_vfiprintf_r+0x272>
   84152:	9508      	str	r5, [sp, #32]
   84154:	2800      	cmp	r0, #0
   84156:	f040 8355 	bne.w	84804 <_vfiprintf_r+0xc5c>
   8415a:	491a      	ldr	r1, [pc, #104]	; (841c4 <_vfiprintf_r+0x61c>)
   8415c:	910b      	str	r1, [sp, #44]	; 0x2c
   8415e:	e7d9      	b.n	84114 <_vfiprintf_r+0x56c>
   84160:	2201      	movs	r2, #1
   84162:	9807      	ldr	r0, [sp, #28]
   84164:	4611      	mov	r1, r2
   84166:	9201      	str	r2, [sp, #4]
   84168:	6802      	ldr	r2, [r0, #0]
   8416a:	f04f 0400 	mov.w	r4, #0
   8416e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   84172:	4602      	mov	r2, r0
   84174:	3204      	adds	r2, #4
   84176:	9508      	str	r5, [sp, #32]
   84178:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   8417c:	9105      	str	r1, [sp, #20]
   8417e:	9207      	str	r2, [sp, #28]
   84180:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   84184:	9302      	str	r3, [sp, #8]
   84186:	2400      	movs	r4, #0
   84188:	e66e      	b.n	83e68 <_vfiprintf_r+0x2c0>
   8418a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8418e:	f898 2000 	ldrb.w	r2, [r8]
   84192:	e57b      	b.n	83c8c <_vfiprintf_r+0xe4>
   84194:	f898 2000 	ldrb.w	r2, [r8]
   84198:	2a6c      	cmp	r2, #108	; 0x6c
   8419a:	bf03      	ittte	eq
   8419c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   841a0:	f043 0320 	orreq.w	r3, r3, #32
   841a4:	f108 0801 	addeq.w	r8, r8, #1
   841a8:	f043 0310 	orrne.w	r3, r3, #16
   841ac:	e56e      	b.n	83c8c <_vfiprintf_r+0xe4>
   841ae:	f898 2000 	ldrb.w	r2, [r8]
   841b2:	2001      	movs	r0, #1
   841b4:	262b      	movs	r6, #43	; 0x2b
   841b6:	e569      	b.n	83c8c <_vfiprintf_r+0xe4>
   841b8:	00088aa4 	.word	0x00088aa4
   841bc:	00088ab4 	.word	0x00088ab4
   841c0:	00088a64 	.word	0x00088a64
   841c4:	00088a50 	.word	0x00088a50
   841c8:	f04f 0200 	mov.w	r2, #0
   841cc:	9907      	ldr	r1, [sp, #28]
   841ce:	9508      	str	r5, [sp, #32]
   841d0:	f8d1 b000 	ldr.w	fp, [r1]
   841d4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   841d8:	1d0d      	adds	r5, r1, #4
   841da:	f1bb 0f00 	cmp.w	fp, #0
   841de:	f000 82e4 	beq.w	847aa <_vfiprintf_r+0xc02>
   841e2:	1c67      	adds	r7, r4, #1
   841e4:	f000 82c3 	beq.w	8476e <_vfiprintf_r+0xbc6>
   841e8:	4622      	mov	r2, r4
   841ea:	2100      	movs	r1, #0
   841ec:	4658      	mov	r0, fp
   841ee:	9301      	str	r3, [sp, #4]
   841f0:	f002 fbe2 	bl	869b8 <memchr>
   841f4:	9b01      	ldr	r3, [sp, #4]
   841f6:	2800      	cmp	r0, #0
   841f8:	f000 82e8 	beq.w	847cc <_vfiprintf_r+0xc24>
   841fc:	eba0 020b 	sub.w	r2, r0, fp
   84200:	9507      	str	r5, [sp, #28]
   84202:	9205      	str	r2, [sp, #20]
   84204:	9302      	str	r3, [sp, #8]
   84206:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8420a:	2400      	movs	r4, #0
   8420c:	e624      	b.n	83e58 <_vfiprintf_r+0x2b0>
   8420e:	f898 2000 	ldrb.w	r2, [r8]
   84212:	f108 0701 	add.w	r7, r8, #1
   84216:	2a2a      	cmp	r2, #42	; 0x2a
   84218:	f000 82e9 	beq.w	847ee <_vfiprintf_r+0xc46>
   8421c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   84220:	2909      	cmp	r1, #9
   84222:	46b8      	mov	r8, r7
   84224:	f04f 0400 	mov.w	r4, #0
   84228:	f63f ad32 	bhi.w	83c90 <_vfiprintf_r+0xe8>
   8422c:	f818 2b01 	ldrb.w	r2, [r8], #1
   84230:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84234:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   84238:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8423c:	2909      	cmp	r1, #9
   8423e:	d9f5      	bls.n	8422c <_vfiprintf_r+0x684>
   84240:	e526      	b.n	83c90 <_vfiprintf_r+0xe8>
   84242:	f043 0320 	orr.w	r3, r3, #32
   84246:	f898 2000 	ldrb.w	r2, [r8]
   8424a:	e51f      	b.n	83c8c <_vfiprintf_r+0xe4>
   8424c:	9508      	str	r5, [sp, #32]
   8424e:	2800      	cmp	r0, #0
   84250:	f040 82db 	bne.w	8480a <_vfiprintf_r+0xc62>
   84254:	2a00      	cmp	r2, #0
   84256:	f000 80f1 	beq.w	8443c <_vfiprintf_r+0x894>
   8425a:	2101      	movs	r1, #1
   8425c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   84260:	f04f 0200 	mov.w	r2, #0
   84264:	9101      	str	r1, [sp, #4]
   84266:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   8426a:	9105      	str	r1, [sp, #20]
   8426c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   84270:	e788      	b.n	84184 <_vfiprintf_r+0x5dc>
   84272:	9a07      	ldr	r2, [sp, #28]
   84274:	6813      	ldr	r3, [r2, #0]
   84276:	3204      	adds	r2, #4
   84278:	9207      	str	r2, [sp, #28]
   8427a:	9a03      	ldr	r2, [sp, #12]
   8427c:	601a      	str	r2, [r3, #0]
   8427e:	e4d0      	b.n	83c22 <_vfiprintf_r+0x7a>
   84280:	aa0f      	add	r2, sp, #60	; 0x3c
   84282:	9904      	ldr	r1, [sp, #16]
   84284:	4620      	mov	r0, r4
   84286:	f7ff fc4f 	bl	83b28 <__sprint_r.part.0>
   8428a:	2800      	cmp	r0, #0
   8428c:	f040 8143 	bne.w	84516 <_vfiprintf_r+0x96e>
   84290:	9910      	ldr	r1, [sp, #64]	; 0x40
   84292:	46d6      	mov	lr, sl
   84294:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84296:	f101 0c01 	add.w	ip, r1, #1
   8429a:	e60a      	b.n	83eb2 <_vfiprintf_r+0x30a>
   8429c:	aa0f      	add	r2, sp, #60	; 0x3c
   8429e:	9904      	ldr	r1, [sp, #16]
   842a0:	9806      	ldr	r0, [sp, #24]
   842a2:	f7ff fc41 	bl	83b28 <__sprint_r.part.0>
   842a6:	2800      	cmp	r0, #0
   842a8:	f040 8135 	bne.w	84516 <_vfiprintf_r+0x96e>
   842ac:	46d1      	mov	r9, sl
   842ae:	9910      	ldr	r1, [sp, #64]	; 0x40
   842b0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   842b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   842b6:	1c48      	adds	r0, r1, #1
   842b8:	2d00      	cmp	r5, #0
   842ba:	f43f ae24 	beq.w	83f06 <_vfiprintf_r+0x35e>
   842be:	2101      	movs	r1, #1
   842c0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   842c4:	440a      	add	r2, r1
   842c6:	2807      	cmp	r0, #7
   842c8:	9211      	str	r2, [sp, #68]	; 0x44
   842ca:	9010      	str	r0, [sp, #64]	; 0x40
   842cc:	f8c9 1004 	str.w	r1, [r9, #4]
   842d0:	f8c9 5000 	str.w	r5, [r9]
   842d4:	f340 8109 	ble.w	844ea <_vfiprintf_r+0x942>
   842d8:	2a00      	cmp	r2, #0
   842da:	f040 81af 	bne.w	8463c <_vfiprintf_r+0xa94>
   842de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   842e0:	2b00      	cmp	r3, #0
   842e2:	f43f ae23 	beq.w	83f2c <_vfiprintf_r+0x384>
   842e6:	2202      	movs	r2, #2
   842e8:	4608      	mov	r0, r1
   842ea:	46d1      	mov	r9, sl
   842ec:	ab0e      	add	r3, sp, #56	; 0x38
   842ee:	921d      	str	r2, [sp, #116]	; 0x74
   842f0:	931c      	str	r3, [sp, #112]	; 0x70
   842f2:	4601      	mov	r1, r0
   842f4:	f109 0908 	add.w	r9, r9, #8
   842f8:	3001      	adds	r0, #1
   842fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   842fc:	2b80      	cmp	r3, #128	; 0x80
   842fe:	f43f ae1c 	beq.w	83f3a <_vfiprintf_r+0x392>
   84302:	9b05      	ldr	r3, [sp, #20]
   84304:	1ae4      	subs	r4, r4, r3
   84306:	2c00      	cmp	r4, #0
   84308:	dd2f      	ble.n	8436a <_vfiprintf_r+0x7c2>
   8430a:	2c10      	cmp	r4, #16
   8430c:	f340 8220 	ble.w	84750 <_vfiprintf_r+0xba8>
   84310:	46ce      	mov	lr, r9
   84312:	2610      	movs	r6, #16
   84314:	4db2      	ldr	r5, [pc, #712]	; (845e0 <_vfiprintf_r+0xa38>)
   84316:	9f06      	ldr	r7, [sp, #24]
   84318:	f8dd 9010 	ldr.w	r9, [sp, #16]
   8431c:	e006      	b.n	8432c <_vfiprintf_r+0x784>
   8431e:	1c88      	adds	r0, r1, #2
   84320:	4619      	mov	r1, r3
   84322:	f10e 0e08 	add.w	lr, lr, #8
   84326:	3c10      	subs	r4, #16
   84328:	2c10      	cmp	r4, #16
   8432a:	dd10      	ble.n	8434e <_vfiprintf_r+0x7a6>
   8432c:	1c4b      	adds	r3, r1, #1
   8432e:	3210      	adds	r2, #16
   84330:	2b07      	cmp	r3, #7
   84332:	9211      	str	r2, [sp, #68]	; 0x44
   84334:	e88e 0060 	stmia.w	lr, {r5, r6}
   84338:	9310      	str	r3, [sp, #64]	; 0x40
   8433a:	ddf0      	ble.n	8431e <_vfiprintf_r+0x776>
   8433c:	2a00      	cmp	r2, #0
   8433e:	d165      	bne.n	8440c <_vfiprintf_r+0x864>
   84340:	3c10      	subs	r4, #16
   84342:	2c10      	cmp	r4, #16
   84344:	f04f 0001 	mov.w	r0, #1
   84348:	4611      	mov	r1, r2
   8434a:	46d6      	mov	lr, sl
   8434c:	dcee      	bgt.n	8432c <_vfiprintf_r+0x784>
   8434e:	46f1      	mov	r9, lr
   84350:	4422      	add	r2, r4
   84352:	2807      	cmp	r0, #7
   84354:	9211      	str	r2, [sp, #68]	; 0x44
   84356:	f8c9 5000 	str.w	r5, [r9]
   8435a:	f8c9 4004 	str.w	r4, [r9, #4]
   8435e:	9010      	str	r0, [sp, #64]	; 0x40
   84360:	f300 8085 	bgt.w	8446e <_vfiprintf_r+0x8c6>
   84364:	f109 0908 	add.w	r9, r9, #8
   84368:	3001      	adds	r0, #1
   8436a:	9905      	ldr	r1, [sp, #20]
   8436c:	2807      	cmp	r0, #7
   8436e:	440a      	add	r2, r1
   84370:	9211      	str	r2, [sp, #68]	; 0x44
   84372:	f8c9 b000 	str.w	fp, [r9]
   84376:	f8c9 1004 	str.w	r1, [r9, #4]
   8437a:	9010      	str	r0, [sp, #64]	; 0x40
   8437c:	f340 8082 	ble.w	84484 <_vfiprintf_r+0x8dc>
   84380:	2a00      	cmp	r2, #0
   84382:	f040 8118 	bne.w	845b6 <_vfiprintf_r+0xa0e>
   84386:	9b02      	ldr	r3, [sp, #8]
   84388:	9210      	str	r2, [sp, #64]	; 0x40
   8438a:	0758      	lsls	r0, r3, #29
   8438c:	d535      	bpl.n	843fa <_vfiprintf_r+0x852>
   8438e:	9b08      	ldr	r3, [sp, #32]
   84390:	9901      	ldr	r1, [sp, #4]
   84392:	1a5c      	subs	r4, r3, r1
   84394:	2c00      	cmp	r4, #0
   84396:	f340 80e7 	ble.w	84568 <_vfiprintf_r+0x9c0>
   8439a:	46d1      	mov	r9, sl
   8439c:	2c10      	cmp	r4, #16
   8439e:	f340 820d 	ble.w	847bc <_vfiprintf_r+0xc14>
   843a2:	2510      	movs	r5, #16
   843a4:	9910      	ldr	r1, [sp, #64]	; 0x40
   843a6:	4e8f      	ldr	r6, [pc, #572]	; (845e4 <_vfiprintf_r+0xa3c>)
   843a8:	9f06      	ldr	r7, [sp, #24]
   843aa:	f8dd b010 	ldr.w	fp, [sp, #16]
   843ae:	e006      	b.n	843be <_vfiprintf_r+0x816>
   843b0:	1c88      	adds	r0, r1, #2
   843b2:	4619      	mov	r1, r3
   843b4:	f109 0908 	add.w	r9, r9, #8
   843b8:	3c10      	subs	r4, #16
   843ba:	2c10      	cmp	r4, #16
   843bc:	dd11      	ble.n	843e2 <_vfiprintf_r+0x83a>
   843be:	1c4b      	adds	r3, r1, #1
   843c0:	3210      	adds	r2, #16
   843c2:	2b07      	cmp	r3, #7
   843c4:	9211      	str	r2, [sp, #68]	; 0x44
   843c6:	f8c9 6000 	str.w	r6, [r9]
   843ca:	f8c9 5004 	str.w	r5, [r9, #4]
   843ce:	9310      	str	r3, [sp, #64]	; 0x40
   843d0:	ddee      	ble.n	843b0 <_vfiprintf_r+0x808>
   843d2:	bb42      	cbnz	r2, 84426 <_vfiprintf_r+0x87e>
   843d4:	3c10      	subs	r4, #16
   843d6:	2c10      	cmp	r4, #16
   843d8:	f04f 0001 	mov.w	r0, #1
   843dc:	4611      	mov	r1, r2
   843de:	46d1      	mov	r9, sl
   843e0:	dced      	bgt.n	843be <_vfiprintf_r+0x816>
   843e2:	4422      	add	r2, r4
   843e4:	2807      	cmp	r0, #7
   843e6:	9211      	str	r2, [sp, #68]	; 0x44
   843e8:	f8c9 6000 	str.w	r6, [r9]
   843ec:	f8c9 4004 	str.w	r4, [r9, #4]
   843f0:	9010      	str	r0, [sp, #64]	; 0x40
   843f2:	dd51      	ble.n	84498 <_vfiprintf_r+0x8f0>
   843f4:	2a00      	cmp	r2, #0
   843f6:	f040 819a 	bne.w	8472e <_vfiprintf_r+0xb86>
   843fa:	9b03      	ldr	r3, [sp, #12]
   843fc:	9a08      	ldr	r2, [sp, #32]
   843fe:	9901      	ldr	r1, [sp, #4]
   84400:	428a      	cmp	r2, r1
   84402:	bfac      	ite	ge
   84404:	189b      	addge	r3, r3, r2
   84406:	185b      	addlt	r3, r3, r1
   84408:	9303      	str	r3, [sp, #12]
   8440a:	e04e      	b.n	844aa <_vfiprintf_r+0x902>
   8440c:	aa0f      	add	r2, sp, #60	; 0x3c
   8440e:	4649      	mov	r1, r9
   84410:	4638      	mov	r0, r7
   84412:	f7ff fb89 	bl	83b28 <__sprint_r.part.0>
   84416:	2800      	cmp	r0, #0
   84418:	f040 813e 	bne.w	84698 <_vfiprintf_r+0xaf0>
   8441c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8441e:	46d6      	mov	lr, sl
   84420:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84422:	1c48      	adds	r0, r1, #1
   84424:	e77f      	b.n	84326 <_vfiprintf_r+0x77e>
   84426:	aa0f      	add	r2, sp, #60	; 0x3c
   84428:	4659      	mov	r1, fp
   8442a:	4638      	mov	r0, r7
   8442c:	f7ff fb7c 	bl	83b28 <__sprint_r.part.0>
   84430:	b960      	cbnz	r0, 8444c <_vfiprintf_r+0x8a4>
   84432:	9910      	ldr	r1, [sp, #64]	; 0x40
   84434:	46d1      	mov	r9, sl
   84436:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84438:	1c48      	adds	r0, r1, #1
   8443a:	e7bd      	b.n	843b8 <_vfiprintf_r+0x810>
   8443c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8443e:	f8dd b010 	ldr.w	fp, [sp, #16]
   84442:	2b00      	cmp	r3, #0
   84444:	f040 81ca 	bne.w	847dc <_vfiprintf_r+0xc34>
   84448:	2300      	movs	r3, #0
   8444a:	9310      	str	r3, [sp, #64]	; 0x40
   8444c:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   84450:	f013 0f01 	tst.w	r3, #1
   84454:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   84458:	d102      	bne.n	84460 <_vfiprintf_r+0x8b8>
   8445a:	059a      	lsls	r2, r3, #22
   8445c:	f140 80dd 	bpl.w	8461a <_vfiprintf_r+0xa72>
   84460:	065b      	lsls	r3, r3, #25
   84462:	f53f acad 	bmi.w	83dc0 <_vfiprintf_r+0x218>
   84466:	9803      	ldr	r0, [sp, #12]
   84468:	b02d      	add	sp, #180	; 0xb4
   8446a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8446e:	2a00      	cmp	r2, #0
   84470:	f040 8105 	bne.w	8467e <_vfiprintf_r+0xad6>
   84474:	2301      	movs	r3, #1
   84476:	46d1      	mov	r9, sl
   84478:	9a05      	ldr	r2, [sp, #20]
   8447a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   8447e:	921d      	str	r2, [sp, #116]	; 0x74
   84480:	9211      	str	r2, [sp, #68]	; 0x44
   84482:	9310      	str	r3, [sp, #64]	; 0x40
   84484:	f109 0908 	add.w	r9, r9, #8
   84488:	9b02      	ldr	r3, [sp, #8]
   8448a:	0759      	lsls	r1, r3, #29
   8448c:	d504      	bpl.n	84498 <_vfiprintf_r+0x8f0>
   8448e:	9b08      	ldr	r3, [sp, #32]
   84490:	9901      	ldr	r1, [sp, #4]
   84492:	1a5c      	subs	r4, r3, r1
   84494:	2c00      	cmp	r4, #0
   84496:	dc81      	bgt.n	8439c <_vfiprintf_r+0x7f4>
   84498:	9b03      	ldr	r3, [sp, #12]
   8449a:	9908      	ldr	r1, [sp, #32]
   8449c:	9801      	ldr	r0, [sp, #4]
   8449e:	4281      	cmp	r1, r0
   844a0:	bfac      	ite	ge
   844a2:	185b      	addge	r3, r3, r1
   844a4:	181b      	addlt	r3, r3, r0
   844a6:	9303      	str	r3, [sp, #12]
   844a8:	bb72      	cbnz	r2, 84508 <_vfiprintf_r+0x960>
   844aa:	2300      	movs	r3, #0
   844ac:	46d1      	mov	r9, sl
   844ae:	9310      	str	r3, [sp, #64]	; 0x40
   844b0:	f7ff bbb7 	b.w	83c22 <_vfiprintf_r+0x7a>
   844b4:	aa0f      	add	r2, sp, #60	; 0x3c
   844b6:	9904      	ldr	r1, [sp, #16]
   844b8:	4620      	mov	r0, r4
   844ba:	f7ff fb35 	bl	83b28 <__sprint_r.part.0>
   844be:	bb50      	cbnz	r0, 84516 <_vfiprintf_r+0x96e>
   844c0:	9910      	ldr	r1, [sp, #64]	; 0x40
   844c2:	46d4      	mov	ip, sl
   844c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   844c6:	f101 0e01 	add.w	lr, r1, #1
   844ca:	e54a      	b.n	83f62 <_vfiprintf_r+0x3ba>
   844cc:	2a00      	cmp	r2, #0
   844ce:	f47f aee5 	bne.w	8429c <_vfiprintf_r+0x6f4>
   844d2:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   844d6:	2900      	cmp	r1, #0
   844d8:	f000 811a 	beq.w	84710 <_vfiprintf_r+0xb68>
   844dc:	2201      	movs	r2, #1
   844de:	46d1      	mov	r9, sl
   844e0:	4610      	mov	r0, r2
   844e2:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   844e6:	921d      	str	r2, [sp, #116]	; 0x74
   844e8:	911c      	str	r1, [sp, #112]	; 0x70
   844ea:	4601      	mov	r1, r0
   844ec:	f109 0908 	add.w	r9, r9, #8
   844f0:	3001      	adds	r0, #1
   844f2:	e508      	b.n	83f06 <_vfiprintf_r+0x35e>
   844f4:	9b02      	ldr	r3, [sp, #8]
   844f6:	2a01      	cmp	r2, #1
   844f8:	f000 8097 	beq.w	8462a <_vfiprintf_r+0xa82>
   844fc:	2a02      	cmp	r2, #2
   844fe:	d10d      	bne.n	8451c <_vfiprintf_r+0x974>
   84500:	9302      	str	r3, [sp, #8]
   84502:	2600      	movs	r6, #0
   84504:	2700      	movs	r7, #0
   84506:	e5b2      	b.n	8406e <_vfiprintf_r+0x4c6>
   84508:	aa0f      	add	r2, sp, #60	; 0x3c
   8450a:	9904      	ldr	r1, [sp, #16]
   8450c:	9806      	ldr	r0, [sp, #24]
   8450e:	f7ff fb0b 	bl	83b28 <__sprint_r.part.0>
   84512:	2800      	cmp	r0, #0
   84514:	d0c9      	beq.n	844aa <_vfiprintf_r+0x902>
   84516:	f8dd b010 	ldr.w	fp, [sp, #16]
   8451a:	e797      	b.n	8444c <_vfiprintf_r+0x8a4>
   8451c:	2600      	movs	r6, #0
   8451e:	2700      	movs	r7, #0
   84520:	9302      	str	r3, [sp, #8]
   84522:	4651      	mov	r1, sl
   84524:	e000      	b.n	84528 <_vfiprintf_r+0x980>
   84526:	4659      	mov	r1, fp
   84528:	08f2      	lsrs	r2, r6, #3
   8452a:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   8452e:	08f8      	lsrs	r0, r7, #3
   84530:	f006 0307 	and.w	r3, r6, #7
   84534:	4607      	mov	r7, r0
   84536:	4616      	mov	r6, r2
   84538:	3330      	adds	r3, #48	; 0x30
   8453a:	ea56 0207 	orrs.w	r2, r6, r7
   8453e:	f801 3c01 	strb.w	r3, [r1, #-1]
   84542:	f101 3bff 	add.w	fp, r1, #4294967295
   84546:	d1ee      	bne.n	84526 <_vfiprintf_r+0x97e>
   84548:	9a02      	ldr	r2, [sp, #8]
   8454a:	07d6      	lsls	r6, r2, #31
   8454c:	f57f ad9f 	bpl.w	8408e <_vfiprintf_r+0x4e6>
   84550:	2b30      	cmp	r3, #48	; 0x30
   84552:	f43f ad9c 	beq.w	8408e <_vfiprintf_r+0x4e6>
   84556:	2330      	movs	r3, #48	; 0x30
   84558:	3902      	subs	r1, #2
   8455a:	f80b 3c01 	strb.w	r3, [fp, #-1]
   8455e:	ebaa 0301 	sub.w	r3, sl, r1
   84562:	9305      	str	r3, [sp, #20]
   84564:	468b      	mov	fp, r1
   84566:	e477      	b.n	83e58 <_vfiprintf_r+0x2b0>
   84568:	9b03      	ldr	r3, [sp, #12]
   8456a:	9a08      	ldr	r2, [sp, #32]
   8456c:	428a      	cmp	r2, r1
   8456e:	bfac      	ite	ge
   84570:	189b      	addge	r3, r3, r2
   84572:	185b      	addlt	r3, r3, r1
   84574:	9303      	str	r3, [sp, #12]
   84576:	e798      	b.n	844aa <_vfiprintf_r+0x902>
   84578:	2202      	movs	r2, #2
   8457a:	e44e      	b.n	83e1a <_vfiprintf_r+0x272>
   8457c:	2f00      	cmp	r7, #0
   8457e:	bf08      	it	eq
   84580:	2e0a      	cmpeq	r6, #10
   84582:	d351      	bcc.n	84628 <_vfiprintf_r+0xa80>
   84584:	46d3      	mov	fp, sl
   84586:	4630      	mov	r0, r6
   84588:	4639      	mov	r1, r7
   8458a:	220a      	movs	r2, #10
   8458c:	2300      	movs	r3, #0
   8458e:	f003 fef9 	bl	88384 <__aeabi_uldivmod>
   84592:	3230      	adds	r2, #48	; 0x30
   84594:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   84598:	4630      	mov	r0, r6
   8459a:	4639      	mov	r1, r7
   8459c:	2300      	movs	r3, #0
   8459e:	220a      	movs	r2, #10
   845a0:	f003 fef0 	bl	88384 <__aeabi_uldivmod>
   845a4:	4606      	mov	r6, r0
   845a6:	460f      	mov	r7, r1
   845a8:	ea56 0307 	orrs.w	r3, r6, r7
   845ac:	d1eb      	bne.n	84586 <_vfiprintf_r+0x9de>
   845ae:	e56e      	b.n	8408e <_vfiprintf_r+0x4e6>
   845b0:	9405      	str	r4, [sp, #20]
   845b2:	46d3      	mov	fp, sl
   845b4:	e450      	b.n	83e58 <_vfiprintf_r+0x2b0>
   845b6:	aa0f      	add	r2, sp, #60	; 0x3c
   845b8:	9904      	ldr	r1, [sp, #16]
   845ba:	9806      	ldr	r0, [sp, #24]
   845bc:	f7ff fab4 	bl	83b28 <__sprint_r.part.0>
   845c0:	2800      	cmp	r0, #0
   845c2:	d1a8      	bne.n	84516 <_vfiprintf_r+0x96e>
   845c4:	46d1      	mov	r9, sl
   845c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   845c8:	e75e      	b.n	84488 <_vfiprintf_r+0x8e0>
   845ca:	aa0f      	add	r2, sp, #60	; 0x3c
   845cc:	9904      	ldr	r1, [sp, #16]
   845ce:	9806      	ldr	r0, [sp, #24]
   845d0:	f7ff faaa 	bl	83b28 <__sprint_r.part.0>
   845d4:	2800      	cmp	r0, #0
   845d6:	d19e      	bne.n	84516 <_vfiprintf_r+0x96e>
   845d8:	46d1      	mov	r9, sl
   845da:	f7ff bbbb 	b.w	83d54 <_vfiprintf_r+0x1ac>
   845de:	bf00      	nop
   845e0:	00088ab4 	.word	0x00088ab4
   845e4:	00088aa4 	.word	0x00088aa4
   845e8:	3104      	adds	r1, #4
   845ea:	6816      	ldr	r6, [r2, #0]
   845ec:	2700      	movs	r7, #0
   845ee:	2201      	movs	r2, #1
   845f0:	9107      	str	r1, [sp, #28]
   845f2:	e412      	b.n	83e1a <_vfiprintf_r+0x272>
   845f4:	9807      	ldr	r0, [sp, #28]
   845f6:	2700      	movs	r7, #0
   845f8:	4601      	mov	r1, r0
   845fa:	3104      	adds	r1, #4
   845fc:	6806      	ldr	r6, [r0, #0]
   845fe:	9107      	str	r1, [sp, #28]
   84600:	e40b      	b.n	83e1a <_vfiprintf_r+0x272>
   84602:	680e      	ldr	r6, [r1, #0]
   84604:	3104      	adds	r1, #4
   84606:	9107      	str	r1, [sp, #28]
   84608:	2700      	movs	r7, #0
   8460a:	e592      	b.n	84132 <_vfiprintf_r+0x58a>
   8460c:	6816      	ldr	r6, [r2, #0]
   8460e:	3204      	adds	r2, #4
   84610:	17f7      	asrs	r7, r6, #31
   84612:	9207      	str	r2, [sp, #28]
   84614:	4630      	mov	r0, r6
   84616:	4639      	mov	r1, r7
   84618:	e512      	b.n	84040 <_vfiprintf_r+0x498>
   8461a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8461e:	f001 fe91 	bl	86344 <__retarget_lock_release_recursive>
   84622:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   84626:	e71b      	b.n	84460 <_vfiprintf_r+0x8b8>
   84628:	9b02      	ldr	r3, [sp, #8]
   8462a:	9302      	str	r3, [sp, #8]
   8462c:	2301      	movs	r3, #1
   8462e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   84632:	3630      	adds	r6, #48	; 0x30
   84634:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   84638:	9305      	str	r3, [sp, #20]
   8463a:	e40d      	b.n	83e58 <_vfiprintf_r+0x2b0>
   8463c:	aa0f      	add	r2, sp, #60	; 0x3c
   8463e:	9904      	ldr	r1, [sp, #16]
   84640:	9806      	ldr	r0, [sp, #24]
   84642:	f7ff fa71 	bl	83b28 <__sprint_r.part.0>
   84646:	2800      	cmp	r0, #0
   84648:	f47f af65 	bne.w	84516 <_vfiprintf_r+0x96e>
   8464c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8464e:	46d1      	mov	r9, sl
   84650:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84652:	1c48      	adds	r0, r1, #1
   84654:	e457      	b.n	83f06 <_vfiprintf_r+0x35e>
   84656:	aa0f      	add	r2, sp, #60	; 0x3c
   84658:	9904      	ldr	r1, [sp, #16]
   8465a:	9806      	ldr	r0, [sp, #24]
   8465c:	f7ff fa64 	bl	83b28 <__sprint_r.part.0>
   84660:	2800      	cmp	r0, #0
   84662:	f47f af58 	bne.w	84516 <_vfiprintf_r+0x96e>
   84666:	9910      	ldr	r1, [sp, #64]	; 0x40
   84668:	46d1      	mov	r9, sl
   8466a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8466c:	1c48      	adds	r0, r1, #1
   8466e:	e644      	b.n	842fa <_vfiprintf_r+0x752>
   84670:	2a00      	cmp	r2, #0
   84672:	f040 8087 	bne.w	84784 <_vfiprintf_r+0xbdc>
   84676:	2001      	movs	r0, #1
   84678:	4611      	mov	r1, r2
   8467a:	46d1      	mov	r9, sl
   8467c:	e641      	b.n	84302 <_vfiprintf_r+0x75a>
   8467e:	aa0f      	add	r2, sp, #60	; 0x3c
   84680:	9904      	ldr	r1, [sp, #16]
   84682:	9806      	ldr	r0, [sp, #24]
   84684:	f7ff fa50 	bl	83b28 <__sprint_r.part.0>
   84688:	2800      	cmp	r0, #0
   8468a:	f47f af44 	bne.w	84516 <_vfiprintf_r+0x96e>
   8468e:	9810      	ldr	r0, [sp, #64]	; 0x40
   84690:	46d1      	mov	r9, sl
   84692:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84694:	3001      	adds	r0, #1
   84696:	e668      	b.n	8436a <_vfiprintf_r+0x7c2>
   84698:	46cb      	mov	fp, r9
   8469a:	e6d7      	b.n	8444c <_vfiprintf_r+0x8a4>
   8469c:	9d07      	ldr	r5, [sp, #28]
   8469e:	3507      	adds	r5, #7
   846a0:	f025 0507 	bic.w	r5, r5, #7
   846a4:	f105 0208 	add.w	r2, r5, #8
   846a8:	e9d5 0100 	ldrd	r0, r1, [r5]
   846ac:	9207      	str	r2, [sp, #28]
   846ae:	4606      	mov	r6, r0
   846b0:	460f      	mov	r7, r1
   846b2:	e4c5      	b.n	84040 <_vfiprintf_r+0x498>
   846b4:	9d07      	ldr	r5, [sp, #28]
   846b6:	3507      	adds	r5, #7
   846b8:	f025 0207 	bic.w	r2, r5, #7
   846bc:	f102 0108 	add.w	r1, r2, #8
   846c0:	e9d2 6700 	ldrd	r6, r7, [r2]
   846c4:	9107      	str	r1, [sp, #28]
   846c6:	2201      	movs	r2, #1
   846c8:	f7ff bba7 	b.w	83e1a <_vfiprintf_r+0x272>
   846cc:	9d07      	ldr	r5, [sp, #28]
   846ce:	3507      	adds	r5, #7
   846d0:	f025 0207 	bic.w	r2, r5, #7
   846d4:	f102 0108 	add.w	r1, r2, #8
   846d8:	e9d2 6700 	ldrd	r6, r7, [r2]
   846dc:	9107      	str	r1, [sp, #28]
   846de:	2200      	movs	r2, #0
   846e0:	f7ff bb9b 	b.w	83e1a <_vfiprintf_r+0x272>
   846e4:	9d07      	ldr	r5, [sp, #28]
   846e6:	3507      	adds	r5, #7
   846e8:	f025 0107 	bic.w	r1, r5, #7
   846ec:	f101 0008 	add.w	r0, r1, #8
   846f0:	9007      	str	r0, [sp, #28]
   846f2:	e9d1 6700 	ldrd	r6, r7, [r1]
   846f6:	e51c      	b.n	84132 <_vfiprintf_r+0x58a>
   846f8:	46d3      	mov	fp, sl
   846fa:	f7ff bbad 	b.w	83e58 <_vfiprintf_r+0x2b0>
   846fe:	252d      	movs	r5, #45	; 0x2d
   84700:	4276      	negs	r6, r6
   84702:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   84706:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   8470a:	2201      	movs	r2, #1
   8470c:	f7ff bb8a 	b.w	83e24 <_vfiprintf_r+0x27c>
   84710:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84712:	b9b3      	cbnz	r3, 84742 <_vfiprintf_r+0xb9a>
   84714:	4611      	mov	r1, r2
   84716:	2001      	movs	r0, #1
   84718:	46d1      	mov	r9, sl
   8471a:	e5f2      	b.n	84302 <_vfiprintf_r+0x75a>
   8471c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   84720:	f001 fe10 	bl	86344 <__retarget_lock_release_recursive>
   84724:	f04f 33ff 	mov.w	r3, #4294967295
   84728:	9303      	str	r3, [sp, #12]
   8472a:	f7ff bb4c 	b.w	83dc6 <_vfiprintf_r+0x21e>
   8472e:	aa0f      	add	r2, sp, #60	; 0x3c
   84730:	9904      	ldr	r1, [sp, #16]
   84732:	9806      	ldr	r0, [sp, #24]
   84734:	f7ff f9f8 	bl	83b28 <__sprint_r.part.0>
   84738:	2800      	cmp	r0, #0
   8473a:	f47f aeec 	bne.w	84516 <_vfiprintf_r+0x96e>
   8473e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84740:	e6aa      	b.n	84498 <_vfiprintf_r+0x8f0>
   84742:	2202      	movs	r2, #2
   84744:	ab0e      	add	r3, sp, #56	; 0x38
   84746:	921d      	str	r2, [sp, #116]	; 0x74
   84748:	931c      	str	r3, [sp, #112]	; 0x70
   8474a:	2001      	movs	r0, #1
   8474c:	46d1      	mov	r9, sl
   8474e:	e5d0      	b.n	842f2 <_vfiprintf_r+0x74a>
   84750:	4d34      	ldr	r5, [pc, #208]	; (84824 <_vfiprintf_r+0xc7c>)
   84752:	e5fd      	b.n	84350 <_vfiprintf_r+0x7a8>
   84754:	9a07      	ldr	r2, [sp, #28]
   84756:	4613      	mov	r3, r2
   84758:	3304      	adds	r3, #4
   8475a:	9307      	str	r3, [sp, #28]
   8475c:	9b03      	ldr	r3, [sp, #12]
   8475e:	6811      	ldr	r1, [r2, #0]
   84760:	17dd      	asrs	r5, r3, #31
   84762:	461a      	mov	r2, r3
   84764:	462b      	mov	r3, r5
   84766:	e9c1 2300 	strd	r2, r3, [r1]
   8476a:	f7ff ba5a 	b.w	83c22 <_vfiprintf_r+0x7a>
   8476e:	4658      	mov	r0, fp
   84770:	9507      	str	r5, [sp, #28]
   84772:	9302      	str	r3, [sp, #8]
   84774:	f7fd ff2a 	bl	825cc <strlen>
   84778:	2400      	movs	r4, #0
   8477a:	9005      	str	r0, [sp, #20]
   8477c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   84780:	f7ff bb6a 	b.w	83e58 <_vfiprintf_r+0x2b0>
   84784:	aa0f      	add	r2, sp, #60	; 0x3c
   84786:	9904      	ldr	r1, [sp, #16]
   84788:	9806      	ldr	r0, [sp, #24]
   8478a:	f7ff f9cd 	bl	83b28 <__sprint_r.part.0>
   8478e:	2800      	cmp	r0, #0
   84790:	f47f aec1 	bne.w	84516 <_vfiprintf_r+0x96e>
   84794:	9910      	ldr	r1, [sp, #64]	; 0x40
   84796:	46d1      	mov	r9, sl
   84798:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8479a:	1c48      	adds	r0, r1, #1
   8479c:	e5b1      	b.n	84302 <_vfiprintf_r+0x75a>
   8479e:	9910      	ldr	r1, [sp, #64]	; 0x40
   847a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   847a2:	3101      	adds	r1, #1
   847a4:	4e20      	ldr	r6, [pc, #128]	; (84828 <_vfiprintf_r+0xc80>)
   847a6:	f7ff bb9c 	b.w	83ee2 <_vfiprintf_r+0x33a>
   847aa:	2c06      	cmp	r4, #6
   847ac:	bf28      	it	cs
   847ae:	2406      	movcs	r4, #6
   847b0:	9507      	str	r5, [sp, #28]
   847b2:	9405      	str	r4, [sp, #20]
   847b4:	9401      	str	r4, [sp, #4]
   847b6:	f8df b074 	ldr.w	fp, [pc, #116]	; 8482c <_vfiprintf_r+0xc84>
   847ba:	e4e3      	b.n	84184 <_vfiprintf_r+0x5dc>
   847bc:	9810      	ldr	r0, [sp, #64]	; 0x40
   847be:	4e1a      	ldr	r6, [pc, #104]	; (84828 <_vfiprintf_r+0xc80>)
   847c0:	3001      	adds	r0, #1
   847c2:	e60e      	b.n	843e2 <_vfiprintf_r+0x83a>
   847c4:	4686      	mov	lr, r0
   847c6:	4d17      	ldr	r5, [pc, #92]	; (84824 <_vfiprintf_r+0xc7c>)
   847c8:	f7ff bbe2 	b.w	83f90 <_vfiprintf_r+0x3e8>
   847cc:	9405      	str	r4, [sp, #20]
   847ce:	9507      	str	r5, [sp, #28]
   847d0:	9302      	str	r3, [sp, #8]
   847d2:	4604      	mov	r4, r0
   847d4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   847d8:	f7ff bb3e 	b.w	83e58 <_vfiprintf_r+0x2b0>
   847dc:	9806      	ldr	r0, [sp, #24]
   847de:	aa0f      	add	r2, sp, #60	; 0x3c
   847e0:	4659      	mov	r1, fp
   847e2:	f7ff f9a1 	bl	83b28 <__sprint_r.part.0>
   847e6:	2800      	cmp	r0, #0
   847e8:	f43f ae2e 	beq.w	84448 <_vfiprintf_r+0x8a0>
   847ec:	e62e      	b.n	8444c <_vfiprintf_r+0x8a4>
   847ee:	9907      	ldr	r1, [sp, #28]
   847f0:	f898 2001 	ldrb.w	r2, [r8, #1]
   847f4:	680c      	ldr	r4, [r1, #0]
   847f6:	3104      	adds	r1, #4
   847f8:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   847fc:	46b8      	mov	r8, r7
   847fe:	9107      	str	r1, [sp, #28]
   84800:	f7ff ba44 	b.w	83c8c <_vfiprintf_r+0xe4>
   84804:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   84808:	e4a7      	b.n	8415a <_vfiprintf_r+0x5b2>
   8480a:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8480e:	e521      	b.n	84254 <_vfiprintf_r+0x6ac>
   84810:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   84814:	e47c      	b.n	84110 <_vfiprintf_r+0x568>
   84816:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8481a:	e43f      	b.n	8409c <_vfiprintf_r+0x4f4>
   8481c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   84820:	f7ff bbfa 	b.w	84018 <_vfiprintf_r+0x470>
   84824:	00088ab4 	.word	0x00088ab4
   84828:	00088aa4 	.word	0x00088aa4
   8482c:	00088a78 	.word	0x00088a78

00084830 <__sbprintf>:
   84830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84834:	460c      	mov	r4, r1
   84836:	f04f 0e00 	mov.w	lr, #0
   8483a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8483e:	4606      	mov	r6, r0
   84840:	4617      	mov	r7, r2
   84842:	4698      	mov	r8, r3
   84844:	6e62      	ldr	r2, [r4, #100]	; 0x64
   84846:	89e3      	ldrh	r3, [r4, #14]
   84848:	8989      	ldrh	r1, [r1, #12]
   8484a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8484e:	f021 0102 	bic.w	r1, r1, #2
   84852:	9219      	str	r2, [sp, #100]	; 0x64
   84854:	f8ad 300e 	strh.w	r3, [sp, #14]
   84858:	69e2      	ldr	r2, [r4, #28]
   8485a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8485c:	f8ad 100c 	strh.w	r1, [sp, #12]
   84860:	a816      	add	r0, sp, #88	; 0x58
   84862:	a91a      	add	r1, sp, #104	; 0x68
   84864:	f8cd e018 	str.w	lr, [sp, #24]
   84868:	9207      	str	r2, [sp, #28]
   8486a:	9309      	str	r3, [sp, #36]	; 0x24
   8486c:	9100      	str	r1, [sp, #0]
   8486e:	9104      	str	r1, [sp, #16]
   84870:	9502      	str	r5, [sp, #8]
   84872:	9505      	str	r5, [sp, #20]
   84874:	f001 fd60 	bl	86338 <__retarget_lock_init_recursive>
   84878:	4643      	mov	r3, r8
   8487a:	463a      	mov	r2, r7
   8487c:	4669      	mov	r1, sp
   8487e:	4630      	mov	r0, r6
   84880:	f7ff f992 	bl	83ba8 <_vfiprintf_r>
   84884:	1e05      	subs	r5, r0, #0
   84886:	db07      	blt.n	84898 <__sbprintf+0x68>
   84888:	4630      	mov	r0, r6
   8488a:	4669      	mov	r1, sp
   8488c:	f001 f932 	bl	85af4 <_fflush_r>
   84890:	2800      	cmp	r0, #0
   84892:	bf18      	it	ne
   84894:	f04f 35ff 	movne.w	r5, #4294967295
   84898:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8489c:	065b      	lsls	r3, r3, #25
   8489e:	d503      	bpl.n	848a8 <__sbprintf+0x78>
   848a0:	89a3      	ldrh	r3, [r4, #12]
   848a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   848a6:	81a3      	strh	r3, [r4, #12]
   848a8:	9816      	ldr	r0, [sp, #88]	; 0x58
   848aa:	f001 fd47 	bl	8633c <__retarget_lock_close_recursive>
   848ae:	4628      	mov	r0, r5
   848b0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   848b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000848b8 <__swbuf_r>:
   848b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   848ba:	460d      	mov	r5, r1
   848bc:	4614      	mov	r4, r2
   848be:	4606      	mov	r6, r0
   848c0:	b110      	cbz	r0, 848c8 <__swbuf_r+0x10>
   848c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   848c4:	2b00      	cmp	r3, #0
   848c6:	d04b      	beq.n	84960 <__swbuf_r+0xa8>
   848c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   848cc:	69a3      	ldr	r3, [r4, #24]
   848ce:	b291      	uxth	r1, r2
   848d0:	0708      	lsls	r0, r1, #28
   848d2:	60a3      	str	r3, [r4, #8]
   848d4:	d539      	bpl.n	8494a <__swbuf_r+0x92>
   848d6:	6923      	ldr	r3, [r4, #16]
   848d8:	2b00      	cmp	r3, #0
   848da:	d036      	beq.n	8494a <__swbuf_r+0x92>
   848dc:	b2ed      	uxtb	r5, r5
   848de:	0489      	lsls	r1, r1, #18
   848e0:	462f      	mov	r7, r5
   848e2:	d515      	bpl.n	84910 <__swbuf_r+0x58>
   848e4:	6822      	ldr	r2, [r4, #0]
   848e6:	6961      	ldr	r1, [r4, #20]
   848e8:	1ad3      	subs	r3, r2, r3
   848ea:	428b      	cmp	r3, r1
   848ec:	da1c      	bge.n	84928 <__swbuf_r+0x70>
   848ee:	3301      	adds	r3, #1
   848f0:	68a1      	ldr	r1, [r4, #8]
   848f2:	1c50      	adds	r0, r2, #1
   848f4:	3901      	subs	r1, #1
   848f6:	60a1      	str	r1, [r4, #8]
   848f8:	6020      	str	r0, [r4, #0]
   848fa:	7015      	strb	r5, [r2, #0]
   848fc:	6962      	ldr	r2, [r4, #20]
   848fe:	429a      	cmp	r2, r3
   84900:	d01a      	beq.n	84938 <__swbuf_r+0x80>
   84902:	89a3      	ldrh	r3, [r4, #12]
   84904:	07db      	lsls	r3, r3, #31
   84906:	d501      	bpl.n	8490c <__swbuf_r+0x54>
   84908:	2d0a      	cmp	r5, #10
   8490a:	d015      	beq.n	84938 <__swbuf_r+0x80>
   8490c:	4638      	mov	r0, r7
   8490e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84910:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84912:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84916:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8491a:	81a2      	strh	r2, [r4, #12]
   8491c:	6822      	ldr	r2, [r4, #0]
   8491e:	6661      	str	r1, [r4, #100]	; 0x64
   84920:	6961      	ldr	r1, [r4, #20]
   84922:	1ad3      	subs	r3, r2, r3
   84924:	428b      	cmp	r3, r1
   84926:	dbe2      	blt.n	848ee <__swbuf_r+0x36>
   84928:	4621      	mov	r1, r4
   8492a:	4630      	mov	r0, r6
   8492c:	f001 f8e2 	bl	85af4 <_fflush_r>
   84930:	b940      	cbnz	r0, 84944 <__swbuf_r+0x8c>
   84932:	2301      	movs	r3, #1
   84934:	6822      	ldr	r2, [r4, #0]
   84936:	e7db      	b.n	848f0 <__swbuf_r+0x38>
   84938:	4621      	mov	r1, r4
   8493a:	4630      	mov	r0, r6
   8493c:	f001 f8da 	bl	85af4 <_fflush_r>
   84940:	2800      	cmp	r0, #0
   84942:	d0e3      	beq.n	8490c <__swbuf_r+0x54>
   84944:	f04f 37ff 	mov.w	r7, #4294967295
   84948:	e7e0      	b.n	8490c <__swbuf_r+0x54>
   8494a:	4621      	mov	r1, r4
   8494c:	4630      	mov	r0, r6
   8494e:	f000 f80b 	bl	84968 <__swsetup_r>
   84952:	2800      	cmp	r0, #0
   84954:	d1f6      	bne.n	84944 <__swbuf_r+0x8c>
   84956:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8495a:	6923      	ldr	r3, [r4, #16]
   8495c:	b291      	uxth	r1, r2
   8495e:	e7bd      	b.n	848dc <__swbuf_r+0x24>
   84960:	f001 f920 	bl	85ba4 <__sinit>
   84964:	e7b0      	b.n	848c8 <__swbuf_r+0x10>
   84966:	bf00      	nop

00084968 <__swsetup_r>:
   84968:	b538      	push	{r3, r4, r5, lr}
   8496a:	4b30      	ldr	r3, [pc, #192]	; (84a2c <__swsetup_r+0xc4>)
   8496c:	4605      	mov	r5, r0
   8496e:	6818      	ldr	r0, [r3, #0]
   84970:	460c      	mov	r4, r1
   84972:	b110      	cbz	r0, 8497a <__swsetup_r+0x12>
   84974:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84976:	2b00      	cmp	r3, #0
   84978:	d038      	beq.n	849ec <__swsetup_r+0x84>
   8497a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8497e:	b293      	uxth	r3, r2
   84980:	0718      	lsls	r0, r3, #28
   84982:	d50c      	bpl.n	8499e <__swsetup_r+0x36>
   84984:	6920      	ldr	r0, [r4, #16]
   84986:	b1a8      	cbz	r0, 849b4 <__swsetup_r+0x4c>
   84988:	f013 0201 	ands.w	r2, r3, #1
   8498c:	d01e      	beq.n	849cc <__swsetup_r+0x64>
   8498e:	2200      	movs	r2, #0
   84990:	6963      	ldr	r3, [r4, #20]
   84992:	60a2      	str	r2, [r4, #8]
   84994:	425b      	negs	r3, r3
   84996:	61a3      	str	r3, [r4, #24]
   84998:	b1f0      	cbz	r0, 849d8 <__swsetup_r+0x70>
   8499a:	2000      	movs	r0, #0
   8499c:	bd38      	pop	{r3, r4, r5, pc}
   8499e:	06d9      	lsls	r1, r3, #27
   849a0:	d53b      	bpl.n	84a1a <__swsetup_r+0xb2>
   849a2:	0758      	lsls	r0, r3, #29
   849a4:	d425      	bmi.n	849f2 <__swsetup_r+0x8a>
   849a6:	6920      	ldr	r0, [r4, #16]
   849a8:	f042 0308 	orr.w	r3, r2, #8
   849ac:	81a3      	strh	r3, [r4, #12]
   849ae:	b29b      	uxth	r3, r3
   849b0:	2800      	cmp	r0, #0
   849b2:	d1e9      	bne.n	84988 <__swsetup_r+0x20>
   849b4:	f403 7220 	and.w	r2, r3, #640	; 0x280
   849b8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   849bc:	d0e4      	beq.n	84988 <__swsetup_r+0x20>
   849be:	4628      	mov	r0, r5
   849c0:	4621      	mov	r1, r4
   849c2:	f001 fcef 	bl	863a4 <__smakebuf_r>
   849c6:	89a3      	ldrh	r3, [r4, #12]
   849c8:	6920      	ldr	r0, [r4, #16]
   849ca:	e7dd      	b.n	84988 <__swsetup_r+0x20>
   849cc:	0799      	lsls	r1, r3, #30
   849ce:	bf58      	it	pl
   849d0:	6962      	ldrpl	r2, [r4, #20]
   849d2:	60a2      	str	r2, [r4, #8]
   849d4:	2800      	cmp	r0, #0
   849d6:	d1e0      	bne.n	8499a <__swsetup_r+0x32>
   849d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   849dc:	061a      	lsls	r2, r3, #24
   849de:	d5dd      	bpl.n	8499c <__swsetup_r+0x34>
   849e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   849e4:	81a3      	strh	r3, [r4, #12]
   849e6:	f04f 30ff 	mov.w	r0, #4294967295
   849ea:	bd38      	pop	{r3, r4, r5, pc}
   849ec:	f001 f8da 	bl	85ba4 <__sinit>
   849f0:	e7c3      	b.n	8497a <__swsetup_r+0x12>
   849f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   849f4:	b151      	cbz	r1, 84a0c <__swsetup_r+0xa4>
   849f6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   849fa:	4299      	cmp	r1, r3
   849fc:	d004      	beq.n	84a08 <__swsetup_r+0xa0>
   849fe:	4628      	mov	r0, r5
   84a00:	f001 f9f6 	bl	85df0 <_free_r>
   84a04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84a08:	2300      	movs	r3, #0
   84a0a:	6323      	str	r3, [r4, #48]	; 0x30
   84a0c:	2300      	movs	r3, #0
   84a0e:	6920      	ldr	r0, [r4, #16]
   84a10:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   84a14:	e884 0009 	stmia.w	r4, {r0, r3}
   84a18:	e7c6      	b.n	849a8 <__swsetup_r+0x40>
   84a1a:	2309      	movs	r3, #9
   84a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   84a20:	602b      	str	r3, [r5, #0]
   84a22:	f04f 30ff 	mov.w	r0, #4294967295
   84a26:	81a2      	strh	r2, [r4, #12]
   84a28:	bd38      	pop	{r3, r4, r5, pc}
   84a2a:	bf00      	nop
   84a2c:	20070134 	.word	0x20070134

00084a30 <register_fini>:
   84a30:	4b02      	ldr	r3, [pc, #8]	; (84a3c <register_fini+0xc>)
   84a32:	b113      	cbz	r3, 84a3a <register_fini+0xa>
   84a34:	4802      	ldr	r0, [pc, #8]	; (84a40 <register_fini+0x10>)
   84a36:	f000 b805 	b.w	84a44 <atexit>
   84a3a:	4770      	bx	lr
   84a3c:	00000000 	.word	0x00000000
   84a40:	00085c1d 	.word	0x00085c1d

00084a44 <atexit>:
   84a44:	2300      	movs	r3, #0
   84a46:	4601      	mov	r1, r0
   84a48:	461a      	mov	r2, r3
   84a4a:	4618      	mov	r0, r3
   84a4c:	f002 beb2 	b.w	877b4 <__register_exitproc>

00084a50 <quorem>:
   84a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84a54:	6903      	ldr	r3, [r0, #16]
   84a56:	690f      	ldr	r7, [r1, #16]
   84a58:	b083      	sub	sp, #12
   84a5a:	429f      	cmp	r7, r3
   84a5c:	f300 8088 	bgt.w	84b70 <quorem+0x120>
   84a60:	3f01      	subs	r7, #1
   84a62:	f101 0614 	add.w	r6, r1, #20
   84a66:	f100 0a14 	add.w	sl, r0, #20
   84a6a:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   84a6e:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   84a72:	3301      	adds	r3, #1
   84a74:	fbb2 f8f3 	udiv	r8, r2, r3
   84a78:	00bb      	lsls	r3, r7, #2
   84a7a:	9300      	str	r3, [sp, #0]
   84a7c:	eb06 0903 	add.w	r9, r6, r3
   84a80:	4453      	add	r3, sl
   84a82:	9301      	str	r3, [sp, #4]
   84a84:	f1b8 0f00 	cmp.w	r8, #0
   84a88:	d03b      	beq.n	84b02 <quorem+0xb2>
   84a8a:	2300      	movs	r3, #0
   84a8c:	46b4      	mov	ip, r6
   84a8e:	461c      	mov	r4, r3
   84a90:	46d6      	mov	lr, sl
   84a92:	f85c 2b04 	ldr.w	r2, [ip], #4
   84a96:	f8de 5000 	ldr.w	r5, [lr]
   84a9a:	fa1f fb82 	uxth.w	fp, r2
   84a9e:	fb08 330b 	mla	r3, r8, fp, r3
   84aa2:	0c12      	lsrs	r2, r2, #16
   84aa4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   84aa8:	fb08 bb02 	mla	fp, r8, r2, fp
   84aac:	b29a      	uxth	r2, r3
   84aae:	1aa2      	subs	r2, r4, r2
   84ab0:	b2ab      	uxth	r3, r5
   84ab2:	fa1f f48b 	uxth.w	r4, fp
   84ab6:	441a      	add	r2, r3
   84ab8:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   84abc:	eb04 4422 	add.w	r4, r4, r2, asr #16
   84ac0:	b292      	uxth	r2, r2
   84ac2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   84ac6:	45e1      	cmp	r9, ip
   84ac8:	f84e 2b04 	str.w	r2, [lr], #4
   84acc:	ea4f 4424 	mov.w	r4, r4, asr #16
   84ad0:	ea4f 431b 	mov.w	r3, fp, lsr #16
   84ad4:	d2dd      	bcs.n	84a92 <quorem+0x42>
   84ad6:	9b00      	ldr	r3, [sp, #0]
   84ad8:	f85a 3003 	ldr.w	r3, [sl, r3]
   84adc:	b98b      	cbnz	r3, 84b02 <quorem+0xb2>
   84ade:	9c01      	ldr	r4, [sp, #4]
   84ae0:	1f23      	subs	r3, r4, #4
   84ae2:	459a      	cmp	sl, r3
   84ae4:	d20c      	bcs.n	84b00 <quorem+0xb0>
   84ae6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84aea:	b94b      	cbnz	r3, 84b00 <quorem+0xb0>
   84aec:	f1a4 0308 	sub.w	r3, r4, #8
   84af0:	e002      	b.n	84af8 <quorem+0xa8>
   84af2:	681a      	ldr	r2, [r3, #0]
   84af4:	3b04      	subs	r3, #4
   84af6:	b91a      	cbnz	r2, 84b00 <quorem+0xb0>
   84af8:	459a      	cmp	sl, r3
   84afa:	f107 37ff 	add.w	r7, r7, #4294967295
   84afe:	d3f8      	bcc.n	84af2 <quorem+0xa2>
   84b00:	6107      	str	r7, [r0, #16]
   84b02:	4604      	mov	r4, r0
   84b04:	f002 fa82 	bl	8700c <__mcmp>
   84b08:	2800      	cmp	r0, #0
   84b0a:	db2d      	blt.n	84b68 <quorem+0x118>
   84b0c:	4655      	mov	r5, sl
   84b0e:	2300      	movs	r3, #0
   84b10:	f108 0801 	add.w	r8, r8, #1
   84b14:	f856 1b04 	ldr.w	r1, [r6], #4
   84b18:	6828      	ldr	r0, [r5, #0]
   84b1a:	b28a      	uxth	r2, r1
   84b1c:	1a9a      	subs	r2, r3, r2
   84b1e:	0c0b      	lsrs	r3, r1, #16
   84b20:	b281      	uxth	r1, r0
   84b22:	440a      	add	r2, r1
   84b24:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   84b28:	eb03 4322 	add.w	r3, r3, r2, asr #16
   84b2c:	b292      	uxth	r2, r2
   84b2e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   84b32:	45b1      	cmp	r9, r6
   84b34:	f845 2b04 	str.w	r2, [r5], #4
   84b38:	ea4f 4323 	mov.w	r3, r3, asr #16
   84b3c:	d2ea      	bcs.n	84b14 <quorem+0xc4>
   84b3e:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   84b42:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   84b46:	b97a      	cbnz	r2, 84b68 <quorem+0x118>
   84b48:	1f1a      	subs	r2, r3, #4
   84b4a:	4592      	cmp	sl, r2
   84b4c:	d20b      	bcs.n	84b66 <quorem+0x116>
   84b4e:	f853 2c04 	ldr.w	r2, [r3, #-4]
   84b52:	b942      	cbnz	r2, 84b66 <quorem+0x116>
   84b54:	3b08      	subs	r3, #8
   84b56:	e002      	b.n	84b5e <quorem+0x10e>
   84b58:	681a      	ldr	r2, [r3, #0]
   84b5a:	3b04      	subs	r3, #4
   84b5c:	b91a      	cbnz	r2, 84b66 <quorem+0x116>
   84b5e:	459a      	cmp	sl, r3
   84b60:	f107 37ff 	add.w	r7, r7, #4294967295
   84b64:	d3f8      	bcc.n	84b58 <quorem+0x108>
   84b66:	6127      	str	r7, [r4, #16]
   84b68:	4640      	mov	r0, r8
   84b6a:	b003      	add	sp, #12
   84b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84b70:	2000      	movs	r0, #0
   84b72:	b003      	add	sp, #12
   84b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00084b78 <_dtoa_r>:
   84b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84b7c:	6c05      	ldr	r5, [r0, #64]	; 0x40
   84b7e:	b09b      	sub	sp, #108	; 0x6c
   84b80:	4604      	mov	r4, r0
   84b82:	4692      	mov	sl, r2
   84b84:	469b      	mov	fp, r3
   84b86:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   84b88:	b14d      	cbz	r5, 84b9e <_dtoa_r+0x26>
   84b8a:	2301      	movs	r3, #1
   84b8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   84b8e:	4629      	mov	r1, r5
   84b90:	4093      	lsls	r3, r2
   84b92:	60ab      	str	r3, [r5, #8]
   84b94:	606a      	str	r2, [r5, #4]
   84b96:	f002 f861 	bl	86c5c <_Bfree>
   84b9a:	2300      	movs	r3, #0
   84b9c:	6423      	str	r3, [r4, #64]	; 0x40
   84b9e:	f1bb 0f00 	cmp.w	fp, #0
   84ba2:	465d      	mov	r5, fp
   84ba4:	db35      	blt.n	84c12 <_dtoa_r+0x9a>
   84ba6:	2300      	movs	r3, #0
   84ba8:	6033      	str	r3, [r6, #0]
   84baa:	4b9d      	ldr	r3, [pc, #628]	; (84e20 <_dtoa_r+0x2a8>)
   84bac:	43ab      	bics	r3, r5
   84bae:	d015      	beq.n	84bdc <_dtoa_r+0x64>
   84bb0:	2200      	movs	r2, #0
   84bb2:	2300      	movs	r3, #0
   84bb4:	4650      	mov	r0, sl
   84bb6:	4659      	mov	r1, fp
   84bb8:	f003 fb74 	bl	882a4 <__aeabi_dcmpeq>
   84bbc:	4680      	mov	r8, r0
   84bbe:	2800      	cmp	r0, #0
   84bc0:	d02d      	beq.n	84c1e <_dtoa_r+0xa6>
   84bc2:	2301      	movs	r3, #1
   84bc4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   84bc6:	6013      	str	r3, [r2, #0]
   84bc8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   84bca:	2b00      	cmp	r3, #0
   84bcc:	f000 80bd 	beq.w	84d4a <_dtoa_r+0x1d2>
   84bd0:	4894      	ldr	r0, [pc, #592]	; (84e24 <_dtoa_r+0x2ac>)
   84bd2:	6018      	str	r0, [r3, #0]
   84bd4:	3801      	subs	r0, #1
   84bd6:	b01b      	add	sp, #108	; 0x6c
   84bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84bdc:	f242 730f 	movw	r3, #9999	; 0x270f
   84be0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   84be2:	6013      	str	r3, [r2, #0]
   84be4:	f1ba 0f00 	cmp.w	sl, #0
   84be8:	d10d      	bne.n	84c06 <_dtoa_r+0x8e>
   84bea:	f3c5 0513 	ubfx	r5, r5, #0, #20
   84bee:	b955      	cbnz	r5, 84c06 <_dtoa_r+0x8e>
   84bf0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   84bf2:	488d      	ldr	r0, [pc, #564]	; (84e28 <_dtoa_r+0x2b0>)
   84bf4:	2b00      	cmp	r3, #0
   84bf6:	d0ee      	beq.n	84bd6 <_dtoa_r+0x5e>
   84bf8:	f100 0308 	add.w	r3, r0, #8
   84bfc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   84bfe:	6013      	str	r3, [r2, #0]
   84c00:	b01b      	add	sp, #108	; 0x6c
   84c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84c06:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   84c08:	4888      	ldr	r0, [pc, #544]	; (84e2c <_dtoa_r+0x2b4>)
   84c0a:	2b00      	cmp	r3, #0
   84c0c:	d0e3      	beq.n	84bd6 <_dtoa_r+0x5e>
   84c0e:	1cc3      	adds	r3, r0, #3
   84c10:	e7f4      	b.n	84bfc <_dtoa_r+0x84>
   84c12:	2301      	movs	r3, #1
   84c14:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   84c18:	6033      	str	r3, [r6, #0]
   84c1a:	46ab      	mov	fp, r5
   84c1c:	e7c5      	b.n	84baa <_dtoa_r+0x32>
   84c1e:	aa18      	add	r2, sp, #96	; 0x60
   84c20:	ab19      	add	r3, sp, #100	; 0x64
   84c22:	9201      	str	r2, [sp, #4]
   84c24:	9300      	str	r3, [sp, #0]
   84c26:	4652      	mov	r2, sl
   84c28:	465b      	mov	r3, fp
   84c2a:	4620      	mov	r0, r4
   84c2c:	f002 fa98 	bl	87160 <__d2b>
   84c30:	0d2b      	lsrs	r3, r5, #20
   84c32:	4681      	mov	r9, r0
   84c34:	d071      	beq.n	84d1a <_dtoa_r+0x1a2>
   84c36:	4650      	mov	r0, sl
   84c38:	f3cb 0213 	ubfx	r2, fp, #0, #20
   84c3c:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   84c40:	9f18      	ldr	r7, [sp, #96]	; 0x60
   84c42:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   84c46:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   84c4a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   84c4e:	2200      	movs	r2, #0
   84c50:	4b77      	ldr	r3, [pc, #476]	; (84e30 <_dtoa_r+0x2b8>)
   84c52:	f002 ff0b 	bl	87a6c <__aeabi_dsub>
   84c56:	a36c      	add	r3, pc, #432	; (adr r3, 84e08 <_dtoa_r+0x290>)
   84c58:	e9d3 2300 	ldrd	r2, r3, [r3]
   84c5c:	f003 f8ba 	bl	87dd4 <__aeabi_dmul>
   84c60:	a36b      	add	r3, pc, #428	; (adr r3, 84e10 <_dtoa_r+0x298>)
   84c62:	e9d3 2300 	ldrd	r2, r3, [r3]
   84c66:	f002 ff03 	bl	87a70 <__adddf3>
   84c6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   84c6e:	4630      	mov	r0, r6
   84c70:	f003 f84a 	bl	87d08 <__aeabi_i2d>
   84c74:	a368      	add	r3, pc, #416	; (adr r3, 84e18 <_dtoa_r+0x2a0>)
   84c76:	e9d3 2300 	ldrd	r2, r3, [r3]
   84c7a:	f003 f8ab 	bl	87dd4 <__aeabi_dmul>
   84c7e:	4602      	mov	r2, r0
   84c80:	460b      	mov	r3, r1
   84c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   84c86:	f002 fef3 	bl	87a70 <__adddf3>
   84c8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   84c8e:	f003 fb51 	bl	88334 <__aeabi_d2iz>
   84c92:	2200      	movs	r2, #0
   84c94:	9002      	str	r0, [sp, #8]
   84c96:	2300      	movs	r3, #0
   84c98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   84c9c:	f003 fb0c 	bl	882b8 <__aeabi_dcmplt>
   84ca0:	2800      	cmp	r0, #0
   84ca2:	f040 816d 	bne.w	84f80 <_dtoa_r+0x408>
   84ca6:	9d02      	ldr	r5, [sp, #8]
   84ca8:	2d16      	cmp	r5, #22
   84caa:	f200 8157 	bhi.w	84f5c <_dtoa_r+0x3e4>
   84cae:	4961      	ldr	r1, [pc, #388]	; (84e34 <_dtoa_r+0x2bc>)
   84cb0:	4652      	mov	r2, sl
   84cb2:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   84cb6:	465b      	mov	r3, fp
   84cb8:	e9d1 0100 	ldrd	r0, r1, [r1]
   84cbc:	f003 fb1a 	bl	882f4 <__aeabi_dcmpgt>
   84cc0:	2800      	cmp	r0, #0
   84cc2:	f000 81be 	beq.w	85042 <_dtoa_r+0x4ca>
   84cc6:	1e6b      	subs	r3, r5, #1
   84cc8:	9302      	str	r3, [sp, #8]
   84cca:	2300      	movs	r3, #0
   84ccc:	930e      	str	r3, [sp, #56]	; 0x38
   84cce:	1bbf      	subs	r7, r7, r6
   84cd0:	1e7b      	subs	r3, r7, #1
   84cd2:	9308      	str	r3, [sp, #32]
   84cd4:	f100 814e 	bmi.w	84f74 <_dtoa_r+0x3fc>
   84cd8:	2300      	movs	r3, #0
   84cda:	930a      	str	r3, [sp, #40]	; 0x28
   84cdc:	9b02      	ldr	r3, [sp, #8]
   84cde:	2b00      	cmp	r3, #0
   84ce0:	f2c0 813f 	blt.w	84f62 <_dtoa_r+0x3ea>
   84ce4:	9a08      	ldr	r2, [sp, #32]
   84ce6:	930d      	str	r3, [sp, #52]	; 0x34
   84ce8:	4611      	mov	r1, r2
   84cea:	4419      	add	r1, r3
   84cec:	2300      	movs	r3, #0
   84cee:	9108      	str	r1, [sp, #32]
   84cf0:	930c      	str	r3, [sp, #48]	; 0x30
   84cf2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84cf4:	2b09      	cmp	r3, #9
   84cf6:	d82a      	bhi.n	84d4e <_dtoa_r+0x1d6>
   84cf8:	2b05      	cmp	r3, #5
   84cfa:	f340 8658 	ble.w	859ae <_dtoa_r+0xe36>
   84cfe:	2500      	movs	r5, #0
   84d00:	3b04      	subs	r3, #4
   84d02:	9324      	str	r3, [sp, #144]	; 0x90
   84d04:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84d06:	3b02      	subs	r3, #2
   84d08:	2b03      	cmp	r3, #3
   84d0a:	f200 863f 	bhi.w	8598c <_dtoa_r+0xe14>
   84d0e:	e8df f013 	tbh	[pc, r3, lsl #1]
   84d12:	03ce      	.short	0x03ce
   84d14:	03d902c3 	.word	0x03d902c3
   84d18:	045b      	.short	0x045b
   84d1a:	9f18      	ldr	r7, [sp, #96]	; 0x60
   84d1c:	9e19      	ldr	r6, [sp, #100]	; 0x64
   84d1e:	443e      	add	r6, r7
   84d20:	f206 4332 	addw	r3, r6, #1074	; 0x432
   84d24:	2b20      	cmp	r3, #32
   84d26:	f340 8187 	ble.w	85038 <_dtoa_r+0x4c0>
   84d2a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   84d2e:	f206 4012 	addw	r0, r6, #1042	; 0x412
   84d32:	409d      	lsls	r5, r3
   84d34:	fa2a f000 	lsr.w	r0, sl, r0
   84d38:	4328      	orrs	r0, r5
   84d3a:	f002 ffd5 	bl	87ce8 <__aeabi_ui2d>
   84d3e:	2301      	movs	r3, #1
   84d40:	3e01      	subs	r6, #1
   84d42:	9314      	str	r3, [sp, #80]	; 0x50
   84d44:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   84d48:	e781      	b.n	84c4e <_dtoa_r+0xd6>
   84d4a:	483b      	ldr	r0, [pc, #236]	; (84e38 <_dtoa_r+0x2c0>)
   84d4c:	e743      	b.n	84bd6 <_dtoa_r+0x5e>
   84d4e:	2100      	movs	r1, #0
   84d50:	4620      	mov	r0, r4
   84d52:	6461      	str	r1, [r4, #68]	; 0x44
   84d54:	9125      	str	r1, [sp, #148]	; 0x94
   84d56:	f001 ff5b 	bl	86c10 <_Balloc>
   84d5a:	f04f 33ff 	mov.w	r3, #4294967295
   84d5e:	9307      	str	r3, [sp, #28]
   84d60:	930f      	str	r3, [sp, #60]	; 0x3c
   84d62:	2301      	movs	r3, #1
   84d64:	9a25      	ldr	r2, [sp, #148]	; 0x94
   84d66:	9004      	str	r0, [sp, #16]
   84d68:	6420      	str	r0, [r4, #64]	; 0x40
   84d6a:	9224      	str	r2, [sp, #144]	; 0x90
   84d6c:	930b      	str	r3, [sp, #44]	; 0x2c
   84d6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   84d70:	2b00      	cmp	r3, #0
   84d72:	f2c0 80d3 	blt.w	84f1c <_dtoa_r+0x3a4>
   84d76:	9a02      	ldr	r2, [sp, #8]
   84d78:	2a0e      	cmp	r2, #14
   84d7a:	f300 80cf 	bgt.w	84f1c <_dtoa_r+0x3a4>
   84d7e:	4b2d      	ldr	r3, [pc, #180]	; (84e34 <_dtoa_r+0x2bc>)
   84d80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   84d84:	e9d3 2300 	ldrd	r2, r3, [r3]
   84d88:	e9cd 2308 	strd	r2, r3, [sp, #32]
   84d8c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   84d8e:	2b00      	cmp	r3, #0
   84d90:	f2c0 83b4 	blt.w	854fc <_dtoa_r+0x984>
   84d94:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   84d98:	4650      	mov	r0, sl
   84d9a:	462a      	mov	r2, r5
   84d9c:	4633      	mov	r3, r6
   84d9e:	4659      	mov	r1, fp
   84da0:	f003 f942 	bl	88028 <__aeabi_ddiv>
   84da4:	f003 fac6 	bl	88334 <__aeabi_d2iz>
   84da8:	4680      	mov	r8, r0
   84daa:	f002 ffad 	bl	87d08 <__aeabi_i2d>
   84dae:	462a      	mov	r2, r5
   84db0:	4633      	mov	r3, r6
   84db2:	f003 f80f 	bl	87dd4 <__aeabi_dmul>
   84db6:	4602      	mov	r2, r0
   84db8:	460b      	mov	r3, r1
   84dba:	4650      	mov	r0, sl
   84dbc:	4659      	mov	r1, fp
   84dbe:	f002 fe55 	bl	87a6c <__aeabi_dsub>
   84dc2:	9e07      	ldr	r6, [sp, #28]
   84dc4:	9f04      	ldr	r7, [sp, #16]
   84dc6:	f108 0530 	add.w	r5, r8, #48	; 0x30
   84dca:	2e01      	cmp	r6, #1
   84dcc:	703d      	strb	r5, [r7, #0]
   84dce:	4602      	mov	r2, r0
   84dd0:	460b      	mov	r3, r1
   84dd2:	f107 0501 	add.w	r5, r7, #1
   84dd6:	d064      	beq.n	84ea2 <_dtoa_r+0x32a>
   84dd8:	2200      	movs	r2, #0
   84dda:	4b18      	ldr	r3, [pc, #96]	; (84e3c <_dtoa_r+0x2c4>)
   84ddc:	f002 fffa 	bl	87dd4 <__aeabi_dmul>
   84de0:	2200      	movs	r2, #0
   84de2:	2300      	movs	r3, #0
   84de4:	4606      	mov	r6, r0
   84de6:	460f      	mov	r7, r1
   84de8:	f003 fa5c 	bl	882a4 <__aeabi_dcmpeq>
   84dec:	2800      	cmp	r0, #0
   84dee:	f040 8082 	bne.w	84ef6 <_dtoa_r+0x37e>
   84df2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   84df6:	f04f 0a00 	mov.w	sl, #0
   84dfa:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   84dfe:	f04f 0b00 	mov.w	fp, #0
   84e02:	940b      	str	r4, [sp, #44]	; 0x2c
   84e04:	e029      	b.n	84e5a <_dtoa_r+0x2e2>
   84e06:	bf00      	nop
   84e08:	636f4361 	.word	0x636f4361
   84e0c:	3fd287a7 	.word	0x3fd287a7
   84e10:	8b60c8b3 	.word	0x8b60c8b3
   84e14:	3fc68a28 	.word	0x3fc68a28
   84e18:	509f79fb 	.word	0x509f79fb
   84e1c:	3fd34413 	.word	0x3fd34413
   84e20:	7ff00000 	.word	0x7ff00000
   84e24:	00088a81 	.word	0x00088a81
   84e28:	00088ac4 	.word	0x00088ac4
   84e2c:	00088ad0 	.word	0x00088ad0
   84e30:	3ff80000 	.word	0x3ff80000
   84e34:	00088b10 	.word	0x00088b10
   84e38:	00088a80 	.word	0x00088a80
   84e3c:	40240000 	.word	0x40240000
   84e40:	2200      	movs	r2, #0
   84e42:	4b81      	ldr	r3, [pc, #516]	; (85048 <_dtoa_r+0x4d0>)
   84e44:	f002 ffc6 	bl	87dd4 <__aeabi_dmul>
   84e48:	4652      	mov	r2, sl
   84e4a:	465b      	mov	r3, fp
   84e4c:	4606      	mov	r6, r0
   84e4e:	460f      	mov	r7, r1
   84e50:	f003 fa28 	bl	882a4 <__aeabi_dcmpeq>
   84e54:	2800      	cmp	r0, #0
   84e56:	f040 83ba 	bne.w	855ce <_dtoa_r+0xa56>
   84e5a:	4642      	mov	r2, r8
   84e5c:	464b      	mov	r3, r9
   84e5e:	4630      	mov	r0, r6
   84e60:	4639      	mov	r1, r7
   84e62:	f003 f8e1 	bl	88028 <__aeabi_ddiv>
   84e66:	f003 fa65 	bl	88334 <__aeabi_d2iz>
   84e6a:	4604      	mov	r4, r0
   84e6c:	f002 ff4c 	bl	87d08 <__aeabi_i2d>
   84e70:	4642      	mov	r2, r8
   84e72:	464b      	mov	r3, r9
   84e74:	f002 ffae 	bl	87dd4 <__aeabi_dmul>
   84e78:	4602      	mov	r2, r0
   84e7a:	460b      	mov	r3, r1
   84e7c:	4630      	mov	r0, r6
   84e7e:	4639      	mov	r1, r7
   84e80:	f002 fdf4 	bl	87a6c <__aeabi_dsub>
   84e84:	f104 0630 	add.w	r6, r4, #48	; 0x30
   84e88:	f805 6b01 	strb.w	r6, [r5], #1
   84e8c:	9e04      	ldr	r6, [sp, #16]
   84e8e:	9f07      	ldr	r7, [sp, #28]
   84e90:	1bae      	subs	r6, r5, r6
   84e92:	42be      	cmp	r6, r7
   84e94:	4602      	mov	r2, r0
   84e96:	460b      	mov	r3, r1
   84e98:	d1d2      	bne.n	84e40 <_dtoa_r+0x2c8>
   84e9a:	46a0      	mov	r8, r4
   84e9c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   84ea0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   84ea2:	4610      	mov	r0, r2
   84ea4:	4619      	mov	r1, r3
   84ea6:	f002 fde3 	bl	87a70 <__adddf3>
   84eaa:	4606      	mov	r6, r0
   84eac:	460f      	mov	r7, r1
   84eae:	4602      	mov	r2, r0
   84eb0:	460b      	mov	r3, r1
   84eb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84eb6:	f003 f9ff 	bl	882b8 <__aeabi_dcmplt>
   84eba:	b948      	cbnz	r0, 84ed0 <_dtoa_r+0x358>
   84ebc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84ec0:	4632      	mov	r2, r6
   84ec2:	463b      	mov	r3, r7
   84ec4:	f003 f9ee 	bl	882a4 <__aeabi_dcmpeq>
   84ec8:	b1a8      	cbz	r0, 84ef6 <_dtoa_r+0x37e>
   84eca:	f018 0f01 	tst.w	r8, #1
   84ece:	d012      	beq.n	84ef6 <_dtoa_r+0x37e>
   84ed0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   84ed4:	1e6b      	subs	r3, r5, #1
   84ed6:	9a04      	ldr	r2, [sp, #16]
   84ed8:	e004      	b.n	84ee4 <_dtoa_r+0x36c>
   84eda:	429a      	cmp	r2, r3
   84edc:	f000 8402 	beq.w	856e4 <_dtoa_r+0xb6c>
   84ee0:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   84ee4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   84ee8:	f103 0501 	add.w	r5, r3, #1
   84eec:	d0f5      	beq.n	84eda <_dtoa_r+0x362>
   84eee:	f108 0801 	add.w	r8, r8, #1
   84ef2:	f883 8000 	strb.w	r8, [r3]
   84ef6:	4649      	mov	r1, r9
   84ef8:	4620      	mov	r0, r4
   84efa:	f001 feaf 	bl	86c5c <_Bfree>
   84efe:	2200      	movs	r2, #0
   84f00:	9b02      	ldr	r3, [sp, #8]
   84f02:	702a      	strb	r2, [r5, #0]
   84f04:	9a26      	ldr	r2, [sp, #152]	; 0x98
   84f06:	3301      	adds	r3, #1
   84f08:	6013      	str	r3, [r2, #0]
   84f0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   84f0c:	2b00      	cmp	r3, #0
   84f0e:	f000 839f 	beq.w	85650 <_dtoa_r+0xad8>
   84f12:	9804      	ldr	r0, [sp, #16]
   84f14:	601d      	str	r5, [r3, #0]
   84f16:	b01b      	add	sp, #108	; 0x6c
   84f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84f1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   84f1e:	2a00      	cmp	r2, #0
   84f20:	d03e      	beq.n	84fa0 <_dtoa_r+0x428>
   84f22:	9a24      	ldr	r2, [sp, #144]	; 0x90
   84f24:	2a01      	cmp	r2, #1
   84f26:	f340 8311 	ble.w	8554c <_dtoa_r+0x9d4>
   84f2a:	9b07      	ldr	r3, [sp, #28]
   84f2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84f2e:	1e5f      	subs	r7, r3, #1
   84f30:	42ba      	cmp	r2, r7
   84f32:	f2c0 8390 	blt.w	85656 <_dtoa_r+0xade>
   84f36:	1bd7      	subs	r7, r2, r7
   84f38:	9b07      	ldr	r3, [sp, #28]
   84f3a:	2b00      	cmp	r3, #0
   84f3c:	f2c0 848c 	blt.w	85858 <_dtoa_r+0xce0>
   84f40:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   84f42:	9b07      	ldr	r3, [sp, #28]
   84f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   84f46:	2101      	movs	r1, #1
   84f48:	441a      	add	r2, r3
   84f4a:	920a      	str	r2, [sp, #40]	; 0x28
   84f4c:	9a08      	ldr	r2, [sp, #32]
   84f4e:	4620      	mov	r0, r4
   84f50:	441a      	add	r2, r3
   84f52:	9208      	str	r2, [sp, #32]
   84f54:	f001 ff1e 	bl	86d94 <__i2b>
   84f58:	4606      	mov	r6, r0
   84f5a:	e023      	b.n	84fa4 <_dtoa_r+0x42c>
   84f5c:	2301      	movs	r3, #1
   84f5e:	930e      	str	r3, [sp, #56]	; 0x38
   84f60:	e6b5      	b.n	84cce <_dtoa_r+0x156>
   84f62:	2300      	movs	r3, #0
   84f64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   84f66:	930d      	str	r3, [sp, #52]	; 0x34
   84f68:	9b02      	ldr	r3, [sp, #8]
   84f6a:	1ad2      	subs	r2, r2, r3
   84f6c:	425b      	negs	r3, r3
   84f6e:	920a      	str	r2, [sp, #40]	; 0x28
   84f70:	930c      	str	r3, [sp, #48]	; 0x30
   84f72:	e6be      	b.n	84cf2 <_dtoa_r+0x17a>
   84f74:	f1c7 0301 	rsb	r3, r7, #1
   84f78:	930a      	str	r3, [sp, #40]	; 0x28
   84f7a:	2300      	movs	r3, #0
   84f7c:	9308      	str	r3, [sp, #32]
   84f7e:	e6ad      	b.n	84cdc <_dtoa_r+0x164>
   84f80:	9d02      	ldr	r5, [sp, #8]
   84f82:	4628      	mov	r0, r5
   84f84:	f002 fec0 	bl	87d08 <__aeabi_i2d>
   84f88:	4602      	mov	r2, r0
   84f8a:	460b      	mov	r3, r1
   84f8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   84f90:	f003 f988 	bl	882a4 <__aeabi_dcmpeq>
   84f94:	2800      	cmp	r0, #0
   84f96:	f47f ae86 	bne.w	84ca6 <_dtoa_r+0x12e>
   84f9a:	1e6b      	subs	r3, r5, #1
   84f9c:	9302      	str	r3, [sp, #8]
   84f9e:	e682      	b.n	84ca6 <_dtoa_r+0x12e>
   84fa0:	ad0a      	add	r5, sp, #40	; 0x28
   84fa2:	cde0      	ldmia	r5, {r5, r6, r7}
   84fa4:	2d00      	cmp	r5, #0
   84fa6:	dd0c      	ble.n	84fc2 <_dtoa_r+0x44a>
   84fa8:	9908      	ldr	r1, [sp, #32]
   84faa:	2900      	cmp	r1, #0
   84fac:	460b      	mov	r3, r1
   84fae:	dd08      	ble.n	84fc2 <_dtoa_r+0x44a>
   84fb0:	42a9      	cmp	r1, r5
   84fb2:	bfa8      	it	ge
   84fb4:	462b      	movge	r3, r5
   84fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   84fb8:	1aed      	subs	r5, r5, r3
   84fba:	1ad2      	subs	r2, r2, r3
   84fbc:	1acb      	subs	r3, r1, r3
   84fbe:	920a      	str	r2, [sp, #40]	; 0x28
   84fc0:	9308      	str	r3, [sp, #32]
   84fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84fc4:	b1d3      	cbz	r3, 84ffc <_dtoa_r+0x484>
   84fc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   84fc8:	2b00      	cmp	r3, #0
   84fca:	f000 82b8 	beq.w	8553e <_dtoa_r+0x9c6>
   84fce:	2f00      	cmp	r7, #0
   84fd0:	dd10      	ble.n	84ff4 <_dtoa_r+0x47c>
   84fd2:	4631      	mov	r1, r6
   84fd4:	463a      	mov	r2, r7
   84fd6:	4620      	mov	r0, r4
   84fd8:	f001 ff78 	bl	86ecc <__pow5mult>
   84fdc:	464a      	mov	r2, r9
   84fde:	4601      	mov	r1, r0
   84fe0:	4606      	mov	r6, r0
   84fe2:	4620      	mov	r0, r4
   84fe4:	f001 fee0 	bl	86da8 <__multiply>
   84fe8:	4603      	mov	r3, r0
   84fea:	4649      	mov	r1, r9
   84fec:	4620      	mov	r0, r4
   84fee:	4699      	mov	r9, r3
   84ff0:	f001 fe34 	bl	86c5c <_Bfree>
   84ff4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84ff6:	1bda      	subs	r2, r3, r7
   84ff8:	f040 82a2 	bne.w	85540 <_dtoa_r+0x9c8>
   84ffc:	2101      	movs	r1, #1
   84ffe:	4620      	mov	r0, r4
   85000:	f001 fec8 	bl	86d94 <__i2b>
   85004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85006:	4680      	mov	r8, r0
   85008:	2b00      	cmp	r3, #0
   8500a:	dd1f      	ble.n	8504c <_dtoa_r+0x4d4>
   8500c:	4601      	mov	r1, r0
   8500e:	461a      	mov	r2, r3
   85010:	4620      	mov	r0, r4
   85012:	f001 ff5b 	bl	86ecc <__pow5mult>
   85016:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85018:	4680      	mov	r8, r0
   8501a:	2b01      	cmp	r3, #1
   8501c:	f340 8255 	ble.w	854ca <_dtoa_r+0x952>
   85020:	2300      	movs	r3, #0
   85022:	930c      	str	r3, [sp, #48]	; 0x30
   85024:	f8d8 3010 	ldr.w	r3, [r8, #16]
   85028:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8502c:	6918      	ldr	r0, [r3, #16]
   8502e:	f001 fe61 	bl	86cf4 <__hi0bits>
   85032:	f1c0 0020 	rsb	r0, r0, #32
   85036:	e013      	b.n	85060 <_dtoa_r+0x4e8>
   85038:	f1c3 0520 	rsb	r5, r3, #32
   8503c:	fa0a f005 	lsl.w	r0, sl, r5
   85040:	e67b      	b.n	84d3a <_dtoa_r+0x1c2>
   85042:	900e      	str	r0, [sp, #56]	; 0x38
   85044:	e643      	b.n	84cce <_dtoa_r+0x156>
   85046:	bf00      	nop
   85048:	40240000 	.word	0x40240000
   8504c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8504e:	2b01      	cmp	r3, #1
   85050:	f340 8285 	ble.w	8555e <_dtoa_r+0x9e6>
   85054:	2300      	movs	r3, #0
   85056:	930c      	str	r3, [sp, #48]	; 0x30
   85058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8505a:	2001      	movs	r0, #1
   8505c:	2b00      	cmp	r3, #0
   8505e:	d1e1      	bne.n	85024 <_dtoa_r+0x4ac>
   85060:	9a08      	ldr	r2, [sp, #32]
   85062:	4410      	add	r0, r2
   85064:	f010 001f 	ands.w	r0, r0, #31
   85068:	f000 80a1 	beq.w	851ae <_dtoa_r+0x636>
   8506c:	f1c0 0320 	rsb	r3, r0, #32
   85070:	2b04      	cmp	r3, #4
   85072:	f340 8486 	ble.w	85982 <_dtoa_r+0xe0a>
   85076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85078:	f1c0 001c 	rsb	r0, r0, #28
   8507c:	4403      	add	r3, r0
   8507e:	930a      	str	r3, [sp, #40]	; 0x28
   85080:	4613      	mov	r3, r2
   85082:	4403      	add	r3, r0
   85084:	4405      	add	r5, r0
   85086:	9308      	str	r3, [sp, #32]
   85088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8508a:	2b00      	cmp	r3, #0
   8508c:	dd05      	ble.n	8509a <_dtoa_r+0x522>
   8508e:	4649      	mov	r1, r9
   85090:	461a      	mov	r2, r3
   85092:	4620      	mov	r0, r4
   85094:	f001 ff6a 	bl	86f6c <__lshift>
   85098:	4681      	mov	r9, r0
   8509a:	9b08      	ldr	r3, [sp, #32]
   8509c:	2b00      	cmp	r3, #0
   8509e:	dd05      	ble.n	850ac <_dtoa_r+0x534>
   850a0:	4641      	mov	r1, r8
   850a2:	461a      	mov	r2, r3
   850a4:	4620      	mov	r0, r4
   850a6:	f001 ff61 	bl	86f6c <__lshift>
   850aa:	4680      	mov	r8, r0
   850ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   850ae:	2b00      	cmp	r3, #0
   850b0:	f040 8086 	bne.w	851c0 <_dtoa_r+0x648>
   850b4:	9b07      	ldr	r3, [sp, #28]
   850b6:	2b00      	cmp	r3, #0
   850b8:	f340 8264 	ble.w	85584 <_dtoa_r+0xa0c>
   850bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   850be:	2b00      	cmp	r3, #0
   850c0:	f000 8098 	beq.w	851f4 <_dtoa_r+0x67c>
   850c4:	2d00      	cmp	r5, #0
   850c6:	dd05      	ble.n	850d4 <_dtoa_r+0x55c>
   850c8:	4631      	mov	r1, r6
   850ca:	462a      	mov	r2, r5
   850cc:	4620      	mov	r0, r4
   850ce:	f001 ff4d 	bl	86f6c <__lshift>
   850d2:	4606      	mov	r6, r0
   850d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   850d6:	2b00      	cmp	r3, #0
   850d8:	f040 8336 	bne.w	85748 <_dtoa_r+0xbd0>
   850dc:	9608      	str	r6, [sp, #32]
   850de:	9b07      	ldr	r3, [sp, #28]
   850e0:	9a04      	ldr	r2, [sp, #16]
   850e2:	3b01      	subs	r3, #1
   850e4:	18d3      	adds	r3, r2, r3
   850e6:	930b      	str	r3, [sp, #44]	; 0x2c
   850e8:	4617      	mov	r7, r2
   850ea:	f00a 0301 	and.w	r3, sl, #1
   850ee:	46c2      	mov	sl, r8
   850f0:	f8dd b020 	ldr.w	fp, [sp, #32]
   850f4:	930c      	str	r3, [sp, #48]	; 0x30
   850f6:	4651      	mov	r1, sl
   850f8:	4648      	mov	r0, r9
   850fa:	f7ff fca9 	bl	84a50 <quorem>
   850fe:	4631      	mov	r1, r6
   85100:	4605      	mov	r5, r0
   85102:	4648      	mov	r0, r9
   85104:	f001 ff82 	bl	8700c <__mcmp>
   85108:	465a      	mov	r2, fp
   8510a:	9007      	str	r0, [sp, #28]
   8510c:	4651      	mov	r1, sl
   8510e:	4620      	mov	r0, r4
   85110:	f001 ff98 	bl	87044 <__mdiff>
   85114:	68c2      	ldr	r2, [r0, #12]
   85116:	4680      	mov	r8, r0
   85118:	f105 0330 	add.w	r3, r5, #48	; 0x30
   8511c:	2a00      	cmp	r2, #0
   8511e:	f040 8229 	bne.w	85574 <_dtoa_r+0x9fc>
   85122:	4601      	mov	r1, r0
   85124:	4648      	mov	r0, r9
   85126:	930a      	str	r3, [sp, #40]	; 0x28
   85128:	f001 ff70 	bl	8700c <__mcmp>
   8512c:	4641      	mov	r1, r8
   8512e:	9008      	str	r0, [sp, #32]
   85130:	4620      	mov	r0, r4
   85132:	f001 fd93 	bl	86c5c <_Bfree>
   85136:	9a08      	ldr	r2, [sp, #32]
   85138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8513a:	b932      	cbnz	r2, 8514a <_dtoa_r+0x5d2>
   8513c:	9924      	ldr	r1, [sp, #144]	; 0x90
   8513e:	b921      	cbnz	r1, 8514a <_dtoa_r+0x5d2>
   85140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85142:	2a00      	cmp	r2, #0
   85144:	f000 83ee 	beq.w	85924 <_dtoa_r+0xdac>
   85148:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8514a:	9907      	ldr	r1, [sp, #28]
   8514c:	2900      	cmp	r1, #0
   8514e:	f2c0 829f 	blt.w	85690 <_dtoa_r+0xb18>
   85152:	d105      	bne.n	85160 <_dtoa_r+0x5e8>
   85154:	9924      	ldr	r1, [sp, #144]	; 0x90
   85156:	b919      	cbnz	r1, 85160 <_dtoa_r+0x5e8>
   85158:	990c      	ldr	r1, [sp, #48]	; 0x30
   8515a:	2900      	cmp	r1, #0
   8515c:	f000 8298 	beq.w	85690 <_dtoa_r+0xb18>
   85160:	2a00      	cmp	r2, #0
   85162:	f300 8305 	bgt.w	85770 <_dtoa_r+0xbf8>
   85166:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85168:	f107 0801 	add.w	r8, r7, #1
   8516c:	4297      	cmp	r7, r2
   8516e:	703b      	strb	r3, [r7, #0]
   85170:	4645      	mov	r5, r8
   85172:	f000 830b 	beq.w	8578c <_dtoa_r+0xc14>
   85176:	4649      	mov	r1, r9
   85178:	2300      	movs	r3, #0
   8517a:	220a      	movs	r2, #10
   8517c:	4620      	mov	r0, r4
   8517e:	f001 fd77 	bl	86c70 <__multadd>
   85182:	455e      	cmp	r6, fp
   85184:	4681      	mov	r9, r0
   85186:	4631      	mov	r1, r6
   85188:	f04f 0300 	mov.w	r3, #0
   8518c:	f04f 020a 	mov.w	r2, #10
   85190:	4620      	mov	r0, r4
   85192:	f000 81e9 	beq.w	85568 <_dtoa_r+0x9f0>
   85196:	f001 fd6b 	bl	86c70 <__multadd>
   8519a:	4659      	mov	r1, fp
   8519c:	4606      	mov	r6, r0
   8519e:	2300      	movs	r3, #0
   851a0:	220a      	movs	r2, #10
   851a2:	4620      	mov	r0, r4
   851a4:	f001 fd64 	bl	86c70 <__multadd>
   851a8:	4647      	mov	r7, r8
   851aa:	4683      	mov	fp, r0
   851ac:	e7a3      	b.n	850f6 <_dtoa_r+0x57e>
   851ae:	201c      	movs	r0, #28
   851b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   851b2:	4405      	add	r5, r0
   851b4:	4403      	add	r3, r0
   851b6:	930a      	str	r3, [sp, #40]	; 0x28
   851b8:	9b08      	ldr	r3, [sp, #32]
   851ba:	4403      	add	r3, r0
   851bc:	9308      	str	r3, [sp, #32]
   851be:	e763      	b.n	85088 <_dtoa_r+0x510>
   851c0:	4641      	mov	r1, r8
   851c2:	4648      	mov	r0, r9
   851c4:	f001 ff22 	bl	8700c <__mcmp>
   851c8:	2800      	cmp	r0, #0
   851ca:	f6bf af73 	bge.w	850b4 <_dtoa_r+0x53c>
   851ce:	9f02      	ldr	r7, [sp, #8]
   851d0:	4649      	mov	r1, r9
   851d2:	2300      	movs	r3, #0
   851d4:	220a      	movs	r2, #10
   851d6:	4620      	mov	r0, r4
   851d8:	3f01      	subs	r7, #1
   851da:	9702      	str	r7, [sp, #8]
   851dc:	f001 fd48 	bl	86c70 <__multadd>
   851e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   851e2:	4681      	mov	r9, r0
   851e4:	2b00      	cmp	r3, #0
   851e6:	f040 83b5 	bne.w	85954 <_dtoa_r+0xddc>
   851ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   851ec:	2b00      	cmp	r3, #0
   851ee:	f340 83be 	ble.w	8596e <_dtoa_r+0xdf6>
   851f2:	9307      	str	r3, [sp, #28]
   851f4:	f8dd a010 	ldr.w	sl, [sp, #16]
   851f8:	9f07      	ldr	r7, [sp, #28]
   851fa:	4655      	mov	r5, sl
   851fc:	e006      	b.n	8520c <_dtoa_r+0x694>
   851fe:	4649      	mov	r1, r9
   85200:	2300      	movs	r3, #0
   85202:	220a      	movs	r2, #10
   85204:	4620      	mov	r0, r4
   85206:	f001 fd33 	bl	86c70 <__multadd>
   8520a:	4681      	mov	r9, r0
   8520c:	4641      	mov	r1, r8
   8520e:	4648      	mov	r0, r9
   85210:	f7ff fc1e 	bl	84a50 <quorem>
   85214:	3030      	adds	r0, #48	; 0x30
   85216:	f805 0b01 	strb.w	r0, [r5], #1
   8521a:	eba5 030a 	sub.w	r3, r5, sl
   8521e:	42bb      	cmp	r3, r7
   85220:	dbed      	blt.n	851fe <_dtoa_r+0x686>
   85222:	9b04      	ldr	r3, [sp, #16]
   85224:	9a07      	ldr	r2, [sp, #28]
   85226:	4682      	mov	sl, r0
   85228:	2a01      	cmp	r2, #1
   8522a:	bfac      	ite	ge
   8522c:	189b      	addge	r3, r3, r2
   8522e:	3301      	addlt	r3, #1
   85230:	f04f 0b00 	mov.w	fp, #0
   85234:	461d      	mov	r5, r3
   85236:	4649      	mov	r1, r9
   85238:	2201      	movs	r2, #1
   8523a:	4620      	mov	r0, r4
   8523c:	f001 fe96 	bl	86f6c <__lshift>
   85240:	4641      	mov	r1, r8
   85242:	4681      	mov	r9, r0
   85244:	f001 fee2 	bl	8700c <__mcmp>
   85248:	2800      	cmp	r0, #0
   8524a:	f340 823f 	ble.w	856cc <_dtoa_r+0xb54>
   8524e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   85252:	1e6b      	subs	r3, r5, #1
   85254:	9904      	ldr	r1, [sp, #16]
   85256:	e004      	b.n	85262 <_dtoa_r+0x6ea>
   85258:	428b      	cmp	r3, r1
   8525a:	f000 81ae 	beq.w	855ba <_dtoa_r+0xa42>
   8525e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   85262:	2a39      	cmp	r2, #57	; 0x39
   85264:	f103 0501 	add.w	r5, r3, #1
   85268:	d0f6      	beq.n	85258 <_dtoa_r+0x6e0>
   8526a:	3201      	adds	r2, #1
   8526c:	701a      	strb	r2, [r3, #0]
   8526e:	4641      	mov	r1, r8
   85270:	4620      	mov	r0, r4
   85272:	f001 fcf3 	bl	86c5c <_Bfree>
   85276:	2e00      	cmp	r6, #0
   85278:	f43f ae3d 	beq.w	84ef6 <_dtoa_r+0x37e>
   8527c:	f1bb 0f00 	cmp.w	fp, #0
   85280:	d005      	beq.n	8528e <_dtoa_r+0x716>
   85282:	45b3      	cmp	fp, r6
   85284:	d003      	beq.n	8528e <_dtoa_r+0x716>
   85286:	4659      	mov	r1, fp
   85288:	4620      	mov	r0, r4
   8528a:	f001 fce7 	bl	86c5c <_Bfree>
   8528e:	4631      	mov	r1, r6
   85290:	4620      	mov	r0, r4
   85292:	f001 fce3 	bl	86c5c <_Bfree>
   85296:	e62e      	b.n	84ef6 <_dtoa_r+0x37e>
   85298:	2300      	movs	r3, #0
   8529a:	930b      	str	r3, [sp, #44]	; 0x2c
   8529c:	9b02      	ldr	r3, [sp, #8]
   8529e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   852a0:	4413      	add	r3, r2
   852a2:	930f      	str	r3, [sp, #60]	; 0x3c
   852a4:	3301      	adds	r3, #1
   852a6:	2b01      	cmp	r3, #1
   852a8:	461f      	mov	r7, r3
   852aa:	461e      	mov	r6, r3
   852ac:	bfb8      	it	lt
   852ae:	2701      	movlt	r7, #1
   852b0:	9307      	str	r3, [sp, #28]
   852b2:	2100      	movs	r1, #0
   852b4:	2f17      	cmp	r7, #23
   852b6:	6461      	str	r1, [r4, #68]	; 0x44
   852b8:	d90a      	bls.n	852d0 <_dtoa_r+0x758>
   852ba:	2201      	movs	r2, #1
   852bc:	2304      	movs	r3, #4
   852be:	005b      	lsls	r3, r3, #1
   852c0:	f103 0014 	add.w	r0, r3, #20
   852c4:	4287      	cmp	r7, r0
   852c6:	4611      	mov	r1, r2
   852c8:	f102 0201 	add.w	r2, r2, #1
   852cc:	d2f7      	bcs.n	852be <_dtoa_r+0x746>
   852ce:	6461      	str	r1, [r4, #68]	; 0x44
   852d0:	4620      	mov	r0, r4
   852d2:	f001 fc9d 	bl	86c10 <_Balloc>
   852d6:	2e0e      	cmp	r6, #14
   852d8:	9004      	str	r0, [sp, #16]
   852da:	6420      	str	r0, [r4, #64]	; 0x40
   852dc:	f63f ad47 	bhi.w	84d6e <_dtoa_r+0x1f6>
   852e0:	2d00      	cmp	r5, #0
   852e2:	f43f ad44 	beq.w	84d6e <_dtoa_r+0x1f6>
   852e6:	9902      	ldr	r1, [sp, #8]
   852e8:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   852ec:	2900      	cmp	r1, #0
   852ee:	f340 8203 	ble.w	856f8 <_dtoa_r+0xb80>
   852f2:	4bb9      	ldr	r3, [pc, #740]	; (855d8 <_dtoa_r+0xa60>)
   852f4:	f001 020f 	and.w	r2, r1, #15
   852f8:	110d      	asrs	r5, r1, #4
   852fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   852fe:	06e9      	lsls	r1, r5, #27
   85300:	e9d3 6700 	ldrd	r6, r7, [r3]
   85304:	f140 81af 	bpl.w	85666 <_dtoa_r+0xaee>
   85308:	4bb4      	ldr	r3, [pc, #720]	; (855dc <_dtoa_r+0xa64>)
   8530a:	4650      	mov	r0, sl
   8530c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   85310:	4659      	mov	r1, fp
   85312:	f002 fe89 	bl	88028 <__aeabi_ddiv>
   85316:	f04f 0a03 	mov.w	sl, #3
   8531a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   8531e:	f005 050f 	and.w	r5, r5, #15
   85322:	b18d      	cbz	r5, 85348 <_dtoa_r+0x7d0>
   85324:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 855dc <_dtoa_r+0xa64>
   85328:	07ea      	lsls	r2, r5, #31
   8532a:	d509      	bpl.n	85340 <_dtoa_r+0x7c8>
   8532c:	e9d8 2300 	ldrd	r2, r3, [r8]
   85330:	4630      	mov	r0, r6
   85332:	4639      	mov	r1, r7
   85334:	f002 fd4e 	bl	87dd4 <__aeabi_dmul>
   85338:	4606      	mov	r6, r0
   8533a:	460f      	mov	r7, r1
   8533c:	f10a 0a01 	add.w	sl, sl, #1
   85340:	106d      	asrs	r5, r5, #1
   85342:	f108 0808 	add.w	r8, r8, #8
   85346:	d1ef      	bne.n	85328 <_dtoa_r+0x7b0>
   85348:	463b      	mov	r3, r7
   8534a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   8534e:	4632      	mov	r2, r6
   85350:	f002 fe6a 	bl	88028 <__aeabi_ddiv>
   85354:	4607      	mov	r7, r0
   85356:	4688      	mov	r8, r1
   85358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8535a:	b143      	cbz	r3, 8536e <_dtoa_r+0x7f6>
   8535c:	2200      	movs	r2, #0
   8535e:	4ba0      	ldr	r3, [pc, #640]	; (855e0 <_dtoa_r+0xa68>)
   85360:	4638      	mov	r0, r7
   85362:	4641      	mov	r1, r8
   85364:	f002 ffa8 	bl	882b8 <__aeabi_dcmplt>
   85368:	2800      	cmp	r0, #0
   8536a:	f040 8287 	bne.w	8587c <_dtoa_r+0xd04>
   8536e:	4650      	mov	r0, sl
   85370:	f002 fcca 	bl	87d08 <__aeabi_i2d>
   85374:	463a      	mov	r2, r7
   85376:	4643      	mov	r3, r8
   85378:	f002 fd2c 	bl	87dd4 <__aeabi_dmul>
   8537c:	4b99      	ldr	r3, [pc, #612]	; (855e4 <_dtoa_r+0xa6c>)
   8537e:	2200      	movs	r2, #0
   85380:	f002 fb76 	bl	87a70 <__adddf3>
   85384:	9b07      	ldr	r3, [sp, #28]
   85386:	4605      	mov	r5, r0
   85388:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8538c:	2b00      	cmp	r3, #0
   8538e:	f000 813f 	beq.w	85610 <_dtoa_r+0xa98>
   85392:	9b02      	ldr	r3, [sp, #8]
   85394:	9315      	str	r3, [sp, #84]	; 0x54
   85396:	9b07      	ldr	r3, [sp, #28]
   85398:	9312      	str	r3, [sp, #72]	; 0x48
   8539a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8539c:	2b00      	cmp	r3, #0
   8539e:	f000 81fb 	beq.w	85798 <_dtoa_r+0xc20>
   853a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   853a4:	4b8c      	ldr	r3, [pc, #560]	; (855d8 <_dtoa_r+0xa60>)
   853a6:	2000      	movs	r0, #0
   853a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   853ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   853b0:	498d      	ldr	r1, [pc, #564]	; (855e8 <_dtoa_r+0xa70>)
   853b2:	f002 fe39 	bl	88028 <__aeabi_ddiv>
   853b6:	462a      	mov	r2, r5
   853b8:	4633      	mov	r3, r6
   853ba:	f002 fb57 	bl	87a6c <__aeabi_dsub>
   853be:	4682      	mov	sl, r0
   853c0:	468b      	mov	fp, r1
   853c2:	4638      	mov	r0, r7
   853c4:	4641      	mov	r1, r8
   853c6:	f002 ffb5 	bl	88334 <__aeabi_d2iz>
   853ca:	4605      	mov	r5, r0
   853cc:	f002 fc9c 	bl	87d08 <__aeabi_i2d>
   853d0:	4602      	mov	r2, r0
   853d2:	460b      	mov	r3, r1
   853d4:	4638      	mov	r0, r7
   853d6:	4641      	mov	r1, r8
   853d8:	f002 fb48 	bl	87a6c <__aeabi_dsub>
   853dc:	3530      	adds	r5, #48	; 0x30
   853de:	fa5f f885 	uxtb.w	r8, r5
   853e2:	9d04      	ldr	r5, [sp, #16]
   853e4:	4606      	mov	r6, r0
   853e6:	460f      	mov	r7, r1
   853e8:	f885 8000 	strb.w	r8, [r5]
   853ec:	4602      	mov	r2, r0
   853ee:	460b      	mov	r3, r1
   853f0:	4650      	mov	r0, sl
   853f2:	4659      	mov	r1, fp
   853f4:	3501      	adds	r5, #1
   853f6:	f002 ff7d 	bl	882f4 <__aeabi_dcmpgt>
   853fa:	2800      	cmp	r0, #0
   853fc:	d154      	bne.n	854a8 <_dtoa_r+0x930>
   853fe:	4632      	mov	r2, r6
   85400:	463b      	mov	r3, r7
   85402:	2000      	movs	r0, #0
   85404:	4976      	ldr	r1, [pc, #472]	; (855e0 <_dtoa_r+0xa68>)
   85406:	f002 fb31 	bl	87a6c <__aeabi_dsub>
   8540a:	4602      	mov	r2, r0
   8540c:	460b      	mov	r3, r1
   8540e:	4650      	mov	r0, sl
   85410:	4659      	mov	r1, fp
   85412:	f002 ff6f 	bl	882f4 <__aeabi_dcmpgt>
   85416:	2800      	cmp	r0, #0
   85418:	f040 8270 	bne.w	858fc <_dtoa_r+0xd84>
   8541c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8541e:	2a01      	cmp	r2, #1
   85420:	f000 8112 	beq.w	85648 <_dtoa_r+0xad0>
   85424:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85426:	9a04      	ldr	r2, [sp, #16]
   85428:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8542c:	4413      	add	r3, r2
   8542e:	4699      	mov	r9, r3
   85430:	e00f      	b.n	85452 <_dtoa_r+0x8da>
   85432:	4632      	mov	r2, r6
   85434:	463b      	mov	r3, r7
   85436:	2000      	movs	r0, #0
   85438:	4969      	ldr	r1, [pc, #420]	; (855e0 <_dtoa_r+0xa68>)
   8543a:	f002 fb17 	bl	87a6c <__aeabi_dsub>
   8543e:	4652      	mov	r2, sl
   85440:	465b      	mov	r3, fp
   85442:	f002 ff39 	bl	882b8 <__aeabi_dcmplt>
   85446:	2800      	cmp	r0, #0
   85448:	f040 8256 	bne.w	858f8 <_dtoa_r+0xd80>
   8544c:	454d      	cmp	r5, r9
   8544e:	f000 80f9 	beq.w	85644 <_dtoa_r+0xacc>
   85452:	4650      	mov	r0, sl
   85454:	4659      	mov	r1, fp
   85456:	2200      	movs	r2, #0
   85458:	4b64      	ldr	r3, [pc, #400]	; (855ec <_dtoa_r+0xa74>)
   8545a:	f002 fcbb 	bl	87dd4 <__aeabi_dmul>
   8545e:	2200      	movs	r2, #0
   85460:	4b62      	ldr	r3, [pc, #392]	; (855ec <_dtoa_r+0xa74>)
   85462:	4682      	mov	sl, r0
   85464:	468b      	mov	fp, r1
   85466:	4630      	mov	r0, r6
   85468:	4639      	mov	r1, r7
   8546a:	f002 fcb3 	bl	87dd4 <__aeabi_dmul>
   8546e:	460f      	mov	r7, r1
   85470:	4606      	mov	r6, r0
   85472:	f002 ff5f 	bl	88334 <__aeabi_d2iz>
   85476:	4680      	mov	r8, r0
   85478:	f002 fc46 	bl	87d08 <__aeabi_i2d>
   8547c:	4602      	mov	r2, r0
   8547e:	460b      	mov	r3, r1
   85480:	4630      	mov	r0, r6
   85482:	4639      	mov	r1, r7
   85484:	f002 faf2 	bl	87a6c <__aeabi_dsub>
   85488:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8548c:	fa5f f888 	uxtb.w	r8, r8
   85490:	f805 8b01 	strb.w	r8, [r5], #1
   85494:	4652      	mov	r2, sl
   85496:	465b      	mov	r3, fp
   85498:	4606      	mov	r6, r0
   8549a:	460f      	mov	r7, r1
   8549c:	f002 ff0c 	bl	882b8 <__aeabi_dcmplt>
   854a0:	2800      	cmp	r0, #0
   854a2:	d0c6      	beq.n	85432 <_dtoa_r+0x8ba>
   854a4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   854a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   854aa:	9302      	str	r3, [sp, #8]
   854ac:	e523      	b.n	84ef6 <_dtoa_r+0x37e>
   854ae:	2300      	movs	r3, #0
   854b0:	930b      	str	r3, [sp, #44]	; 0x2c
   854b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   854b4:	2b00      	cmp	r3, #0
   854b6:	f340 80dd 	ble.w	85674 <_dtoa_r+0xafc>
   854ba:	461f      	mov	r7, r3
   854bc:	461e      	mov	r6, r3
   854be:	930f      	str	r3, [sp, #60]	; 0x3c
   854c0:	9307      	str	r3, [sp, #28]
   854c2:	e6f6      	b.n	852b2 <_dtoa_r+0x73a>
   854c4:	2301      	movs	r3, #1
   854c6:	930b      	str	r3, [sp, #44]	; 0x2c
   854c8:	e7f3      	b.n	854b2 <_dtoa_r+0x93a>
   854ca:	f1ba 0f00 	cmp.w	sl, #0
   854ce:	f47f ada7 	bne.w	85020 <_dtoa_r+0x4a8>
   854d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   854d6:	2b00      	cmp	r3, #0
   854d8:	f47f adbc 	bne.w	85054 <_dtoa_r+0x4dc>
   854dc:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   854e0:	0d3f      	lsrs	r7, r7, #20
   854e2:	053f      	lsls	r7, r7, #20
   854e4:	2f00      	cmp	r7, #0
   854e6:	f000 820d 	beq.w	85904 <_dtoa_r+0xd8c>
   854ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   854ec:	3301      	adds	r3, #1
   854ee:	930a      	str	r3, [sp, #40]	; 0x28
   854f0:	9b08      	ldr	r3, [sp, #32]
   854f2:	3301      	adds	r3, #1
   854f4:	9308      	str	r3, [sp, #32]
   854f6:	2301      	movs	r3, #1
   854f8:	930c      	str	r3, [sp, #48]	; 0x30
   854fa:	e5ad      	b.n	85058 <_dtoa_r+0x4e0>
   854fc:	9b07      	ldr	r3, [sp, #28]
   854fe:	2b00      	cmp	r3, #0
   85500:	f73f ac48 	bgt.w	84d94 <_dtoa_r+0x21c>
   85504:	f040 8222 	bne.w	8594c <_dtoa_r+0xdd4>
   85508:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8550c:	2200      	movs	r2, #0
   8550e:	4b38      	ldr	r3, [pc, #224]	; (855f0 <_dtoa_r+0xa78>)
   85510:	f002 fc60 	bl	87dd4 <__aeabi_dmul>
   85514:	4652      	mov	r2, sl
   85516:	465b      	mov	r3, fp
   85518:	f002 fee2 	bl	882e0 <__aeabi_dcmpge>
   8551c:	f8dd 801c 	ldr.w	r8, [sp, #28]
   85520:	4646      	mov	r6, r8
   85522:	2800      	cmp	r0, #0
   85524:	d041      	beq.n	855aa <_dtoa_r+0xa32>
   85526:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85528:	9d04      	ldr	r5, [sp, #16]
   8552a:	43db      	mvns	r3, r3
   8552c:	9302      	str	r3, [sp, #8]
   8552e:	4641      	mov	r1, r8
   85530:	4620      	mov	r0, r4
   85532:	f001 fb93 	bl	86c5c <_Bfree>
   85536:	2e00      	cmp	r6, #0
   85538:	f43f acdd 	beq.w	84ef6 <_dtoa_r+0x37e>
   8553c:	e6a7      	b.n	8528e <_dtoa_r+0x716>
   8553e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85540:	4649      	mov	r1, r9
   85542:	4620      	mov	r0, r4
   85544:	f001 fcc2 	bl	86ecc <__pow5mult>
   85548:	4681      	mov	r9, r0
   8554a:	e557      	b.n	84ffc <_dtoa_r+0x484>
   8554c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   8554e:	2a00      	cmp	r2, #0
   85550:	f000 8188 	beq.w	85864 <_dtoa_r+0xcec>
   85554:	f203 4333 	addw	r3, r3, #1075	; 0x433
   85558:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8555a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8555c:	e4f2      	b.n	84f44 <_dtoa_r+0x3cc>
   8555e:	f1ba 0f00 	cmp.w	sl, #0
   85562:	f47f ad77 	bne.w	85054 <_dtoa_r+0x4dc>
   85566:	e7b4      	b.n	854d2 <_dtoa_r+0x95a>
   85568:	f001 fb82 	bl	86c70 <__multadd>
   8556c:	4647      	mov	r7, r8
   8556e:	4606      	mov	r6, r0
   85570:	4683      	mov	fp, r0
   85572:	e5c0      	b.n	850f6 <_dtoa_r+0x57e>
   85574:	4601      	mov	r1, r0
   85576:	4620      	mov	r0, r4
   85578:	9308      	str	r3, [sp, #32]
   8557a:	f001 fb6f 	bl	86c5c <_Bfree>
   8557e:	2201      	movs	r2, #1
   85580:	9b08      	ldr	r3, [sp, #32]
   85582:	e5e2      	b.n	8514a <_dtoa_r+0x5d2>
   85584:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85586:	2b02      	cmp	r3, #2
   85588:	f77f ad98 	ble.w	850bc <_dtoa_r+0x544>
   8558c:	9b07      	ldr	r3, [sp, #28]
   8558e:	2b00      	cmp	r3, #0
   85590:	d1c9      	bne.n	85526 <_dtoa_r+0x9ae>
   85592:	4641      	mov	r1, r8
   85594:	2205      	movs	r2, #5
   85596:	4620      	mov	r0, r4
   85598:	f001 fb6a 	bl	86c70 <__multadd>
   8559c:	4601      	mov	r1, r0
   8559e:	4680      	mov	r8, r0
   855a0:	4648      	mov	r0, r9
   855a2:	f001 fd33 	bl	8700c <__mcmp>
   855a6:	2800      	cmp	r0, #0
   855a8:	ddbd      	ble.n	85526 <_dtoa_r+0x9ae>
   855aa:	2331      	movs	r3, #49	; 0x31
   855ac:	9a02      	ldr	r2, [sp, #8]
   855ae:	9904      	ldr	r1, [sp, #16]
   855b0:	3201      	adds	r2, #1
   855b2:	9202      	str	r2, [sp, #8]
   855b4:	700b      	strb	r3, [r1, #0]
   855b6:	1c4d      	adds	r5, r1, #1
   855b8:	e7b9      	b.n	8552e <_dtoa_r+0x9b6>
   855ba:	2331      	movs	r3, #49	; 0x31
   855bc:	9a02      	ldr	r2, [sp, #8]
   855be:	3201      	adds	r2, #1
   855c0:	9202      	str	r2, [sp, #8]
   855c2:	9a04      	ldr	r2, [sp, #16]
   855c4:	7013      	strb	r3, [r2, #0]
   855c6:	e652      	b.n	8526e <_dtoa_r+0x6f6>
   855c8:	2301      	movs	r3, #1
   855ca:	930b      	str	r3, [sp, #44]	; 0x2c
   855cc:	e666      	b.n	8529c <_dtoa_r+0x724>
   855ce:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   855d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   855d4:	e48f      	b.n	84ef6 <_dtoa_r+0x37e>
   855d6:	bf00      	nop
   855d8:	00088b10 	.word	0x00088b10
   855dc:	00088ae8 	.word	0x00088ae8
   855e0:	3ff00000 	.word	0x3ff00000
   855e4:	401c0000 	.word	0x401c0000
   855e8:	3fe00000 	.word	0x3fe00000
   855ec:	40240000 	.word	0x40240000
   855f0:	40140000 	.word	0x40140000
   855f4:	4650      	mov	r0, sl
   855f6:	f002 fb87 	bl	87d08 <__aeabi_i2d>
   855fa:	463a      	mov	r2, r7
   855fc:	4643      	mov	r3, r8
   855fe:	f002 fbe9 	bl	87dd4 <__aeabi_dmul>
   85602:	2200      	movs	r2, #0
   85604:	4bc1      	ldr	r3, [pc, #772]	; (8590c <_dtoa_r+0xd94>)
   85606:	f002 fa33 	bl	87a70 <__adddf3>
   8560a:	4605      	mov	r5, r0
   8560c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   85610:	4641      	mov	r1, r8
   85612:	2200      	movs	r2, #0
   85614:	4bbe      	ldr	r3, [pc, #760]	; (85910 <_dtoa_r+0xd98>)
   85616:	4638      	mov	r0, r7
   85618:	f002 fa28 	bl	87a6c <__aeabi_dsub>
   8561c:	462a      	mov	r2, r5
   8561e:	4633      	mov	r3, r6
   85620:	4682      	mov	sl, r0
   85622:	468b      	mov	fp, r1
   85624:	f002 fe66 	bl	882f4 <__aeabi_dcmpgt>
   85628:	4680      	mov	r8, r0
   8562a:	2800      	cmp	r0, #0
   8562c:	f040 8110 	bne.w	85850 <_dtoa_r+0xcd8>
   85630:	462a      	mov	r2, r5
   85632:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   85636:	4650      	mov	r0, sl
   85638:	4659      	mov	r1, fp
   8563a:	f002 fe3d 	bl	882b8 <__aeabi_dcmplt>
   8563e:	b118      	cbz	r0, 85648 <_dtoa_r+0xad0>
   85640:	4646      	mov	r6, r8
   85642:	e770      	b.n	85526 <_dtoa_r+0x9ae>
   85644:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   85648:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   8564c:	f7ff bb8f 	b.w	84d6e <_dtoa_r+0x1f6>
   85650:	9804      	ldr	r0, [sp, #16]
   85652:	f7ff bac0 	b.w	84bd6 <_dtoa_r+0x5e>
   85656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85658:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8565a:	1afb      	subs	r3, r7, r3
   8565c:	441a      	add	r2, r3
   8565e:	970c      	str	r7, [sp, #48]	; 0x30
   85660:	920d      	str	r2, [sp, #52]	; 0x34
   85662:	2700      	movs	r7, #0
   85664:	e468      	b.n	84f38 <_dtoa_r+0x3c0>
   85666:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8566a:	f04f 0a02 	mov.w	sl, #2
   8566e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   85672:	e656      	b.n	85322 <_dtoa_r+0x7aa>
   85674:	2100      	movs	r1, #0
   85676:	2301      	movs	r3, #1
   85678:	4620      	mov	r0, r4
   8567a:	6461      	str	r1, [r4, #68]	; 0x44
   8567c:	9325      	str	r3, [sp, #148]	; 0x94
   8567e:	f001 fac7 	bl	86c10 <_Balloc>
   85682:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85684:	9004      	str	r0, [sp, #16]
   85686:	9307      	str	r3, [sp, #28]
   85688:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8568a:	6420      	str	r0, [r4, #64]	; 0x40
   8568c:	930f      	str	r3, [sp, #60]	; 0x3c
   8568e:	e627      	b.n	852e0 <_dtoa_r+0x768>
   85690:	2a00      	cmp	r2, #0
   85692:	46d0      	mov	r8, sl
   85694:	f8cd b020 	str.w	fp, [sp, #32]
   85698:	469a      	mov	sl, r3
   8569a:	dd11      	ble.n	856c0 <_dtoa_r+0xb48>
   8569c:	4649      	mov	r1, r9
   8569e:	2201      	movs	r2, #1
   856a0:	4620      	mov	r0, r4
   856a2:	f001 fc63 	bl	86f6c <__lshift>
   856a6:	4641      	mov	r1, r8
   856a8:	4681      	mov	r9, r0
   856aa:	f001 fcaf 	bl	8700c <__mcmp>
   856ae:	2800      	cmp	r0, #0
   856b0:	f340 8145 	ble.w	8593e <_dtoa_r+0xdc6>
   856b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   856b8:	f000 8105 	beq.w	858c6 <_dtoa_r+0xd4e>
   856bc:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   856c0:	46b3      	mov	fp, r6
   856c2:	f887 a000 	strb.w	sl, [r7]
   856c6:	1c7d      	adds	r5, r7, #1
   856c8:	9e08      	ldr	r6, [sp, #32]
   856ca:	e5d0      	b.n	8526e <_dtoa_r+0x6f6>
   856cc:	d104      	bne.n	856d8 <_dtoa_r+0xb60>
   856ce:	f01a 0f01 	tst.w	sl, #1
   856d2:	d001      	beq.n	856d8 <_dtoa_r+0xb60>
   856d4:	e5bb      	b.n	8524e <_dtoa_r+0x6d6>
   856d6:	4615      	mov	r5, r2
   856d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   856dc:	1e6a      	subs	r2, r5, #1
   856de:	2b30      	cmp	r3, #48	; 0x30
   856e0:	d0f9      	beq.n	856d6 <_dtoa_r+0xb5e>
   856e2:	e5c4      	b.n	8526e <_dtoa_r+0x6f6>
   856e4:	2230      	movs	r2, #48	; 0x30
   856e6:	9904      	ldr	r1, [sp, #16]
   856e8:	700a      	strb	r2, [r1, #0]
   856ea:	9a02      	ldr	r2, [sp, #8]
   856ec:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   856f0:	3201      	adds	r2, #1
   856f2:	9202      	str	r2, [sp, #8]
   856f4:	f7ff bbfb 	b.w	84eee <_dtoa_r+0x376>
   856f8:	f000 80bb 	beq.w	85872 <_dtoa_r+0xcfa>
   856fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   85700:	9b02      	ldr	r3, [sp, #8]
   85702:	f04f 0a02 	mov.w	sl, #2
   85706:	425d      	negs	r5, r3
   85708:	4b82      	ldr	r3, [pc, #520]	; (85914 <_dtoa_r+0xd9c>)
   8570a:	f005 020f 	and.w	r2, r5, #15
   8570e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85712:	e9d3 2300 	ldrd	r2, r3, [r3]
   85716:	f002 fb5d 	bl	87dd4 <__aeabi_dmul>
   8571a:	112d      	asrs	r5, r5, #4
   8571c:	4607      	mov	r7, r0
   8571e:	4688      	mov	r8, r1
   85720:	f43f ae1a 	beq.w	85358 <_dtoa_r+0x7e0>
   85724:	4e7c      	ldr	r6, [pc, #496]	; (85918 <_dtoa_r+0xda0>)
   85726:	07eb      	lsls	r3, r5, #31
   85728:	d509      	bpl.n	8573e <_dtoa_r+0xbc6>
   8572a:	e9d6 2300 	ldrd	r2, r3, [r6]
   8572e:	4638      	mov	r0, r7
   85730:	4641      	mov	r1, r8
   85732:	f002 fb4f 	bl	87dd4 <__aeabi_dmul>
   85736:	4607      	mov	r7, r0
   85738:	4688      	mov	r8, r1
   8573a:	f10a 0a01 	add.w	sl, sl, #1
   8573e:	106d      	asrs	r5, r5, #1
   85740:	f106 0608 	add.w	r6, r6, #8
   85744:	d1ef      	bne.n	85726 <_dtoa_r+0xbae>
   85746:	e607      	b.n	85358 <_dtoa_r+0x7e0>
   85748:	6871      	ldr	r1, [r6, #4]
   8574a:	4620      	mov	r0, r4
   8574c:	f001 fa60 	bl	86c10 <_Balloc>
   85750:	4605      	mov	r5, r0
   85752:	6933      	ldr	r3, [r6, #16]
   85754:	f106 010c 	add.w	r1, r6, #12
   85758:	3302      	adds	r3, #2
   8575a:	009a      	lsls	r2, r3, #2
   8575c:	300c      	adds	r0, #12
   8575e:	f001 f971 	bl	86a44 <memcpy>
   85762:	4629      	mov	r1, r5
   85764:	2201      	movs	r2, #1
   85766:	4620      	mov	r0, r4
   85768:	f001 fc00 	bl	86f6c <__lshift>
   8576c:	9008      	str	r0, [sp, #32]
   8576e:	e4b6      	b.n	850de <_dtoa_r+0x566>
   85770:	2b39      	cmp	r3, #57	; 0x39
   85772:	f8cd b020 	str.w	fp, [sp, #32]
   85776:	46d0      	mov	r8, sl
   85778:	f000 80a5 	beq.w	858c6 <_dtoa_r+0xd4e>
   8577c:	f103 0a01 	add.w	sl, r3, #1
   85780:	46b3      	mov	fp, r6
   85782:	f887 a000 	strb.w	sl, [r7]
   85786:	1c7d      	adds	r5, r7, #1
   85788:	9e08      	ldr	r6, [sp, #32]
   8578a:	e570      	b.n	8526e <_dtoa_r+0x6f6>
   8578c:	465a      	mov	r2, fp
   8578e:	46d0      	mov	r8, sl
   85790:	46b3      	mov	fp, r6
   85792:	469a      	mov	sl, r3
   85794:	4616      	mov	r6, r2
   85796:	e54e      	b.n	85236 <_dtoa_r+0x6be>
   85798:	9812      	ldr	r0, [sp, #72]	; 0x48
   8579a:	495e      	ldr	r1, [pc, #376]	; (85914 <_dtoa_r+0xd9c>)
   8579c:	462a      	mov	r2, r5
   8579e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   857a2:	4633      	mov	r3, r6
   857a4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   857a8:	f002 fb14 	bl	87dd4 <__aeabi_dmul>
   857ac:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   857b0:	4638      	mov	r0, r7
   857b2:	4641      	mov	r1, r8
   857b4:	f002 fdbe 	bl	88334 <__aeabi_d2iz>
   857b8:	4605      	mov	r5, r0
   857ba:	f002 faa5 	bl	87d08 <__aeabi_i2d>
   857be:	4602      	mov	r2, r0
   857c0:	460b      	mov	r3, r1
   857c2:	4638      	mov	r0, r7
   857c4:	4641      	mov	r1, r8
   857c6:	f002 f951 	bl	87a6c <__aeabi_dsub>
   857ca:	4606      	mov	r6, r0
   857cc:	9812      	ldr	r0, [sp, #72]	; 0x48
   857ce:	9a04      	ldr	r2, [sp, #16]
   857d0:	3530      	adds	r5, #48	; 0x30
   857d2:	2801      	cmp	r0, #1
   857d4:	7015      	strb	r5, [r2, #0]
   857d6:	460f      	mov	r7, r1
   857d8:	f102 0501 	add.w	r5, r2, #1
   857dc:	d026      	beq.n	8582c <_dtoa_r+0xcb4>
   857de:	9b12      	ldr	r3, [sp, #72]	; 0x48
   857e0:	9a04      	ldr	r2, [sp, #16]
   857e2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   857e6:	4413      	add	r3, r2
   857e8:	f04f 0a00 	mov.w	sl, #0
   857ec:	4699      	mov	r9, r3
   857ee:	f8df b130 	ldr.w	fp, [pc, #304]	; 85920 <_dtoa_r+0xda8>
   857f2:	4652      	mov	r2, sl
   857f4:	465b      	mov	r3, fp
   857f6:	4630      	mov	r0, r6
   857f8:	4639      	mov	r1, r7
   857fa:	f002 faeb 	bl	87dd4 <__aeabi_dmul>
   857fe:	460f      	mov	r7, r1
   85800:	4606      	mov	r6, r0
   85802:	f002 fd97 	bl	88334 <__aeabi_d2iz>
   85806:	4680      	mov	r8, r0
   85808:	f002 fa7e 	bl	87d08 <__aeabi_i2d>
   8580c:	4602      	mov	r2, r0
   8580e:	460b      	mov	r3, r1
   85810:	4630      	mov	r0, r6
   85812:	4639      	mov	r1, r7
   85814:	f002 f92a 	bl	87a6c <__aeabi_dsub>
   85818:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8581c:	f805 8b01 	strb.w	r8, [r5], #1
   85820:	454d      	cmp	r5, r9
   85822:	4606      	mov	r6, r0
   85824:	460f      	mov	r7, r1
   85826:	d1e4      	bne.n	857f2 <_dtoa_r+0xc7a>
   85828:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8582c:	2200      	movs	r2, #0
   8582e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   85832:	4b3a      	ldr	r3, [pc, #232]	; (8591c <_dtoa_r+0xda4>)
   85834:	f002 f91c 	bl	87a70 <__adddf3>
   85838:	4632      	mov	r2, r6
   8583a:	463b      	mov	r3, r7
   8583c:	f002 fd3c 	bl	882b8 <__aeabi_dcmplt>
   85840:	2800      	cmp	r0, #0
   85842:	d046      	beq.n	858d2 <_dtoa_r+0xd5a>
   85844:	9b15      	ldr	r3, [sp, #84]	; 0x54
   85846:	9302      	str	r3, [sp, #8]
   85848:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8584c:	f7ff bb42 	b.w	84ed4 <_dtoa_r+0x35c>
   85850:	f04f 0800 	mov.w	r8, #0
   85854:	4646      	mov	r6, r8
   85856:	e6a8      	b.n	855aa <_dtoa_r+0xa32>
   85858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8585a:	9a07      	ldr	r2, [sp, #28]
   8585c:	1a9d      	subs	r5, r3, r2
   8585e:	2300      	movs	r3, #0
   85860:	f7ff bb70 	b.w	84f44 <_dtoa_r+0x3cc>
   85864:	9b18      	ldr	r3, [sp, #96]	; 0x60
   85866:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85868:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8586c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8586e:	f7ff bb69 	b.w	84f44 <_dtoa_r+0x3cc>
   85872:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   85876:	f04f 0a02 	mov.w	sl, #2
   8587a:	e56d      	b.n	85358 <_dtoa_r+0x7e0>
   8587c:	9b07      	ldr	r3, [sp, #28]
   8587e:	2b00      	cmp	r3, #0
   85880:	f43f aeb8 	beq.w	855f4 <_dtoa_r+0xa7c>
   85884:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85886:	2b00      	cmp	r3, #0
   85888:	f77f aede 	ble.w	85648 <_dtoa_r+0xad0>
   8588c:	2200      	movs	r2, #0
   8588e:	4b24      	ldr	r3, [pc, #144]	; (85920 <_dtoa_r+0xda8>)
   85890:	4638      	mov	r0, r7
   85892:	4641      	mov	r1, r8
   85894:	f002 fa9e 	bl	87dd4 <__aeabi_dmul>
   85898:	4607      	mov	r7, r0
   8589a:	4688      	mov	r8, r1
   8589c:	f10a 0001 	add.w	r0, sl, #1
   858a0:	f002 fa32 	bl	87d08 <__aeabi_i2d>
   858a4:	463a      	mov	r2, r7
   858a6:	4643      	mov	r3, r8
   858a8:	f002 fa94 	bl	87dd4 <__aeabi_dmul>
   858ac:	2200      	movs	r2, #0
   858ae:	4b17      	ldr	r3, [pc, #92]	; (8590c <_dtoa_r+0xd94>)
   858b0:	f002 f8de 	bl	87a70 <__adddf3>
   858b4:	9a02      	ldr	r2, [sp, #8]
   858b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   858b8:	3a01      	subs	r2, #1
   858ba:	4605      	mov	r5, r0
   858bc:	9215      	str	r2, [sp, #84]	; 0x54
   858be:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   858c2:	9312      	str	r3, [sp, #72]	; 0x48
   858c4:	e569      	b.n	8539a <_dtoa_r+0x822>
   858c6:	2239      	movs	r2, #57	; 0x39
   858c8:	46b3      	mov	fp, r6
   858ca:	703a      	strb	r2, [r7, #0]
   858cc:	9e08      	ldr	r6, [sp, #32]
   858ce:	1c7d      	adds	r5, r7, #1
   858d0:	e4bf      	b.n	85252 <_dtoa_r+0x6da>
   858d2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   858d6:	2000      	movs	r0, #0
   858d8:	4910      	ldr	r1, [pc, #64]	; (8591c <_dtoa_r+0xda4>)
   858da:	f002 f8c7 	bl	87a6c <__aeabi_dsub>
   858de:	4632      	mov	r2, r6
   858e0:	463b      	mov	r3, r7
   858e2:	f002 fd07 	bl	882f4 <__aeabi_dcmpgt>
   858e6:	b908      	cbnz	r0, 858ec <_dtoa_r+0xd74>
   858e8:	e6ae      	b.n	85648 <_dtoa_r+0xad0>
   858ea:	4615      	mov	r5, r2
   858ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   858f0:	1e6a      	subs	r2, r5, #1
   858f2:	2b30      	cmp	r3, #48	; 0x30
   858f4:	d0f9      	beq.n	858ea <_dtoa_r+0xd72>
   858f6:	e5d7      	b.n	854a8 <_dtoa_r+0x930>
   858f8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   858fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   858fe:	9302      	str	r3, [sp, #8]
   85900:	f7ff bae8 	b.w	84ed4 <_dtoa_r+0x35c>
   85904:	970c      	str	r7, [sp, #48]	; 0x30
   85906:	f7ff bba7 	b.w	85058 <_dtoa_r+0x4e0>
   8590a:	bf00      	nop
   8590c:	401c0000 	.word	0x401c0000
   85910:	40140000 	.word	0x40140000
   85914:	00088b10 	.word	0x00088b10
   85918:	00088ae8 	.word	0x00088ae8
   8591c:	3fe00000 	.word	0x3fe00000
   85920:	40240000 	.word	0x40240000
   85924:	2b39      	cmp	r3, #57	; 0x39
   85926:	f8cd b020 	str.w	fp, [sp, #32]
   8592a:	46d0      	mov	r8, sl
   8592c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   85930:	469a      	mov	sl, r3
   85932:	d0c8      	beq.n	858c6 <_dtoa_r+0xd4e>
   85934:	f1bb 0f00 	cmp.w	fp, #0
   85938:	f73f aec0 	bgt.w	856bc <_dtoa_r+0xb44>
   8593c:	e6c0      	b.n	856c0 <_dtoa_r+0xb48>
   8593e:	f47f aebf 	bne.w	856c0 <_dtoa_r+0xb48>
   85942:	f01a 0f01 	tst.w	sl, #1
   85946:	f43f aebb 	beq.w	856c0 <_dtoa_r+0xb48>
   8594a:	e6b3      	b.n	856b4 <_dtoa_r+0xb3c>
   8594c:	f04f 0800 	mov.w	r8, #0
   85950:	4646      	mov	r6, r8
   85952:	e5e8      	b.n	85526 <_dtoa_r+0x9ae>
   85954:	4631      	mov	r1, r6
   85956:	2300      	movs	r3, #0
   85958:	220a      	movs	r2, #10
   8595a:	4620      	mov	r0, r4
   8595c:	f001 f988 	bl	86c70 <__multadd>
   85960:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85962:	4606      	mov	r6, r0
   85964:	2b00      	cmp	r3, #0
   85966:	dd07      	ble.n	85978 <_dtoa_r+0xe00>
   85968:	9307      	str	r3, [sp, #28]
   8596a:	f7ff bbab 	b.w	850c4 <_dtoa_r+0x54c>
   8596e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85970:	2b02      	cmp	r3, #2
   85972:	dc1f      	bgt.n	859b4 <_dtoa_r+0xe3c>
   85974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85976:	e43c      	b.n	851f2 <_dtoa_r+0x67a>
   85978:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8597a:	2b02      	cmp	r3, #2
   8597c:	dc1a      	bgt.n	859b4 <_dtoa_r+0xe3c>
   8597e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85980:	e7f2      	b.n	85968 <_dtoa_r+0xdf0>
   85982:	f43f ab81 	beq.w	85088 <_dtoa_r+0x510>
   85986:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8598a:	e411      	b.n	851b0 <_dtoa_r+0x638>
   8598c:	2500      	movs	r5, #0
   8598e:	4620      	mov	r0, r4
   85990:	6465      	str	r5, [r4, #68]	; 0x44
   85992:	4629      	mov	r1, r5
   85994:	f001 f93c 	bl	86c10 <_Balloc>
   85998:	f04f 33ff 	mov.w	r3, #4294967295
   8599c:	9307      	str	r3, [sp, #28]
   8599e:	930f      	str	r3, [sp, #60]	; 0x3c
   859a0:	2301      	movs	r3, #1
   859a2:	9004      	str	r0, [sp, #16]
   859a4:	9525      	str	r5, [sp, #148]	; 0x94
   859a6:	6420      	str	r0, [r4, #64]	; 0x40
   859a8:	930b      	str	r3, [sp, #44]	; 0x2c
   859aa:	f7ff b9e0 	b.w	84d6e <_dtoa_r+0x1f6>
   859ae:	2501      	movs	r5, #1
   859b0:	f7ff b9a8 	b.w	84d04 <_dtoa_r+0x18c>
   859b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   859b6:	9307      	str	r3, [sp, #28]
   859b8:	e5e8      	b.n	8558c <_dtoa_r+0xa14>
   859ba:	bf00      	nop

000859bc <__sflush_r>:
   859bc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   859c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   859c4:	b29a      	uxth	r2, r3
   859c6:	460d      	mov	r5, r1
   859c8:	0711      	lsls	r1, r2, #28
   859ca:	4680      	mov	r8, r0
   859cc:	d43a      	bmi.n	85a44 <__sflush_r+0x88>
   859ce:	686a      	ldr	r2, [r5, #4]
   859d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   859d4:	2a00      	cmp	r2, #0
   859d6:	81ab      	strh	r3, [r5, #12]
   859d8:	dd70      	ble.n	85abc <__sflush_r+0x100>
   859da:	6aac      	ldr	r4, [r5, #40]	; 0x28
   859dc:	2c00      	cmp	r4, #0
   859de:	d04a      	beq.n	85a76 <__sflush_r+0xba>
   859e0:	2200      	movs	r2, #0
   859e2:	b29b      	uxth	r3, r3
   859e4:	f8d8 6000 	ldr.w	r6, [r8]
   859e8:	f8c8 2000 	str.w	r2, [r8]
   859ec:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   859f0:	d068      	beq.n	85ac4 <__sflush_r+0x108>
   859f2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   859f4:	075f      	lsls	r7, r3, #29
   859f6:	d505      	bpl.n	85a04 <__sflush_r+0x48>
   859f8:	6869      	ldr	r1, [r5, #4]
   859fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   859fc:	1a52      	subs	r2, r2, r1
   859fe:	b10b      	cbz	r3, 85a04 <__sflush_r+0x48>
   85a00:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   85a02:	1ad2      	subs	r2, r2, r3
   85a04:	2300      	movs	r3, #0
   85a06:	69e9      	ldr	r1, [r5, #28]
   85a08:	4640      	mov	r0, r8
   85a0a:	47a0      	blx	r4
   85a0c:	1c44      	adds	r4, r0, #1
   85a0e:	d03d      	beq.n	85a8c <__sflush_r+0xd0>
   85a10:	2100      	movs	r1, #0
   85a12:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   85a16:	692a      	ldr	r2, [r5, #16]
   85a18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   85a1c:	81ab      	strh	r3, [r5, #12]
   85a1e:	04db      	lsls	r3, r3, #19
   85a20:	6069      	str	r1, [r5, #4]
   85a22:	602a      	str	r2, [r5, #0]
   85a24:	d448      	bmi.n	85ab8 <__sflush_r+0xfc>
   85a26:	6b29      	ldr	r1, [r5, #48]	; 0x30
   85a28:	f8c8 6000 	str.w	r6, [r8]
   85a2c:	b319      	cbz	r1, 85a76 <__sflush_r+0xba>
   85a2e:	f105 0340 	add.w	r3, r5, #64	; 0x40
   85a32:	4299      	cmp	r1, r3
   85a34:	d002      	beq.n	85a3c <__sflush_r+0x80>
   85a36:	4640      	mov	r0, r8
   85a38:	f000 f9da 	bl	85df0 <_free_r>
   85a3c:	2000      	movs	r0, #0
   85a3e:	6328      	str	r0, [r5, #48]	; 0x30
   85a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85a44:	692e      	ldr	r6, [r5, #16]
   85a46:	b1b6      	cbz	r6, 85a76 <__sflush_r+0xba>
   85a48:	0791      	lsls	r1, r2, #30
   85a4a:	bf18      	it	ne
   85a4c:	2300      	movne	r3, #0
   85a4e:	682c      	ldr	r4, [r5, #0]
   85a50:	bf08      	it	eq
   85a52:	696b      	ldreq	r3, [r5, #20]
   85a54:	602e      	str	r6, [r5, #0]
   85a56:	1ba4      	subs	r4, r4, r6
   85a58:	60ab      	str	r3, [r5, #8]
   85a5a:	e00a      	b.n	85a72 <__sflush_r+0xb6>
   85a5c:	4623      	mov	r3, r4
   85a5e:	4632      	mov	r2, r6
   85a60:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   85a62:	69e9      	ldr	r1, [r5, #28]
   85a64:	4640      	mov	r0, r8
   85a66:	47b8      	blx	r7
   85a68:	2800      	cmp	r0, #0
   85a6a:	eba4 0400 	sub.w	r4, r4, r0
   85a6e:	4406      	add	r6, r0
   85a70:	dd04      	ble.n	85a7c <__sflush_r+0xc0>
   85a72:	2c00      	cmp	r4, #0
   85a74:	dcf2      	bgt.n	85a5c <__sflush_r+0xa0>
   85a76:	2000      	movs	r0, #0
   85a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85a7c:	89ab      	ldrh	r3, [r5, #12]
   85a7e:	f04f 30ff 	mov.w	r0, #4294967295
   85a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85a86:	81ab      	strh	r3, [r5, #12]
   85a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85a8c:	f8d8 4000 	ldr.w	r4, [r8]
   85a90:	2c1d      	cmp	r4, #29
   85a92:	d8f3      	bhi.n	85a7c <__sflush_r+0xc0>
   85a94:	4b16      	ldr	r3, [pc, #88]	; (85af0 <__sflush_r+0x134>)
   85a96:	40e3      	lsrs	r3, r4
   85a98:	43db      	mvns	r3, r3
   85a9a:	f013 0301 	ands.w	r3, r3, #1
   85a9e:	d1ed      	bne.n	85a7c <__sflush_r+0xc0>
   85aa0:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   85aa4:	6929      	ldr	r1, [r5, #16]
   85aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   85aaa:	81aa      	strh	r2, [r5, #12]
   85aac:	04d2      	lsls	r2, r2, #19
   85aae:	606b      	str	r3, [r5, #4]
   85ab0:	6029      	str	r1, [r5, #0]
   85ab2:	d5b8      	bpl.n	85a26 <__sflush_r+0x6a>
   85ab4:	2c00      	cmp	r4, #0
   85ab6:	d1b6      	bne.n	85a26 <__sflush_r+0x6a>
   85ab8:	6528      	str	r0, [r5, #80]	; 0x50
   85aba:	e7b4      	b.n	85a26 <__sflush_r+0x6a>
   85abc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   85abe:	2a00      	cmp	r2, #0
   85ac0:	dc8b      	bgt.n	859da <__sflush_r+0x1e>
   85ac2:	e7d8      	b.n	85a76 <__sflush_r+0xba>
   85ac4:	2301      	movs	r3, #1
   85ac6:	69e9      	ldr	r1, [r5, #28]
   85ac8:	4640      	mov	r0, r8
   85aca:	47a0      	blx	r4
   85acc:	1c43      	adds	r3, r0, #1
   85ace:	4602      	mov	r2, r0
   85ad0:	d002      	beq.n	85ad8 <__sflush_r+0x11c>
   85ad2:	89ab      	ldrh	r3, [r5, #12]
   85ad4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   85ad6:	e78d      	b.n	859f4 <__sflush_r+0x38>
   85ad8:	f8d8 3000 	ldr.w	r3, [r8]
   85adc:	2b00      	cmp	r3, #0
   85ade:	d0f8      	beq.n	85ad2 <__sflush_r+0x116>
   85ae0:	2b1d      	cmp	r3, #29
   85ae2:	d001      	beq.n	85ae8 <__sflush_r+0x12c>
   85ae4:	2b16      	cmp	r3, #22
   85ae6:	d1c9      	bne.n	85a7c <__sflush_r+0xc0>
   85ae8:	f8c8 6000 	str.w	r6, [r8]
   85aec:	e7c3      	b.n	85a76 <__sflush_r+0xba>
   85aee:	bf00      	nop
   85af0:	20400001 	.word	0x20400001

00085af4 <_fflush_r>:
   85af4:	b538      	push	{r3, r4, r5, lr}
   85af6:	460d      	mov	r5, r1
   85af8:	4604      	mov	r4, r0
   85afa:	b108      	cbz	r0, 85b00 <_fflush_r+0xc>
   85afc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85afe:	b1bb      	cbz	r3, 85b30 <_fflush_r+0x3c>
   85b00:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   85b04:	b188      	cbz	r0, 85b2a <_fflush_r+0x36>
   85b06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   85b08:	07db      	lsls	r3, r3, #31
   85b0a:	d401      	bmi.n	85b10 <_fflush_r+0x1c>
   85b0c:	0581      	lsls	r1, r0, #22
   85b0e:	d517      	bpl.n	85b40 <_fflush_r+0x4c>
   85b10:	4620      	mov	r0, r4
   85b12:	4629      	mov	r1, r5
   85b14:	f7ff ff52 	bl	859bc <__sflush_r>
   85b18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   85b1a:	4604      	mov	r4, r0
   85b1c:	07da      	lsls	r2, r3, #31
   85b1e:	d402      	bmi.n	85b26 <_fflush_r+0x32>
   85b20:	89ab      	ldrh	r3, [r5, #12]
   85b22:	059b      	lsls	r3, r3, #22
   85b24:	d507      	bpl.n	85b36 <_fflush_r+0x42>
   85b26:	4620      	mov	r0, r4
   85b28:	bd38      	pop	{r3, r4, r5, pc}
   85b2a:	4604      	mov	r4, r0
   85b2c:	4620      	mov	r0, r4
   85b2e:	bd38      	pop	{r3, r4, r5, pc}
   85b30:	f000 f838 	bl	85ba4 <__sinit>
   85b34:	e7e4      	b.n	85b00 <_fflush_r+0xc>
   85b36:	6da8      	ldr	r0, [r5, #88]	; 0x58
   85b38:	f000 fc04 	bl	86344 <__retarget_lock_release_recursive>
   85b3c:	4620      	mov	r0, r4
   85b3e:	bd38      	pop	{r3, r4, r5, pc}
   85b40:	6da8      	ldr	r0, [r5, #88]	; 0x58
   85b42:	f000 fbfd 	bl	86340 <__retarget_lock_acquire_recursive>
   85b46:	e7e3      	b.n	85b10 <_fflush_r+0x1c>

00085b48 <_cleanup_r>:
   85b48:	4901      	ldr	r1, [pc, #4]	; (85b50 <_cleanup_r+0x8>)
   85b4a:	f000 bbb1 	b.w	862b0 <_fwalk_reent>
   85b4e:	bf00      	nop
   85b50:	000878fd 	.word	0x000878fd

00085b54 <std.isra.0>:
   85b54:	2300      	movs	r3, #0
   85b56:	b510      	push	{r4, lr}
   85b58:	4604      	mov	r4, r0
   85b5a:	8181      	strh	r1, [r0, #12]
   85b5c:	81c2      	strh	r2, [r0, #14]
   85b5e:	6003      	str	r3, [r0, #0]
   85b60:	6043      	str	r3, [r0, #4]
   85b62:	6083      	str	r3, [r0, #8]
   85b64:	6643      	str	r3, [r0, #100]	; 0x64
   85b66:	6103      	str	r3, [r0, #16]
   85b68:	6143      	str	r3, [r0, #20]
   85b6a:	6183      	str	r3, [r0, #24]
   85b6c:	4619      	mov	r1, r3
   85b6e:	2208      	movs	r2, #8
   85b70:	305c      	adds	r0, #92	; 0x5c
   85b72:	f7fc fbd9 	bl	82328 <memset>
   85b76:	4807      	ldr	r0, [pc, #28]	; (85b94 <std.isra.0+0x40>)
   85b78:	4907      	ldr	r1, [pc, #28]	; (85b98 <std.isra.0+0x44>)
   85b7a:	4a08      	ldr	r2, [pc, #32]	; (85b9c <std.isra.0+0x48>)
   85b7c:	4b08      	ldr	r3, [pc, #32]	; (85ba0 <std.isra.0+0x4c>)
   85b7e:	6220      	str	r0, [r4, #32]
   85b80:	61e4      	str	r4, [r4, #28]
   85b82:	6261      	str	r1, [r4, #36]	; 0x24
   85b84:	62a2      	str	r2, [r4, #40]	; 0x28
   85b86:	62e3      	str	r3, [r4, #44]	; 0x2c
   85b88:	f104 0058 	add.w	r0, r4, #88	; 0x58
   85b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   85b90:	f000 bbd2 	b.w	86338 <__retarget_lock_init_recursive>
   85b94:	00087599 	.word	0x00087599
   85b98:	000875bd 	.word	0x000875bd
   85b9c:	000875f9 	.word	0x000875f9
   85ba0:	00087619 	.word	0x00087619

00085ba4 <__sinit>:
   85ba4:	b510      	push	{r4, lr}
   85ba6:	4604      	mov	r4, r0
   85ba8:	4814      	ldr	r0, [pc, #80]	; (85bfc <__sinit+0x58>)
   85baa:	f000 fbc9 	bl	86340 <__retarget_lock_acquire_recursive>
   85bae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   85bb0:	b9fa      	cbnz	r2, 85bf2 <__sinit+0x4e>
   85bb2:	2003      	movs	r0, #3
   85bb4:	4912      	ldr	r1, [pc, #72]	; (85c00 <__sinit+0x5c>)
   85bb6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   85bba:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   85bbe:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   85bc2:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   85bc6:	63e1      	str	r1, [r4, #60]	; 0x3c
   85bc8:	6860      	ldr	r0, [r4, #4]
   85bca:	2104      	movs	r1, #4
   85bcc:	f7ff ffc2 	bl	85b54 <std.isra.0>
   85bd0:	68a0      	ldr	r0, [r4, #8]
   85bd2:	2201      	movs	r2, #1
   85bd4:	2109      	movs	r1, #9
   85bd6:	f7ff ffbd 	bl	85b54 <std.isra.0>
   85bda:	68e0      	ldr	r0, [r4, #12]
   85bdc:	2202      	movs	r2, #2
   85bde:	2112      	movs	r1, #18
   85be0:	f7ff ffb8 	bl	85b54 <std.isra.0>
   85be4:	2301      	movs	r3, #1
   85be6:	4805      	ldr	r0, [pc, #20]	; (85bfc <__sinit+0x58>)
   85be8:	63a3      	str	r3, [r4, #56]	; 0x38
   85bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   85bee:	f000 bba9 	b.w	86344 <__retarget_lock_release_recursive>
   85bf2:	4802      	ldr	r0, [pc, #8]	; (85bfc <__sinit+0x58>)
   85bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   85bf8:	f000 bba4 	b.w	86344 <__retarget_lock_release_recursive>
   85bfc:	20070cd8 	.word	0x20070cd8
   85c00:	00085b49 	.word	0x00085b49

00085c04 <__sfp_lock_acquire>:
   85c04:	4801      	ldr	r0, [pc, #4]	; (85c0c <__sfp_lock_acquire+0x8>)
   85c06:	f000 bb9b 	b.w	86340 <__retarget_lock_acquire_recursive>
   85c0a:	bf00      	nop
   85c0c:	20070cec 	.word	0x20070cec

00085c10 <__sfp_lock_release>:
   85c10:	4801      	ldr	r0, [pc, #4]	; (85c18 <__sfp_lock_release+0x8>)
   85c12:	f000 bb97 	b.w	86344 <__retarget_lock_release_recursive>
   85c16:	bf00      	nop
   85c18:	20070cec 	.word	0x20070cec

00085c1c <__libc_fini_array>:
   85c1c:	b538      	push	{r3, r4, r5, lr}
   85c1e:	4c0a      	ldr	r4, [pc, #40]	; (85c48 <__libc_fini_array+0x2c>)
   85c20:	4d0a      	ldr	r5, [pc, #40]	; (85c4c <__libc_fini_array+0x30>)
   85c22:	1b64      	subs	r4, r4, r5
   85c24:	10a4      	asrs	r4, r4, #2
   85c26:	d00a      	beq.n	85c3e <__libc_fini_array+0x22>
   85c28:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   85c2c:	3b01      	subs	r3, #1
   85c2e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   85c32:	3c01      	subs	r4, #1
   85c34:	f855 3904 	ldr.w	r3, [r5], #-4
   85c38:	4798      	blx	r3
   85c3a:	2c00      	cmp	r4, #0
   85c3c:	d1f9      	bne.n	85c32 <__libc_fini_array+0x16>
   85c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85c42:	f003 b85b 	b.w	88cfc <_fini>
   85c46:	bf00      	nop
   85c48:	00088d0c 	.word	0x00088d0c
   85c4c:	00088d08 	.word	0x00088d08

00085c50 <__fputwc>:
   85c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   85c54:	b083      	sub	sp, #12
   85c56:	4607      	mov	r7, r0
   85c58:	4688      	mov	r8, r1
   85c5a:	4614      	mov	r4, r2
   85c5c:	f000 fb50 	bl	86300 <__locale_mb_cur_max>
   85c60:	2801      	cmp	r0, #1
   85c62:	d033      	beq.n	85ccc <__fputwc+0x7c>
   85c64:	4642      	mov	r2, r8
   85c66:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   85c6a:	a901      	add	r1, sp, #4
   85c6c:	4638      	mov	r0, r7
   85c6e:	f001 fd55 	bl	8771c <_wcrtomb_r>
   85c72:	1c42      	adds	r2, r0, #1
   85c74:	4606      	mov	r6, r0
   85c76:	d022      	beq.n	85cbe <__fputwc+0x6e>
   85c78:	b390      	cbz	r0, 85ce0 <__fputwc+0x90>
   85c7a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   85c7e:	2500      	movs	r5, #0
   85c80:	f10d 0904 	add.w	r9, sp, #4
   85c84:	e008      	b.n	85c98 <__fputwc+0x48>
   85c86:	6823      	ldr	r3, [r4, #0]
   85c88:	1c5a      	adds	r2, r3, #1
   85c8a:	6022      	str	r2, [r4, #0]
   85c8c:	7019      	strb	r1, [r3, #0]
   85c8e:	3501      	adds	r5, #1
   85c90:	42b5      	cmp	r5, r6
   85c92:	d225      	bcs.n	85ce0 <__fputwc+0x90>
   85c94:	f815 1009 	ldrb.w	r1, [r5, r9]
   85c98:	68a3      	ldr	r3, [r4, #8]
   85c9a:	3b01      	subs	r3, #1
   85c9c:	2b00      	cmp	r3, #0
   85c9e:	60a3      	str	r3, [r4, #8]
   85ca0:	daf1      	bge.n	85c86 <__fputwc+0x36>
   85ca2:	69a2      	ldr	r2, [r4, #24]
   85ca4:	4293      	cmp	r3, r2
   85ca6:	db01      	blt.n	85cac <__fputwc+0x5c>
   85ca8:	290a      	cmp	r1, #10
   85caa:	d1ec      	bne.n	85c86 <__fputwc+0x36>
   85cac:	4622      	mov	r2, r4
   85cae:	4638      	mov	r0, r7
   85cb0:	f7fe fe02 	bl	848b8 <__swbuf_r>
   85cb4:	1c43      	adds	r3, r0, #1
   85cb6:	d1ea      	bne.n	85c8e <__fputwc+0x3e>
   85cb8:	b003      	add	sp, #12
   85cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   85cbe:	89a3      	ldrh	r3, [r4, #12]
   85cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85cc4:	81a3      	strh	r3, [r4, #12]
   85cc6:	b003      	add	sp, #12
   85cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   85ccc:	f108 33ff 	add.w	r3, r8, #4294967295
   85cd0:	2bfe      	cmp	r3, #254	; 0xfe
   85cd2:	d8c7      	bhi.n	85c64 <__fputwc+0x14>
   85cd4:	fa5f f188 	uxtb.w	r1, r8
   85cd8:	4606      	mov	r6, r0
   85cda:	f88d 1004 	strb.w	r1, [sp, #4]
   85cde:	e7ce      	b.n	85c7e <__fputwc+0x2e>
   85ce0:	4640      	mov	r0, r8
   85ce2:	b003      	add	sp, #12
   85ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00085ce8 <_fputwc_r>:
   85ce8:	b530      	push	{r4, r5, lr}
   85cea:	6e53      	ldr	r3, [r2, #100]	; 0x64
   85cec:	4614      	mov	r4, r2
   85cee:	f013 0f01 	tst.w	r3, #1
   85cf2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   85cf6:	b083      	sub	sp, #12
   85cf8:	4605      	mov	r5, r0
   85cfa:	b29a      	uxth	r2, r3
   85cfc:	d101      	bne.n	85d02 <_fputwc_r+0x1a>
   85cfe:	0590      	lsls	r0, r2, #22
   85d00:	d51c      	bpl.n	85d3c <_fputwc_r+0x54>
   85d02:	0490      	lsls	r0, r2, #18
   85d04:	d406      	bmi.n	85d14 <_fputwc_r+0x2c>
   85d06:	6e62      	ldr	r2, [r4, #100]	; 0x64
   85d08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   85d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   85d10:	81a3      	strh	r3, [r4, #12]
   85d12:	6662      	str	r2, [r4, #100]	; 0x64
   85d14:	4628      	mov	r0, r5
   85d16:	4622      	mov	r2, r4
   85d18:	f7ff ff9a 	bl	85c50 <__fputwc>
   85d1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   85d1e:	4605      	mov	r5, r0
   85d20:	07da      	lsls	r2, r3, #31
   85d22:	d402      	bmi.n	85d2a <_fputwc_r+0x42>
   85d24:	89a3      	ldrh	r3, [r4, #12]
   85d26:	059b      	lsls	r3, r3, #22
   85d28:	d502      	bpl.n	85d30 <_fputwc_r+0x48>
   85d2a:	4628      	mov	r0, r5
   85d2c:	b003      	add	sp, #12
   85d2e:	bd30      	pop	{r4, r5, pc}
   85d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85d32:	f000 fb07 	bl	86344 <__retarget_lock_release_recursive>
   85d36:	4628      	mov	r0, r5
   85d38:	b003      	add	sp, #12
   85d3a:	bd30      	pop	{r4, r5, pc}
   85d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85d3e:	9101      	str	r1, [sp, #4]
   85d40:	f000 fafe 	bl	86340 <__retarget_lock_acquire_recursive>
   85d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85d48:	9901      	ldr	r1, [sp, #4]
   85d4a:	b29a      	uxth	r2, r3
   85d4c:	e7d9      	b.n	85d02 <_fputwc_r+0x1a>
   85d4e:	bf00      	nop

00085d50 <_malloc_trim_r>:
   85d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85d52:	460c      	mov	r4, r1
   85d54:	4f23      	ldr	r7, [pc, #140]	; (85de4 <_malloc_trim_r+0x94>)
   85d56:	4606      	mov	r6, r0
   85d58:	f000 ff4e 	bl	86bf8 <__malloc_lock>
   85d5c:	68bb      	ldr	r3, [r7, #8]
   85d5e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   85d62:	685d      	ldr	r5, [r3, #4]
   85d64:	310f      	adds	r1, #15
   85d66:	f025 0503 	bic.w	r5, r5, #3
   85d6a:	4429      	add	r1, r5
   85d6c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   85d70:	f021 010f 	bic.w	r1, r1, #15
   85d74:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   85d78:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   85d7c:	db07      	blt.n	85d8e <_malloc_trim_r+0x3e>
   85d7e:	2100      	movs	r1, #0
   85d80:	4630      	mov	r0, r6
   85d82:	f001 fbf7 	bl	87574 <_sbrk_r>
   85d86:	68bb      	ldr	r3, [r7, #8]
   85d88:	442b      	add	r3, r5
   85d8a:	4298      	cmp	r0, r3
   85d8c:	d004      	beq.n	85d98 <_malloc_trim_r+0x48>
   85d8e:	4630      	mov	r0, r6
   85d90:	f000 ff38 	bl	86c04 <__malloc_unlock>
   85d94:	2000      	movs	r0, #0
   85d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85d98:	4261      	negs	r1, r4
   85d9a:	4630      	mov	r0, r6
   85d9c:	f001 fbea 	bl	87574 <_sbrk_r>
   85da0:	3001      	adds	r0, #1
   85da2:	d00d      	beq.n	85dc0 <_malloc_trim_r+0x70>
   85da4:	4b10      	ldr	r3, [pc, #64]	; (85de8 <_malloc_trim_r+0x98>)
   85da6:	68ba      	ldr	r2, [r7, #8]
   85da8:	6819      	ldr	r1, [r3, #0]
   85daa:	1b2d      	subs	r5, r5, r4
   85dac:	f045 0501 	orr.w	r5, r5, #1
   85db0:	4630      	mov	r0, r6
   85db2:	1b09      	subs	r1, r1, r4
   85db4:	6055      	str	r5, [r2, #4]
   85db6:	6019      	str	r1, [r3, #0]
   85db8:	f000 ff24 	bl	86c04 <__malloc_unlock>
   85dbc:	2001      	movs	r0, #1
   85dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85dc0:	2100      	movs	r1, #0
   85dc2:	4630      	mov	r0, r6
   85dc4:	f001 fbd6 	bl	87574 <_sbrk_r>
   85dc8:	68ba      	ldr	r2, [r7, #8]
   85dca:	1a83      	subs	r3, r0, r2
   85dcc:	2b0f      	cmp	r3, #15
   85dce:	ddde      	ble.n	85d8e <_malloc_trim_r+0x3e>
   85dd0:	4c06      	ldr	r4, [pc, #24]	; (85dec <_malloc_trim_r+0x9c>)
   85dd2:	4905      	ldr	r1, [pc, #20]	; (85de8 <_malloc_trim_r+0x98>)
   85dd4:	6824      	ldr	r4, [r4, #0]
   85dd6:	f043 0301 	orr.w	r3, r3, #1
   85dda:	1b00      	subs	r0, r0, r4
   85ddc:	6053      	str	r3, [r2, #4]
   85dde:	6008      	str	r0, [r1, #0]
   85de0:	e7d5      	b.n	85d8e <_malloc_trim_r+0x3e>
   85de2:	bf00      	nop
   85de4:	200706d0 	.word	0x200706d0
   85de8:	20070c10 	.word	0x20070c10
   85dec:	20070ad8 	.word	0x20070ad8

00085df0 <_free_r>:
   85df0:	2900      	cmp	r1, #0
   85df2:	d044      	beq.n	85e7e <_free_r+0x8e>
   85df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85df8:	460d      	mov	r5, r1
   85dfa:	4680      	mov	r8, r0
   85dfc:	f000 fefc 	bl	86bf8 <__malloc_lock>
   85e00:	f855 7c04 	ldr.w	r7, [r5, #-4]
   85e04:	4969      	ldr	r1, [pc, #420]	; (85fac <_free_r+0x1bc>)
   85e06:	f1a5 0408 	sub.w	r4, r5, #8
   85e0a:	f027 0301 	bic.w	r3, r7, #1
   85e0e:	18e2      	adds	r2, r4, r3
   85e10:	688e      	ldr	r6, [r1, #8]
   85e12:	6850      	ldr	r0, [r2, #4]
   85e14:	42b2      	cmp	r2, r6
   85e16:	f020 0003 	bic.w	r0, r0, #3
   85e1a:	d05e      	beq.n	85eda <_free_r+0xea>
   85e1c:	07fe      	lsls	r6, r7, #31
   85e1e:	6050      	str	r0, [r2, #4]
   85e20:	d40b      	bmi.n	85e3a <_free_r+0x4a>
   85e22:	f855 7c08 	ldr.w	r7, [r5, #-8]
   85e26:	f101 0e08 	add.w	lr, r1, #8
   85e2a:	1be4      	subs	r4, r4, r7
   85e2c:	68a5      	ldr	r5, [r4, #8]
   85e2e:	443b      	add	r3, r7
   85e30:	4575      	cmp	r5, lr
   85e32:	d06d      	beq.n	85f10 <_free_r+0x120>
   85e34:	68e7      	ldr	r7, [r4, #12]
   85e36:	60ef      	str	r7, [r5, #12]
   85e38:	60bd      	str	r5, [r7, #8]
   85e3a:	1815      	adds	r5, r2, r0
   85e3c:	686d      	ldr	r5, [r5, #4]
   85e3e:	07ed      	lsls	r5, r5, #31
   85e40:	d53e      	bpl.n	85ec0 <_free_r+0xd0>
   85e42:	f043 0201 	orr.w	r2, r3, #1
   85e46:	6062      	str	r2, [r4, #4]
   85e48:	50e3      	str	r3, [r4, r3]
   85e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85e4e:	d217      	bcs.n	85e80 <_free_r+0x90>
   85e50:	2201      	movs	r2, #1
   85e52:	08db      	lsrs	r3, r3, #3
   85e54:	1098      	asrs	r0, r3, #2
   85e56:	684d      	ldr	r5, [r1, #4]
   85e58:	4413      	add	r3, r2
   85e5a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   85e5e:	4082      	lsls	r2, r0
   85e60:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   85e64:	432a      	orrs	r2, r5
   85e66:	3808      	subs	r0, #8
   85e68:	60e0      	str	r0, [r4, #12]
   85e6a:	60a7      	str	r7, [r4, #8]
   85e6c:	604a      	str	r2, [r1, #4]
   85e6e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   85e72:	60fc      	str	r4, [r7, #12]
   85e74:	4640      	mov	r0, r8
   85e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85e7a:	f000 bec3 	b.w	86c04 <__malloc_unlock>
   85e7e:	4770      	bx	lr
   85e80:	0a5a      	lsrs	r2, r3, #9
   85e82:	2a04      	cmp	r2, #4
   85e84:	d852      	bhi.n	85f2c <_free_r+0x13c>
   85e86:	099a      	lsrs	r2, r3, #6
   85e88:	f102 0739 	add.w	r7, r2, #57	; 0x39
   85e8c:	00ff      	lsls	r7, r7, #3
   85e8e:	f102 0538 	add.w	r5, r2, #56	; 0x38
   85e92:	19c8      	adds	r0, r1, r7
   85e94:	59ca      	ldr	r2, [r1, r7]
   85e96:	3808      	subs	r0, #8
   85e98:	4290      	cmp	r0, r2
   85e9a:	d04f      	beq.n	85f3c <_free_r+0x14c>
   85e9c:	6851      	ldr	r1, [r2, #4]
   85e9e:	f021 0103 	bic.w	r1, r1, #3
   85ea2:	428b      	cmp	r3, r1
   85ea4:	d232      	bcs.n	85f0c <_free_r+0x11c>
   85ea6:	6892      	ldr	r2, [r2, #8]
   85ea8:	4290      	cmp	r0, r2
   85eaa:	d1f7      	bne.n	85e9c <_free_r+0xac>
   85eac:	68c3      	ldr	r3, [r0, #12]
   85eae:	60a0      	str	r0, [r4, #8]
   85eb0:	60e3      	str	r3, [r4, #12]
   85eb2:	609c      	str	r4, [r3, #8]
   85eb4:	60c4      	str	r4, [r0, #12]
   85eb6:	4640      	mov	r0, r8
   85eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85ebc:	f000 bea2 	b.w	86c04 <__malloc_unlock>
   85ec0:	6895      	ldr	r5, [r2, #8]
   85ec2:	4f3b      	ldr	r7, [pc, #236]	; (85fb0 <_free_r+0x1c0>)
   85ec4:	4403      	add	r3, r0
   85ec6:	42bd      	cmp	r5, r7
   85ec8:	d040      	beq.n	85f4c <_free_r+0x15c>
   85eca:	68d0      	ldr	r0, [r2, #12]
   85ecc:	f043 0201 	orr.w	r2, r3, #1
   85ed0:	60e8      	str	r0, [r5, #12]
   85ed2:	6085      	str	r5, [r0, #8]
   85ed4:	6062      	str	r2, [r4, #4]
   85ed6:	50e3      	str	r3, [r4, r3]
   85ed8:	e7b7      	b.n	85e4a <_free_r+0x5a>
   85eda:	07ff      	lsls	r7, r7, #31
   85edc:	4403      	add	r3, r0
   85ede:	d407      	bmi.n	85ef0 <_free_r+0x100>
   85ee0:	f855 5c08 	ldr.w	r5, [r5, #-8]
   85ee4:	1b64      	subs	r4, r4, r5
   85ee6:	68e2      	ldr	r2, [r4, #12]
   85ee8:	68a0      	ldr	r0, [r4, #8]
   85eea:	442b      	add	r3, r5
   85eec:	60c2      	str	r2, [r0, #12]
   85eee:	6090      	str	r0, [r2, #8]
   85ef0:	4a30      	ldr	r2, [pc, #192]	; (85fb4 <_free_r+0x1c4>)
   85ef2:	f043 0001 	orr.w	r0, r3, #1
   85ef6:	6812      	ldr	r2, [r2, #0]
   85ef8:	6060      	str	r0, [r4, #4]
   85efa:	4293      	cmp	r3, r2
   85efc:	608c      	str	r4, [r1, #8]
   85efe:	d3b9      	bcc.n	85e74 <_free_r+0x84>
   85f00:	4b2d      	ldr	r3, [pc, #180]	; (85fb8 <_free_r+0x1c8>)
   85f02:	4640      	mov	r0, r8
   85f04:	6819      	ldr	r1, [r3, #0]
   85f06:	f7ff ff23 	bl	85d50 <_malloc_trim_r>
   85f0a:	e7b3      	b.n	85e74 <_free_r+0x84>
   85f0c:	4610      	mov	r0, r2
   85f0e:	e7cd      	b.n	85eac <_free_r+0xbc>
   85f10:	1811      	adds	r1, r2, r0
   85f12:	6849      	ldr	r1, [r1, #4]
   85f14:	07c9      	lsls	r1, r1, #31
   85f16:	d444      	bmi.n	85fa2 <_free_r+0x1b2>
   85f18:	6891      	ldr	r1, [r2, #8]
   85f1a:	4403      	add	r3, r0
   85f1c:	68d2      	ldr	r2, [r2, #12]
   85f1e:	f043 0001 	orr.w	r0, r3, #1
   85f22:	60ca      	str	r2, [r1, #12]
   85f24:	6091      	str	r1, [r2, #8]
   85f26:	6060      	str	r0, [r4, #4]
   85f28:	50e3      	str	r3, [r4, r3]
   85f2a:	e7a3      	b.n	85e74 <_free_r+0x84>
   85f2c:	2a14      	cmp	r2, #20
   85f2e:	d816      	bhi.n	85f5e <_free_r+0x16e>
   85f30:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   85f34:	00ff      	lsls	r7, r7, #3
   85f36:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   85f3a:	e7aa      	b.n	85e92 <_free_r+0xa2>
   85f3c:	2301      	movs	r3, #1
   85f3e:	10aa      	asrs	r2, r5, #2
   85f40:	684d      	ldr	r5, [r1, #4]
   85f42:	4093      	lsls	r3, r2
   85f44:	432b      	orrs	r3, r5
   85f46:	604b      	str	r3, [r1, #4]
   85f48:	4603      	mov	r3, r0
   85f4a:	e7b0      	b.n	85eae <_free_r+0xbe>
   85f4c:	f043 0201 	orr.w	r2, r3, #1
   85f50:	614c      	str	r4, [r1, #20]
   85f52:	610c      	str	r4, [r1, #16]
   85f54:	60e5      	str	r5, [r4, #12]
   85f56:	60a5      	str	r5, [r4, #8]
   85f58:	6062      	str	r2, [r4, #4]
   85f5a:	50e3      	str	r3, [r4, r3]
   85f5c:	e78a      	b.n	85e74 <_free_r+0x84>
   85f5e:	2a54      	cmp	r2, #84	; 0x54
   85f60:	d806      	bhi.n	85f70 <_free_r+0x180>
   85f62:	0b1a      	lsrs	r2, r3, #12
   85f64:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   85f68:	00ff      	lsls	r7, r7, #3
   85f6a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   85f6e:	e790      	b.n	85e92 <_free_r+0xa2>
   85f70:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85f74:	d806      	bhi.n	85f84 <_free_r+0x194>
   85f76:	0bda      	lsrs	r2, r3, #15
   85f78:	f102 0778 	add.w	r7, r2, #120	; 0x78
   85f7c:	00ff      	lsls	r7, r7, #3
   85f7e:	f102 0577 	add.w	r5, r2, #119	; 0x77
   85f82:	e786      	b.n	85e92 <_free_r+0xa2>
   85f84:	f240 5054 	movw	r0, #1364	; 0x554
   85f88:	4282      	cmp	r2, r0
   85f8a:	d806      	bhi.n	85f9a <_free_r+0x1aa>
   85f8c:	0c9a      	lsrs	r2, r3, #18
   85f8e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   85f92:	00ff      	lsls	r7, r7, #3
   85f94:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   85f98:	e77b      	b.n	85e92 <_free_r+0xa2>
   85f9a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   85f9e:	257e      	movs	r5, #126	; 0x7e
   85fa0:	e777      	b.n	85e92 <_free_r+0xa2>
   85fa2:	f043 0101 	orr.w	r1, r3, #1
   85fa6:	6061      	str	r1, [r4, #4]
   85fa8:	6013      	str	r3, [r2, #0]
   85faa:	e763      	b.n	85e74 <_free_r+0x84>
   85fac:	200706d0 	.word	0x200706d0
   85fb0:	200706d8 	.word	0x200706d8
   85fb4:	20070adc 	.word	0x20070adc
   85fb8:	20070c40 	.word	0x20070c40

00085fbc <__sfvwrite_r>:
   85fbc:	6893      	ldr	r3, [r2, #8]
   85fbe:	2b00      	cmp	r3, #0
   85fc0:	d071      	beq.n	860a6 <__sfvwrite_r+0xea>
   85fc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85fc6:	898b      	ldrh	r3, [r1, #12]
   85fc8:	b083      	sub	sp, #12
   85fca:	460c      	mov	r4, r1
   85fcc:	0719      	lsls	r1, r3, #28
   85fce:	9000      	str	r0, [sp, #0]
   85fd0:	4616      	mov	r6, r2
   85fd2:	d525      	bpl.n	86020 <__sfvwrite_r+0x64>
   85fd4:	6922      	ldr	r2, [r4, #16]
   85fd6:	b31a      	cbz	r2, 86020 <__sfvwrite_r+0x64>
   85fd8:	f013 0002 	ands.w	r0, r3, #2
   85fdc:	6835      	ldr	r5, [r6, #0]
   85fde:	d02b      	beq.n	86038 <__sfvwrite_r+0x7c>
   85fe0:	f04f 0900 	mov.w	r9, #0
   85fe4:	46b0      	mov	r8, r6
   85fe6:	464f      	mov	r7, r9
   85fe8:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 862ac <__sfvwrite_r+0x2f0>
   85fec:	2f00      	cmp	r7, #0
   85fee:	d055      	beq.n	8609c <__sfvwrite_r+0xe0>
   85ff0:	4557      	cmp	r7, sl
   85ff2:	463b      	mov	r3, r7
   85ff4:	464a      	mov	r2, r9
   85ff6:	bf28      	it	cs
   85ff8:	4653      	movcs	r3, sl
   85ffa:	69e1      	ldr	r1, [r4, #28]
   85ffc:	9800      	ldr	r0, [sp, #0]
   85ffe:	6a66      	ldr	r6, [r4, #36]	; 0x24
   86000:	47b0      	blx	r6
   86002:	2800      	cmp	r0, #0
   86004:	dd56      	ble.n	860b4 <__sfvwrite_r+0xf8>
   86006:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8600a:	4481      	add	r9, r0
   8600c:	1a1b      	subs	r3, r3, r0
   8600e:	1a3f      	subs	r7, r7, r0
   86010:	f8c8 3008 	str.w	r3, [r8, #8]
   86014:	2b00      	cmp	r3, #0
   86016:	d1e9      	bne.n	85fec <__sfvwrite_r+0x30>
   86018:	2000      	movs	r0, #0
   8601a:	b003      	add	sp, #12
   8601c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86020:	4621      	mov	r1, r4
   86022:	9800      	ldr	r0, [sp, #0]
   86024:	f7fe fca0 	bl	84968 <__swsetup_r>
   86028:	2800      	cmp	r0, #0
   8602a:	f040 8135 	bne.w	86298 <__sfvwrite_r+0x2dc>
   8602e:	89a3      	ldrh	r3, [r4, #12]
   86030:	6835      	ldr	r5, [r6, #0]
   86032:	f013 0002 	ands.w	r0, r3, #2
   86036:	d1d3      	bne.n	85fe0 <__sfvwrite_r+0x24>
   86038:	f013 0901 	ands.w	r9, r3, #1
   8603c:	d144      	bne.n	860c8 <__sfvwrite_r+0x10c>
   8603e:	464f      	mov	r7, r9
   86040:	9601      	str	r6, [sp, #4]
   86042:	b337      	cbz	r7, 86092 <__sfvwrite_r+0xd6>
   86044:	059a      	lsls	r2, r3, #22
   86046:	f8d4 8008 	ldr.w	r8, [r4, #8]
   8604a:	f140 8085 	bpl.w	86158 <__sfvwrite_r+0x19c>
   8604e:	4547      	cmp	r7, r8
   86050:	46c3      	mov	fp, r8
   86052:	f0c0 80ad 	bcc.w	861b0 <__sfvwrite_r+0x1f4>
   86056:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8605a:	f040 80ae 	bne.w	861ba <__sfvwrite_r+0x1fe>
   8605e:	46ba      	mov	sl, r7
   86060:	6820      	ldr	r0, [r4, #0]
   86062:	465a      	mov	r2, fp
   86064:	4649      	mov	r1, r9
   86066:	f000 fd63 	bl	86b30 <memmove>
   8606a:	68a2      	ldr	r2, [r4, #8]
   8606c:	6823      	ldr	r3, [r4, #0]
   8606e:	eba2 0208 	sub.w	r2, r2, r8
   86072:	445b      	add	r3, fp
   86074:	60a2      	str	r2, [r4, #8]
   86076:	6023      	str	r3, [r4, #0]
   86078:	9a01      	ldr	r2, [sp, #4]
   8607a:	44d1      	add	r9, sl
   8607c:	6893      	ldr	r3, [r2, #8]
   8607e:	eba7 070a 	sub.w	r7, r7, sl
   86082:	eba3 030a 	sub.w	r3, r3, sl
   86086:	6093      	str	r3, [r2, #8]
   86088:	2b00      	cmp	r3, #0
   8608a:	d0c5      	beq.n	86018 <__sfvwrite_r+0x5c>
   8608c:	89a3      	ldrh	r3, [r4, #12]
   8608e:	2f00      	cmp	r7, #0
   86090:	d1d8      	bne.n	86044 <__sfvwrite_r+0x88>
   86092:	f8d5 9000 	ldr.w	r9, [r5]
   86096:	686f      	ldr	r7, [r5, #4]
   86098:	3508      	adds	r5, #8
   8609a:	e7d2      	b.n	86042 <__sfvwrite_r+0x86>
   8609c:	f8d5 9000 	ldr.w	r9, [r5]
   860a0:	686f      	ldr	r7, [r5, #4]
   860a2:	3508      	adds	r5, #8
   860a4:	e7a2      	b.n	85fec <__sfvwrite_r+0x30>
   860a6:	2000      	movs	r0, #0
   860a8:	4770      	bx	lr
   860aa:	4621      	mov	r1, r4
   860ac:	9800      	ldr	r0, [sp, #0]
   860ae:	f7ff fd21 	bl	85af4 <_fflush_r>
   860b2:	b378      	cbz	r0, 86114 <__sfvwrite_r+0x158>
   860b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   860b8:	f04f 30ff 	mov.w	r0, #4294967295
   860bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   860c0:	81a3      	strh	r3, [r4, #12]
   860c2:	b003      	add	sp, #12
   860c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   860c8:	4681      	mov	r9, r0
   860ca:	4633      	mov	r3, r6
   860cc:	464e      	mov	r6, r9
   860ce:	46a8      	mov	r8, r5
   860d0:	469a      	mov	sl, r3
   860d2:	464d      	mov	r5, r9
   860d4:	b356      	cbz	r6, 8612c <__sfvwrite_r+0x170>
   860d6:	2800      	cmp	r0, #0
   860d8:	d032      	beq.n	86140 <__sfvwrite_r+0x184>
   860da:	45b1      	cmp	r9, r6
   860dc:	46cb      	mov	fp, r9
   860de:	bf28      	it	cs
   860e0:	46b3      	movcs	fp, r6
   860e2:	6820      	ldr	r0, [r4, #0]
   860e4:	6923      	ldr	r3, [r4, #16]
   860e6:	465f      	mov	r7, fp
   860e8:	4298      	cmp	r0, r3
   860ea:	6962      	ldr	r2, [r4, #20]
   860ec:	d904      	bls.n	860f8 <__sfvwrite_r+0x13c>
   860ee:	68a3      	ldr	r3, [r4, #8]
   860f0:	4413      	add	r3, r2
   860f2:	459b      	cmp	fp, r3
   860f4:	f300 80a8 	bgt.w	86248 <__sfvwrite_r+0x28c>
   860f8:	4593      	cmp	fp, r2
   860fa:	db4d      	blt.n	86198 <__sfvwrite_r+0x1dc>
   860fc:	4613      	mov	r3, r2
   860fe:	6a67      	ldr	r7, [r4, #36]	; 0x24
   86100:	462a      	mov	r2, r5
   86102:	69e1      	ldr	r1, [r4, #28]
   86104:	9800      	ldr	r0, [sp, #0]
   86106:	47b8      	blx	r7
   86108:	1e07      	subs	r7, r0, #0
   8610a:	ddd3      	ble.n	860b4 <__sfvwrite_r+0xf8>
   8610c:	ebb9 0907 	subs.w	r9, r9, r7
   86110:	d0cb      	beq.n	860aa <__sfvwrite_r+0xee>
   86112:	2001      	movs	r0, #1
   86114:	f8da 3008 	ldr.w	r3, [sl, #8]
   86118:	443d      	add	r5, r7
   8611a:	1bdb      	subs	r3, r3, r7
   8611c:	1bf6      	subs	r6, r6, r7
   8611e:	f8ca 3008 	str.w	r3, [sl, #8]
   86122:	2b00      	cmp	r3, #0
   86124:	f43f af78 	beq.w	86018 <__sfvwrite_r+0x5c>
   86128:	2e00      	cmp	r6, #0
   8612a:	d1d4      	bne.n	860d6 <__sfvwrite_r+0x11a>
   8612c:	f108 0308 	add.w	r3, r8, #8
   86130:	f853 6c04 	ldr.w	r6, [r3, #-4]
   86134:	4698      	mov	r8, r3
   86136:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8613a:	3308      	adds	r3, #8
   8613c:	2e00      	cmp	r6, #0
   8613e:	d0f7      	beq.n	86130 <__sfvwrite_r+0x174>
   86140:	4632      	mov	r2, r6
   86142:	210a      	movs	r1, #10
   86144:	4628      	mov	r0, r5
   86146:	f000 fc37 	bl	869b8 <memchr>
   8614a:	2800      	cmp	r0, #0
   8614c:	f000 80a1 	beq.w	86292 <__sfvwrite_r+0x2d6>
   86150:	3001      	adds	r0, #1
   86152:	eba0 0905 	sub.w	r9, r0, r5
   86156:	e7c0      	b.n	860da <__sfvwrite_r+0x11e>
   86158:	6820      	ldr	r0, [r4, #0]
   8615a:	6923      	ldr	r3, [r4, #16]
   8615c:	4298      	cmp	r0, r3
   8615e:	d802      	bhi.n	86166 <__sfvwrite_r+0x1aa>
   86160:	6963      	ldr	r3, [r4, #20]
   86162:	429f      	cmp	r7, r3
   86164:	d25d      	bcs.n	86222 <__sfvwrite_r+0x266>
   86166:	45b8      	cmp	r8, r7
   86168:	bf28      	it	cs
   8616a:	46b8      	movcs	r8, r7
   8616c:	4649      	mov	r1, r9
   8616e:	4642      	mov	r2, r8
   86170:	f000 fcde 	bl	86b30 <memmove>
   86174:	68a3      	ldr	r3, [r4, #8]
   86176:	6822      	ldr	r2, [r4, #0]
   86178:	eba3 0308 	sub.w	r3, r3, r8
   8617c:	4442      	add	r2, r8
   8617e:	60a3      	str	r3, [r4, #8]
   86180:	6022      	str	r2, [r4, #0]
   86182:	b10b      	cbz	r3, 86188 <__sfvwrite_r+0x1cc>
   86184:	46c2      	mov	sl, r8
   86186:	e777      	b.n	86078 <__sfvwrite_r+0xbc>
   86188:	4621      	mov	r1, r4
   8618a:	9800      	ldr	r0, [sp, #0]
   8618c:	f7ff fcb2 	bl	85af4 <_fflush_r>
   86190:	2800      	cmp	r0, #0
   86192:	d18f      	bne.n	860b4 <__sfvwrite_r+0xf8>
   86194:	46c2      	mov	sl, r8
   86196:	e76f      	b.n	86078 <__sfvwrite_r+0xbc>
   86198:	465a      	mov	r2, fp
   8619a:	4629      	mov	r1, r5
   8619c:	f000 fcc8 	bl	86b30 <memmove>
   861a0:	68a2      	ldr	r2, [r4, #8]
   861a2:	6823      	ldr	r3, [r4, #0]
   861a4:	eba2 020b 	sub.w	r2, r2, fp
   861a8:	445b      	add	r3, fp
   861aa:	60a2      	str	r2, [r4, #8]
   861ac:	6023      	str	r3, [r4, #0]
   861ae:	e7ad      	b.n	8610c <__sfvwrite_r+0x150>
   861b0:	46b8      	mov	r8, r7
   861b2:	46ba      	mov	sl, r7
   861b4:	46bb      	mov	fp, r7
   861b6:	6820      	ldr	r0, [r4, #0]
   861b8:	e753      	b.n	86062 <__sfvwrite_r+0xa6>
   861ba:	6962      	ldr	r2, [r4, #20]
   861bc:	6820      	ldr	r0, [r4, #0]
   861be:	6921      	ldr	r1, [r4, #16]
   861c0:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   861c4:	eba0 0a01 	sub.w	sl, r0, r1
   861c8:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   861cc:	f10a 0001 	add.w	r0, sl, #1
   861d0:	ea4f 0868 	mov.w	r8, r8, asr #1
   861d4:	4438      	add	r0, r7
   861d6:	4540      	cmp	r0, r8
   861d8:	4642      	mov	r2, r8
   861da:	bf84      	itt	hi
   861dc:	4680      	movhi	r8, r0
   861de:	4642      	movhi	r2, r8
   861e0:	055b      	lsls	r3, r3, #21
   861e2:	d544      	bpl.n	8626e <__sfvwrite_r+0x2b2>
   861e4:	4611      	mov	r1, r2
   861e6:	9800      	ldr	r0, [sp, #0]
   861e8:	f000 f92e 	bl	86448 <_malloc_r>
   861ec:	4683      	mov	fp, r0
   861ee:	2800      	cmp	r0, #0
   861f0:	d055      	beq.n	8629e <__sfvwrite_r+0x2e2>
   861f2:	4652      	mov	r2, sl
   861f4:	6921      	ldr	r1, [r4, #16]
   861f6:	f000 fc25 	bl	86a44 <memcpy>
   861fa:	89a3      	ldrh	r3, [r4, #12]
   861fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   86200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   86204:	81a3      	strh	r3, [r4, #12]
   86206:	eb0b 000a 	add.w	r0, fp, sl
   8620a:	eba8 030a 	sub.w	r3, r8, sl
   8620e:	f8c4 b010 	str.w	fp, [r4, #16]
   86212:	f8c4 8014 	str.w	r8, [r4, #20]
   86216:	6020      	str	r0, [r4, #0]
   86218:	60a3      	str	r3, [r4, #8]
   8621a:	46b8      	mov	r8, r7
   8621c:	46ba      	mov	sl, r7
   8621e:	46bb      	mov	fp, r7
   86220:	e71f      	b.n	86062 <__sfvwrite_r+0xa6>
   86222:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   86226:	42ba      	cmp	r2, r7
   86228:	bf28      	it	cs
   8622a:	463a      	movcs	r2, r7
   8622c:	fb92 f2f3 	sdiv	r2, r2, r3
   86230:	69e1      	ldr	r1, [r4, #28]
   86232:	fb03 f302 	mul.w	r3, r3, r2
   86236:	9800      	ldr	r0, [sp, #0]
   86238:	464a      	mov	r2, r9
   8623a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8623c:	47b0      	blx	r6
   8623e:	f1b0 0a00 	subs.w	sl, r0, #0
   86242:	f73f af19 	bgt.w	86078 <__sfvwrite_r+0xbc>
   86246:	e735      	b.n	860b4 <__sfvwrite_r+0xf8>
   86248:	461a      	mov	r2, r3
   8624a:	4629      	mov	r1, r5
   8624c:	9301      	str	r3, [sp, #4]
   8624e:	f000 fc6f 	bl	86b30 <memmove>
   86252:	6822      	ldr	r2, [r4, #0]
   86254:	9b01      	ldr	r3, [sp, #4]
   86256:	4621      	mov	r1, r4
   86258:	441a      	add	r2, r3
   8625a:	6022      	str	r2, [r4, #0]
   8625c:	9800      	ldr	r0, [sp, #0]
   8625e:	f7ff fc49 	bl	85af4 <_fflush_r>
   86262:	9b01      	ldr	r3, [sp, #4]
   86264:	2800      	cmp	r0, #0
   86266:	f47f af25 	bne.w	860b4 <__sfvwrite_r+0xf8>
   8626a:	461f      	mov	r7, r3
   8626c:	e74e      	b.n	8610c <__sfvwrite_r+0x150>
   8626e:	9800      	ldr	r0, [sp, #0]
   86270:	f000 ffca 	bl	87208 <_realloc_r>
   86274:	4683      	mov	fp, r0
   86276:	2800      	cmp	r0, #0
   86278:	d1c5      	bne.n	86206 <__sfvwrite_r+0x24a>
   8627a:	9d00      	ldr	r5, [sp, #0]
   8627c:	6921      	ldr	r1, [r4, #16]
   8627e:	4628      	mov	r0, r5
   86280:	f7ff fdb6 	bl	85df0 <_free_r>
   86284:	220c      	movs	r2, #12
   86286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8628a:	602a      	str	r2, [r5, #0]
   8628c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   86290:	e712      	b.n	860b8 <__sfvwrite_r+0xfc>
   86292:	f106 0901 	add.w	r9, r6, #1
   86296:	e720      	b.n	860da <__sfvwrite_r+0x11e>
   86298:	f04f 30ff 	mov.w	r0, #4294967295
   8629c:	e6bd      	b.n	8601a <__sfvwrite_r+0x5e>
   8629e:	220c      	movs	r2, #12
   862a0:	9900      	ldr	r1, [sp, #0]
   862a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   862a6:	600a      	str	r2, [r1, #0]
   862a8:	e706      	b.n	860b8 <__sfvwrite_r+0xfc>
   862aa:	bf00      	nop
   862ac:	7ffffc00 	.word	0x7ffffc00

000862b0 <_fwalk_reent>:
   862b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   862b4:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   862b8:	d01e      	beq.n	862f8 <_fwalk_reent+0x48>
   862ba:	4688      	mov	r8, r1
   862bc:	4607      	mov	r7, r0
   862be:	f04f 0900 	mov.w	r9, #0
   862c2:	6875      	ldr	r5, [r6, #4]
   862c4:	68b4      	ldr	r4, [r6, #8]
   862c6:	3d01      	subs	r5, #1
   862c8:	d410      	bmi.n	862ec <_fwalk_reent+0x3c>
   862ca:	89a3      	ldrh	r3, [r4, #12]
   862cc:	3d01      	subs	r5, #1
   862ce:	2b01      	cmp	r3, #1
   862d0:	d908      	bls.n	862e4 <_fwalk_reent+0x34>
   862d2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   862d6:	3301      	adds	r3, #1
   862d8:	d004      	beq.n	862e4 <_fwalk_reent+0x34>
   862da:	4621      	mov	r1, r4
   862dc:	4638      	mov	r0, r7
   862de:	47c0      	blx	r8
   862e0:	ea49 0900 	orr.w	r9, r9, r0
   862e4:	1c6b      	adds	r3, r5, #1
   862e6:	f104 0468 	add.w	r4, r4, #104	; 0x68
   862ea:	d1ee      	bne.n	862ca <_fwalk_reent+0x1a>
   862ec:	6836      	ldr	r6, [r6, #0]
   862ee:	2e00      	cmp	r6, #0
   862f0:	d1e7      	bne.n	862c2 <_fwalk_reent+0x12>
   862f2:	4648      	mov	r0, r9
   862f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   862f8:	46b1      	mov	r9, r6
   862fa:	4648      	mov	r0, r9
   862fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00086300 <__locale_mb_cur_max>:
   86300:	4b04      	ldr	r3, [pc, #16]	; (86314 <__locale_mb_cur_max+0x14>)
   86302:	4a05      	ldr	r2, [pc, #20]	; (86318 <__locale_mb_cur_max+0x18>)
   86304:	681b      	ldr	r3, [r3, #0]
   86306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   86308:	2b00      	cmp	r3, #0
   8630a:	bf08      	it	eq
   8630c:	4613      	moveq	r3, r2
   8630e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   86312:	4770      	bx	lr
   86314:	20070134 	.word	0x20070134
   86318:	20070564 	.word	0x20070564

0008631c <_localeconv_r>:
   8631c:	4a04      	ldr	r2, [pc, #16]	; (86330 <_localeconv_r+0x14>)
   8631e:	4b05      	ldr	r3, [pc, #20]	; (86334 <_localeconv_r+0x18>)
   86320:	6812      	ldr	r2, [r2, #0]
   86322:	6b50      	ldr	r0, [r2, #52]	; 0x34
   86324:	2800      	cmp	r0, #0
   86326:	bf08      	it	eq
   86328:	4618      	moveq	r0, r3
   8632a:	30f0      	adds	r0, #240	; 0xf0
   8632c:	4770      	bx	lr
   8632e:	bf00      	nop
   86330:	20070134 	.word	0x20070134
   86334:	20070564 	.word	0x20070564

00086338 <__retarget_lock_init_recursive>:
   86338:	4770      	bx	lr
   8633a:	bf00      	nop

0008633c <__retarget_lock_close_recursive>:
   8633c:	4770      	bx	lr
   8633e:	bf00      	nop

00086340 <__retarget_lock_acquire_recursive>:
   86340:	4770      	bx	lr
   86342:	bf00      	nop

00086344 <__retarget_lock_release_recursive>:
   86344:	4770      	bx	lr
   86346:	bf00      	nop

00086348 <__swhatbuf_r>:
   86348:	b570      	push	{r4, r5, r6, lr}
   8634a:	460c      	mov	r4, r1
   8634c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86350:	b090      	sub	sp, #64	; 0x40
   86352:	2900      	cmp	r1, #0
   86354:	4615      	mov	r5, r2
   86356:	461e      	mov	r6, r3
   86358:	db14      	blt.n	86384 <__swhatbuf_r+0x3c>
   8635a:	aa01      	add	r2, sp, #4
   8635c:	f001 fb30 	bl	879c0 <_fstat_r>
   86360:	2800      	cmp	r0, #0
   86362:	db0f      	blt.n	86384 <__swhatbuf_r+0x3c>
   86364:	9a02      	ldr	r2, [sp, #8]
   86366:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8636a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8636e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   86372:	fab2 f282 	clz	r2, r2
   86376:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8637a:	0952      	lsrs	r2, r2, #5
   8637c:	6032      	str	r2, [r6, #0]
   8637e:	602b      	str	r3, [r5, #0]
   86380:	b010      	add	sp, #64	; 0x40
   86382:	bd70      	pop	{r4, r5, r6, pc}
   86384:	2300      	movs	r3, #0
   86386:	89a2      	ldrh	r2, [r4, #12]
   86388:	6033      	str	r3, [r6, #0]
   8638a:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   8638e:	d004      	beq.n	8639a <__swhatbuf_r+0x52>
   86390:	2240      	movs	r2, #64	; 0x40
   86392:	4618      	mov	r0, r3
   86394:	602a      	str	r2, [r5, #0]
   86396:	b010      	add	sp, #64	; 0x40
   86398:	bd70      	pop	{r4, r5, r6, pc}
   8639a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8639e:	602b      	str	r3, [r5, #0]
   863a0:	b010      	add	sp, #64	; 0x40
   863a2:	bd70      	pop	{r4, r5, r6, pc}

000863a4 <__smakebuf_r>:
   863a4:	898a      	ldrh	r2, [r1, #12]
   863a6:	460b      	mov	r3, r1
   863a8:	0792      	lsls	r2, r2, #30
   863aa:	d506      	bpl.n	863ba <__smakebuf_r+0x16>
   863ac:	2101      	movs	r1, #1
   863ae:	f103 0243 	add.w	r2, r3, #67	; 0x43
   863b2:	6159      	str	r1, [r3, #20]
   863b4:	601a      	str	r2, [r3, #0]
   863b6:	611a      	str	r2, [r3, #16]
   863b8:	4770      	bx	lr
   863ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   863bc:	b083      	sub	sp, #12
   863be:	ab01      	add	r3, sp, #4
   863c0:	466a      	mov	r2, sp
   863c2:	460c      	mov	r4, r1
   863c4:	4606      	mov	r6, r0
   863c6:	f7ff ffbf 	bl	86348 <__swhatbuf_r>
   863ca:	9900      	ldr	r1, [sp, #0]
   863cc:	4605      	mov	r5, r0
   863ce:	4630      	mov	r0, r6
   863d0:	f000 f83a 	bl	86448 <_malloc_r>
   863d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   863d8:	b1d8      	cbz	r0, 86412 <__smakebuf_r+0x6e>
   863da:	e89d 0006 	ldmia.w	sp, {r1, r2}
   863de:	4f15      	ldr	r7, [pc, #84]	; (86434 <__smakebuf_r+0x90>)
   863e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   863e4:	63f7      	str	r7, [r6, #60]	; 0x3c
   863e6:	81a3      	strh	r3, [r4, #12]
   863e8:	6020      	str	r0, [r4, #0]
   863ea:	6120      	str	r0, [r4, #16]
   863ec:	6161      	str	r1, [r4, #20]
   863ee:	b91a      	cbnz	r2, 863f8 <__smakebuf_r+0x54>
   863f0:	432b      	orrs	r3, r5
   863f2:	81a3      	strh	r3, [r4, #12]
   863f4:	b003      	add	sp, #12
   863f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   863f8:	4630      	mov	r0, r6
   863fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   863fe:	f001 faf3 	bl	879e8 <_isatty_r>
   86402:	b1a0      	cbz	r0, 8642e <__smakebuf_r+0x8a>
   86404:	89a3      	ldrh	r3, [r4, #12]
   86406:	f023 0303 	bic.w	r3, r3, #3
   8640a:	f043 0301 	orr.w	r3, r3, #1
   8640e:	b21b      	sxth	r3, r3
   86410:	e7ee      	b.n	863f0 <__smakebuf_r+0x4c>
   86412:	059a      	lsls	r2, r3, #22
   86414:	d4ee      	bmi.n	863f4 <__smakebuf_r+0x50>
   86416:	2101      	movs	r1, #1
   86418:	f023 0303 	bic.w	r3, r3, #3
   8641c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   86420:	f043 0302 	orr.w	r3, r3, #2
   86424:	81a3      	strh	r3, [r4, #12]
   86426:	6161      	str	r1, [r4, #20]
   86428:	6022      	str	r2, [r4, #0]
   8642a:	6122      	str	r2, [r4, #16]
   8642c:	e7e2      	b.n	863f4 <__smakebuf_r+0x50>
   8642e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86432:	e7dd      	b.n	863f0 <__smakebuf_r+0x4c>
   86434:	00085b49 	.word	0x00085b49

00086438 <malloc>:
   86438:	4b02      	ldr	r3, [pc, #8]	; (86444 <malloc+0xc>)
   8643a:	4601      	mov	r1, r0
   8643c:	6818      	ldr	r0, [r3, #0]
   8643e:	f000 b803 	b.w	86448 <_malloc_r>
   86442:	bf00      	nop
   86444:	20070134 	.word	0x20070134

00086448 <_malloc_r>:
   86448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8644c:	f101 060b 	add.w	r6, r1, #11
   86450:	2e16      	cmp	r6, #22
   86452:	b083      	sub	sp, #12
   86454:	4605      	mov	r5, r0
   86456:	f240 809e 	bls.w	86596 <_malloc_r+0x14e>
   8645a:	f036 0607 	bics.w	r6, r6, #7
   8645e:	f100 80bd 	bmi.w	865dc <_malloc_r+0x194>
   86462:	42b1      	cmp	r1, r6
   86464:	f200 80ba 	bhi.w	865dc <_malloc_r+0x194>
   86468:	f000 fbc6 	bl	86bf8 <__malloc_lock>
   8646c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   86470:	f0c0 8285 	bcc.w	8697e <_malloc_r+0x536>
   86474:	0a73      	lsrs	r3, r6, #9
   86476:	f000 80b8 	beq.w	865ea <_malloc_r+0x1a2>
   8647a:	2b04      	cmp	r3, #4
   8647c:	f200 816c 	bhi.w	86758 <_malloc_r+0x310>
   86480:	09b3      	lsrs	r3, r6, #6
   86482:	f103 0039 	add.w	r0, r3, #57	; 0x39
   86486:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   8648a:	00c1      	lsls	r1, r0, #3
   8648c:	4fb8      	ldr	r7, [pc, #736]	; (86770 <_malloc_r+0x328>)
   8648e:	4439      	add	r1, r7
   86490:	684c      	ldr	r4, [r1, #4]
   86492:	3908      	subs	r1, #8
   86494:	42a1      	cmp	r1, r4
   86496:	d106      	bne.n	864a6 <_malloc_r+0x5e>
   86498:	e00c      	b.n	864b4 <_malloc_r+0x6c>
   8649a:	2a00      	cmp	r2, #0
   8649c:	f280 80ab 	bge.w	865f6 <_malloc_r+0x1ae>
   864a0:	68e4      	ldr	r4, [r4, #12]
   864a2:	42a1      	cmp	r1, r4
   864a4:	d006      	beq.n	864b4 <_malloc_r+0x6c>
   864a6:	6863      	ldr	r3, [r4, #4]
   864a8:	f023 0303 	bic.w	r3, r3, #3
   864ac:	1b9a      	subs	r2, r3, r6
   864ae:	2a0f      	cmp	r2, #15
   864b0:	ddf3      	ble.n	8649a <_malloc_r+0x52>
   864b2:	4670      	mov	r0, lr
   864b4:	693c      	ldr	r4, [r7, #16]
   864b6:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 86784 <_malloc_r+0x33c>
   864ba:	4574      	cmp	r4, lr
   864bc:	f000 819e 	beq.w	867fc <_malloc_r+0x3b4>
   864c0:	6863      	ldr	r3, [r4, #4]
   864c2:	f023 0303 	bic.w	r3, r3, #3
   864c6:	1b9a      	subs	r2, r3, r6
   864c8:	2a0f      	cmp	r2, #15
   864ca:	f300 8183 	bgt.w	867d4 <_malloc_r+0x38c>
   864ce:	2a00      	cmp	r2, #0
   864d0:	f8c7 e014 	str.w	lr, [r7, #20]
   864d4:	f8c7 e010 	str.w	lr, [r7, #16]
   864d8:	f280 8091 	bge.w	865fe <_malloc_r+0x1b6>
   864dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   864e0:	f080 8154 	bcs.w	8678c <_malloc_r+0x344>
   864e4:	2201      	movs	r2, #1
   864e6:	08db      	lsrs	r3, r3, #3
   864e8:	6879      	ldr	r1, [r7, #4]
   864ea:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   864ee:	4413      	add	r3, r2
   864f0:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   864f4:	fa02 f20c 	lsl.w	r2, r2, ip
   864f8:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   864fc:	430a      	orrs	r2, r1
   864fe:	f1ac 0108 	sub.w	r1, ip, #8
   86502:	60e1      	str	r1, [r4, #12]
   86504:	f8c4 8008 	str.w	r8, [r4, #8]
   86508:	607a      	str	r2, [r7, #4]
   8650a:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8650e:	f8c8 400c 	str.w	r4, [r8, #12]
   86512:	2401      	movs	r4, #1
   86514:	1083      	asrs	r3, r0, #2
   86516:	409c      	lsls	r4, r3
   86518:	4294      	cmp	r4, r2
   8651a:	d87d      	bhi.n	86618 <_malloc_r+0x1d0>
   8651c:	4214      	tst	r4, r2
   8651e:	d106      	bne.n	8652e <_malloc_r+0xe6>
   86520:	f020 0003 	bic.w	r0, r0, #3
   86524:	0064      	lsls	r4, r4, #1
   86526:	4214      	tst	r4, r2
   86528:	f100 0004 	add.w	r0, r0, #4
   8652c:	d0fa      	beq.n	86524 <_malloc_r+0xdc>
   8652e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   86532:	46cc      	mov	ip, r9
   86534:	4680      	mov	r8, r0
   86536:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8653a:	459c      	cmp	ip, r3
   8653c:	d107      	bne.n	8654e <_malloc_r+0x106>
   8653e:	e15f      	b.n	86800 <_malloc_r+0x3b8>
   86540:	2a00      	cmp	r2, #0
   86542:	f280 816d 	bge.w	86820 <_malloc_r+0x3d8>
   86546:	68db      	ldr	r3, [r3, #12]
   86548:	459c      	cmp	ip, r3
   8654a:	f000 8159 	beq.w	86800 <_malloc_r+0x3b8>
   8654e:	6859      	ldr	r1, [r3, #4]
   86550:	f021 0103 	bic.w	r1, r1, #3
   86554:	1b8a      	subs	r2, r1, r6
   86556:	2a0f      	cmp	r2, #15
   86558:	ddf2      	ble.n	86540 <_malloc_r+0xf8>
   8655a:	68dc      	ldr	r4, [r3, #12]
   8655c:	f8d3 c008 	ldr.w	ip, [r3, #8]
   86560:	f046 0801 	orr.w	r8, r6, #1
   86564:	4628      	mov	r0, r5
   86566:	441e      	add	r6, r3
   86568:	f042 0501 	orr.w	r5, r2, #1
   8656c:	f8c3 8004 	str.w	r8, [r3, #4]
   86570:	f8cc 400c 	str.w	r4, [ip, #12]
   86574:	f8c4 c008 	str.w	ip, [r4, #8]
   86578:	617e      	str	r6, [r7, #20]
   8657a:	613e      	str	r6, [r7, #16]
   8657c:	f8c6 e00c 	str.w	lr, [r6, #12]
   86580:	f8c6 e008 	str.w	lr, [r6, #8]
   86584:	6075      	str	r5, [r6, #4]
   86586:	505a      	str	r2, [r3, r1]
   86588:	9300      	str	r3, [sp, #0]
   8658a:	f000 fb3b 	bl	86c04 <__malloc_unlock>
   8658e:	9b00      	ldr	r3, [sp, #0]
   86590:	f103 0408 	add.w	r4, r3, #8
   86594:	e01e      	b.n	865d4 <_malloc_r+0x18c>
   86596:	2910      	cmp	r1, #16
   86598:	d820      	bhi.n	865dc <_malloc_r+0x194>
   8659a:	f000 fb2d 	bl	86bf8 <__malloc_lock>
   8659e:	2610      	movs	r6, #16
   865a0:	2318      	movs	r3, #24
   865a2:	2002      	movs	r0, #2
   865a4:	4f72      	ldr	r7, [pc, #456]	; (86770 <_malloc_r+0x328>)
   865a6:	443b      	add	r3, r7
   865a8:	685c      	ldr	r4, [r3, #4]
   865aa:	f1a3 0208 	sub.w	r2, r3, #8
   865ae:	4294      	cmp	r4, r2
   865b0:	f000 812f 	beq.w	86812 <_malloc_r+0x3ca>
   865b4:	6863      	ldr	r3, [r4, #4]
   865b6:	68e1      	ldr	r1, [r4, #12]
   865b8:	f023 0303 	bic.w	r3, r3, #3
   865bc:	4423      	add	r3, r4
   865be:	685a      	ldr	r2, [r3, #4]
   865c0:	68a6      	ldr	r6, [r4, #8]
   865c2:	f042 0201 	orr.w	r2, r2, #1
   865c6:	60f1      	str	r1, [r6, #12]
   865c8:	4628      	mov	r0, r5
   865ca:	608e      	str	r6, [r1, #8]
   865cc:	605a      	str	r2, [r3, #4]
   865ce:	f000 fb19 	bl	86c04 <__malloc_unlock>
   865d2:	3408      	adds	r4, #8
   865d4:	4620      	mov	r0, r4
   865d6:	b003      	add	sp, #12
   865d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   865dc:	2400      	movs	r4, #0
   865de:	230c      	movs	r3, #12
   865e0:	4620      	mov	r0, r4
   865e2:	602b      	str	r3, [r5, #0]
   865e4:	b003      	add	sp, #12
   865e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   865ea:	2040      	movs	r0, #64	; 0x40
   865ec:	f44f 7100 	mov.w	r1, #512	; 0x200
   865f0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   865f4:	e74a      	b.n	8648c <_malloc_r+0x44>
   865f6:	4423      	add	r3, r4
   865f8:	685a      	ldr	r2, [r3, #4]
   865fa:	68e1      	ldr	r1, [r4, #12]
   865fc:	e7e0      	b.n	865c0 <_malloc_r+0x178>
   865fe:	4423      	add	r3, r4
   86600:	685a      	ldr	r2, [r3, #4]
   86602:	4628      	mov	r0, r5
   86604:	f042 0201 	orr.w	r2, r2, #1
   86608:	605a      	str	r2, [r3, #4]
   8660a:	3408      	adds	r4, #8
   8660c:	f000 fafa 	bl	86c04 <__malloc_unlock>
   86610:	4620      	mov	r0, r4
   86612:	b003      	add	sp, #12
   86614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86618:	68bc      	ldr	r4, [r7, #8]
   8661a:	6863      	ldr	r3, [r4, #4]
   8661c:	f023 0803 	bic.w	r8, r3, #3
   86620:	45b0      	cmp	r8, r6
   86622:	d304      	bcc.n	8662e <_malloc_r+0x1e6>
   86624:	eba8 0306 	sub.w	r3, r8, r6
   86628:	2b0f      	cmp	r3, #15
   8662a:	f300 8085 	bgt.w	86738 <_malloc_r+0x2f0>
   8662e:	f8df 9158 	ldr.w	r9, [pc, #344]	; 86788 <_malloc_r+0x340>
   86632:	4b50      	ldr	r3, [pc, #320]	; (86774 <_malloc_r+0x32c>)
   86634:	f8d9 2000 	ldr.w	r2, [r9]
   86638:	681b      	ldr	r3, [r3, #0]
   8663a:	3201      	adds	r2, #1
   8663c:	4433      	add	r3, r6
   8663e:	eb04 0a08 	add.w	sl, r4, r8
   86642:	f000 8154 	beq.w	868ee <_malloc_r+0x4a6>
   86646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8664a:	330f      	adds	r3, #15
   8664c:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   86650:	f02b 0b0f 	bic.w	fp, fp, #15
   86654:	4659      	mov	r1, fp
   86656:	4628      	mov	r0, r5
   86658:	f000 ff8c 	bl	87574 <_sbrk_r>
   8665c:	1c41      	adds	r1, r0, #1
   8665e:	4602      	mov	r2, r0
   86660:	f000 80fb 	beq.w	8685a <_malloc_r+0x412>
   86664:	4582      	cmp	sl, r0
   86666:	f200 80f6 	bhi.w	86856 <_malloc_r+0x40e>
   8666a:	4b43      	ldr	r3, [pc, #268]	; (86778 <_malloc_r+0x330>)
   8666c:	6819      	ldr	r1, [r3, #0]
   8666e:	4459      	add	r1, fp
   86670:	6019      	str	r1, [r3, #0]
   86672:	f000 814c 	beq.w	8690e <_malloc_r+0x4c6>
   86676:	f8d9 0000 	ldr.w	r0, [r9]
   8667a:	3001      	adds	r0, #1
   8667c:	bf1b      	ittet	ne
   8667e:	eba2 0a0a 	subne.w	sl, r2, sl
   86682:	4451      	addne	r1, sl
   86684:	f8c9 2000 	streq.w	r2, [r9]
   86688:	6019      	strne	r1, [r3, #0]
   8668a:	f012 0107 	ands.w	r1, r2, #7
   8668e:	f000 8114 	beq.w	868ba <_malloc_r+0x472>
   86692:	f1c1 0008 	rsb	r0, r1, #8
   86696:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8669a:	4402      	add	r2, r0
   8669c:	3108      	adds	r1, #8
   8669e:	eb02 090b 	add.w	r9, r2, fp
   866a2:	f3c9 090b 	ubfx	r9, r9, #0, #12
   866a6:	eba1 0909 	sub.w	r9, r1, r9
   866aa:	4649      	mov	r1, r9
   866ac:	4628      	mov	r0, r5
   866ae:	9301      	str	r3, [sp, #4]
   866b0:	9200      	str	r2, [sp, #0]
   866b2:	f000 ff5f 	bl	87574 <_sbrk_r>
   866b6:	1c43      	adds	r3, r0, #1
   866b8:	e89d 000c 	ldmia.w	sp, {r2, r3}
   866bc:	f000 8142 	beq.w	86944 <_malloc_r+0x4fc>
   866c0:	1a80      	subs	r0, r0, r2
   866c2:	4448      	add	r0, r9
   866c4:	f040 0001 	orr.w	r0, r0, #1
   866c8:	6819      	ldr	r1, [r3, #0]
   866ca:	42bc      	cmp	r4, r7
   866cc:	4449      	add	r1, r9
   866ce:	60ba      	str	r2, [r7, #8]
   866d0:	6019      	str	r1, [r3, #0]
   866d2:	6050      	str	r0, [r2, #4]
   866d4:	d017      	beq.n	86706 <_malloc_r+0x2be>
   866d6:	f1b8 0f0f 	cmp.w	r8, #15
   866da:	f240 80fa 	bls.w	868d2 <_malloc_r+0x48a>
   866de:	f04f 0c05 	mov.w	ip, #5
   866e2:	6862      	ldr	r2, [r4, #4]
   866e4:	f1a8 000c 	sub.w	r0, r8, #12
   866e8:	f020 0007 	bic.w	r0, r0, #7
   866ec:	f002 0201 	and.w	r2, r2, #1
   866f0:	eb04 0e00 	add.w	lr, r4, r0
   866f4:	4302      	orrs	r2, r0
   866f6:	280f      	cmp	r0, #15
   866f8:	6062      	str	r2, [r4, #4]
   866fa:	f8ce c004 	str.w	ip, [lr, #4]
   866fe:	f8ce c008 	str.w	ip, [lr, #8]
   86702:	f200 8116 	bhi.w	86932 <_malloc_r+0x4ea>
   86706:	4b1d      	ldr	r3, [pc, #116]	; (8677c <_malloc_r+0x334>)
   86708:	68bc      	ldr	r4, [r7, #8]
   8670a:	681a      	ldr	r2, [r3, #0]
   8670c:	4291      	cmp	r1, r2
   8670e:	bf88      	it	hi
   86710:	6019      	strhi	r1, [r3, #0]
   86712:	4b1b      	ldr	r3, [pc, #108]	; (86780 <_malloc_r+0x338>)
   86714:	681a      	ldr	r2, [r3, #0]
   86716:	4291      	cmp	r1, r2
   86718:	6862      	ldr	r2, [r4, #4]
   8671a:	bf88      	it	hi
   8671c:	6019      	strhi	r1, [r3, #0]
   8671e:	f022 0203 	bic.w	r2, r2, #3
   86722:	4296      	cmp	r6, r2
   86724:	eba2 0306 	sub.w	r3, r2, r6
   86728:	d801      	bhi.n	8672e <_malloc_r+0x2e6>
   8672a:	2b0f      	cmp	r3, #15
   8672c:	dc04      	bgt.n	86738 <_malloc_r+0x2f0>
   8672e:	4628      	mov	r0, r5
   86730:	f000 fa68 	bl	86c04 <__malloc_unlock>
   86734:	2400      	movs	r4, #0
   86736:	e74d      	b.n	865d4 <_malloc_r+0x18c>
   86738:	f046 0201 	orr.w	r2, r6, #1
   8673c:	f043 0301 	orr.w	r3, r3, #1
   86740:	4426      	add	r6, r4
   86742:	6062      	str	r2, [r4, #4]
   86744:	4628      	mov	r0, r5
   86746:	60be      	str	r6, [r7, #8]
   86748:	3408      	adds	r4, #8
   8674a:	6073      	str	r3, [r6, #4]
   8674c:	f000 fa5a 	bl	86c04 <__malloc_unlock>
   86750:	4620      	mov	r0, r4
   86752:	b003      	add	sp, #12
   86754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86758:	2b14      	cmp	r3, #20
   8675a:	d970      	bls.n	8683e <_malloc_r+0x3f6>
   8675c:	2b54      	cmp	r3, #84	; 0x54
   8675e:	f200 80a2 	bhi.w	868a6 <_malloc_r+0x45e>
   86762:	0b33      	lsrs	r3, r6, #12
   86764:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   86768:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   8676c:	00c1      	lsls	r1, r0, #3
   8676e:	e68d      	b.n	8648c <_malloc_r+0x44>
   86770:	200706d0 	.word	0x200706d0
   86774:	20070c40 	.word	0x20070c40
   86778:	20070c10 	.word	0x20070c10
   8677c:	20070c38 	.word	0x20070c38
   86780:	20070c3c 	.word	0x20070c3c
   86784:	200706d8 	.word	0x200706d8
   86788:	20070ad8 	.word	0x20070ad8
   8678c:	0a5a      	lsrs	r2, r3, #9
   8678e:	2a04      	cmp	r2, #4
   86790:	d95b      	bls.n	8684a <_malloc_r+0x402>
   86792:	2a14      	cmp	r2, #20
   86794:	f200 80ae 	bhi.w	868f4 <_malloc_r+0x4ac>
   86798:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   8679c:	00c9      	lsls	r1, r1, #3
   8679e:	325b      	adds	r2, #91	; 0x5b
   867a0:	eb07 0c01 	add.w	ip, r7, r1
   867a4:	5879      	ldr	r1, [r7, r1]
   867a6:	f1ac 0c08 	sub.w	ip, ip, #8
   867aa:	458c      	cmp	ip, r1
   867ac:	f000 8088 	beq.w	868c0 <_malloc_r+0x478>
   867b0:	684a      	ldr	r2, [r1, #4]
   867b2:	f022 0203 	bic.w	r2, r2, #3
   867b6:	4293      	cmp	r3, r2
   867b8:	d273      	bcs.n	868a2 <_malloc_r+0x45a>
   867ba:	6889      	ldr	r1, [r1, #8]
   867bc:	458c      	cmp	ip, r1
   867be:	d1f7      	bne.n	867b0 <_malloc_r+0x368>
   867c0:	f8dc 300c 	ldr.w	r3, [ip, #12]
   867c4:	687a      	ldr	r2, [r7, #4]
   867c6:	60e3      	str	r3, [r4, #12]
   867c8:	f8c4 c008 	str.w	ip, [r4, #8]
   867cc:	609c      	str	r4, [r3, #8]
   867ce:	f8cc 400c 	str.w	r4, [ip, #12]
   867d2:	e69e      	b.n	86512 <_malloc_r+0xca>
   867d4:	f046 0c01 	orr.w	ip, r6, #1
   867d8:	f042 0101 	orr.w	r1, r2, #1
   867dc:	4426      	add	r6, r4
   867de:	f8c4 c004 	str.w	ip, [r4, #4]
   867e2:	4628      	mov	r0, r5
   867e4:	617e      	str	r6, [r7, #20]
   867e6:	613e      	str	r6, [r7, #16]
   867e8:	f8c6 e00c 	str.w	lr, [r6, #12]
   867ec:	f8c6 e008 	str.w	lr, [r6, #8]
   867f0:	6071      	str	r1, [r6, #4]
   867f2:	50e2      	str	r2, [r4, r3]
   867f4:	f000 fa06 	bl	86c04 <__malloc_unlock>
   867f8:	3408      	adds	r4, #8
   867fa:	e6eb      	b.n	865d4 <_malloc_r+0x18c>
   867fc:	687a      	ldr	r2, [r7, #4]
   867fe:	e688      	b.n	86512 <_malloc_r+0xca>
   86800:	f108 0801 	add.w	r8, r8, #1
   86804:	f018 0f03 	tst.w	r8, #3
   86808:	f10c 0c08 	add.w	ip, ip, #8
   8680c:	f47f ae93 	bne.w	86536 <_malloc_r+0xee>
   86810:	e02d      	b.n	8686e <_malloc_r+0x426>
   86812:	68dc      	ldr	r4, [r3, #12]
   86814:	42a3      	cmp	r3, r4
   86816:	bf08      	it	eq
   86818:	3002      	addeq	r0, #2
   8681a:	f43f ae4b 	beq.w	864b4 <_malloc_r+0x6c>
   8681e:	e6c9      	b.n	865b4 <_malloc_r+0x16c>
   86820:	461c      	mov	r4, r3
   86822:	4419      	add	r1, r3
   86824:	684a      	ldr	r2, [r1, #4]
   86826:	68db      	ldr	r3, [r3, #12]
   86828:	f854 6f08 	ldr.w	r6, [r4, #8]!
   8682c:	f042 0201 	orr.w	r2, r2, #1
   86830:	604a      	str	r2, [r1, #4]
   86832:	4628      	mov	r0, r5
   86834:	60f3      	str	r3, [r6, #12]
   86836:	609e      	str	r6, [r3, #8]
   86838:	f000 f9e4 	bl	86c04 <__malloc_unlock>
   8683c:	e6ca      	b.n	865d4 <_malloc_r+0x18c>
   8683e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   86842:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   86846:	00c1      	lsls	r1, r0, #3
   86848:	e620      	b.n	8648c <_malloc_r+0x44>
   8684a:	099a      	lsrs	r2, r3, #6
   8684c:	f102 0139 	add.w	r1, r2, #57	; 0x39
   86850:	00c9      	lsls	r1, r1, #3
   86852:	3238      	adds	r2, #56	; 0x38
   86854:	e7a4      	b.n	867a0 <_malloc_r+0x358>
   86856:	42bc      	cmp	r4, r7
   86858:	d054      	beq.n	86904 <_malloc_r+0x4bc>
   8685a:	68bc      	ldr	r4, [r7, #8]
   8685c:	6862      	ldr	r2, [r4, #4]
   8685e:	f022 0203 	bic.w	r2, r2, #3
   86862:	e75e      	b.n	86722 <_malloc_r+0x2da>
   86864:	f859 3908 	ldr.w	r3, [r9], #-8
   86868:	4599      	cmp	r9, r3
   8686a:	f040 8086 	bne.w	8697a <_malloc_r+0x532>
   8686e:	f010 0f03 	tst.w	r0, #3
   86872:	f100 30ff 	add.w	r0, r0, #4294967295
   86876:	d1f5      	bne.n	86864 <_malloc_r+0x41c>
   86878:	687b      	ldr	r3, [r7, #4]
   8687a:	ea23 0304 	bic.w	r3, r3, r4
   8687e:	607b      	str	r3, [r7, #4]
   86880:	0064      	lsls	r4, r4, #1
   86882:	429c      	cmp	r4, r3
   86884:	f63f aec8 	bhi.w	86618 <_malloc_r+0x1d0>
   86888:	2c00      	cmp	r4, #0
   8688a:	f43f aec5 	beq.w	86618 <_malloc_r+0x1d0>
   8688e:	421c      	tst	r4, r3
   86890:	4640      	mov	r0, r8
   86892:	f47f ae4c 	bne.w	8652e <_malloc_r+0xe6>
   86896:	0064      	lsls	r4, r4, #1
   86898:	421c      	tst	r4, r3
   8689a:	f100 0004 	add.w	r0, r0, #4
   8689e:	d0fa      	beq.n	86896 <_malloc_r+0x44e>
   868a0:	e645      	b.n	8652e <_malloc_r+0xe6>
   868a2:	468c      	mov	ip, r1
   868a4:	e78c      	b.n	867c0 <_malloc_r+0x378>
   868a6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   868aa:	d815      	bhi.n	868d8 <_malloc_r+0x490>
   868ac:	0bf3      	lsrs	r3, r6, #15
   868ae:	f103 0078 	add.w	r0, r3, #120	; 0x78
   868b2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   868b6:	00c1      	lsls	r1, r0, #3
   868b8:	e5e8      	b.n	8648c <_malloc_r+0x44>
   868ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   868be:	e6ee      	b.n	8669e <_malloc_r+0x256>
   868c0:	2101      	movs	r1, #1
   868c2:	687b      	ldr	r3, [r7, #4]
   868c4:	1092      	asrs	r2, r2, #2
   868c6:	fa01 f202 	lsl.w	r2, r1, r2
   868ca:	431a      	orrs	r2, r3
   868cc:	607a      	str	r2, [r7, #4]
   868ce:	4663      	mov	r3, ip
   868d0:	e779      	b.n	867c6 <_malloc_r+0x37e>
   868d2:	2301      	movs	r3, #1
   868d4:	6053      	str	r3, [r2, #4]
   868d6:	e72a      	b.n	8672e <_malloc_r+0x2e6>
   868d8:	f240 5254 	movw	r2, #1364	; 0x554
   868dc:	4293      	cmp	r3, r2
   868de:	d822      	bhi.n	86926 <_malloc_r+0x4de>
   868e0:	0cb3      	lsrs	r3, r6, #18
   868e2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   868e6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   868ea:	00c1      	lsls	r1, r0, #3
   868ec:	e5ce      	b.n	8648c <_malloc_r+0x44>
   868ee:	f103 0b10 	add.w	fp, r3, #16
   868f2:	e6af      	b.n	86654 <_malloc_r+0x20c>
   868f4:	2a54      	cmp	r2, #84	; 0x54
   868f6:	d829      	bhi.n	8694c <_malloc_r+0x504>
   868f8:	0b1a      	lsrs	r2, r3, #12
   868fa:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   868fe:	00c9      	lsls	r1, r1, #3
   86900:	326e      	adds	r2, #110	; 0x6e
   86902:	e74d      	b.n	867a0 <_malloc_r+0x358>
   86904:	4b20      	ldr	r3, [pc, #128]	; (86988 <_malloc_r+0x540>)
   86906:	6819      	ldr	r1, [r3, #0]
   86908:	4459      	add	r1, fp
   8690a:	6019      	str	r1, [r3, #0]
   8690c:	e6b3      	b.n	86676 <_malloc_r+0x22e>
   8690e:	f3ca 000b 	ubfx	r0, sl, #0, #12
   86912:	2800      	cmp	r0, #0
   86914:	f47f aeaf 	bne.w	86676 <_malloc_r+0x22e>
   86918:	eb08 030b 	add.w	r3, r8, fp
   8691c:	68ba      	ldr	r2, [r7, #8]
   8691e:	f043 0301 	orr.w	r3, r3, #1
   86922:	6053      	str	r3, [r2, #4]
   86924:	e6ef      	b.n	86706 <_malloc_r+0x2be>
   86926:	207f      	movs	r0, #127	; 0x7f
   86928:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8692c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   86930:	e5ac      	b.n	8648c <_malloc_r+0x44>
   86932:	f104 0108 	add.w	r1, r4, #8
   86936:	4628      	mov	r0, r5
   86938:	9300      	str	r3, [sp, #0]
   8693a:	f7ff fa59 	bl	85df0 <_free_r>
   8693e:	9b00      	ldr	r3, [sp, #0]
   86940:	6819      	ldr	r1, [r3, #0]
   86942:	e6e0      	b.n	86706 <_malloc_r+0x2be>
   86944:	2001      	movs	r0, #1
   86946:	f04f 0900 	mov.w	r9, #0
   8694a:	e6bd      	b.n	866c8 <_malloc_r+0x280>
   8694c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   86950:	d805      	bhi.n	8695e <_malloc_r+0x516>
   86952:	0bda      	lsrs	r2, r3, #15
   86954:	f102 0178 	add.w	r1, r2, #120	; 0x78
   86958:	00c9      	lsls	r1, r1, #3
   8695a:	3277      	adds	r2, #119	; 0x77
   8695c:	e720      	b.n	867a0 <_malloc_r+0x358>
   8695e:	f240 5154 	movw	r1, #1364	; 0x554
   86962:	428a      	cmp	r2, r1
   86964:	d805      	bhi.n	86972 <_malloc_r+0x52a>
   86966:	0c9a      	lsrs	r2, r3, #18
   86968:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   8696c:	00c9      	lsls	r1, r1, #3
   8696e:	327c      	adds	r2, #124	; 0x7c
   86970:	e716      	b.n	867a0 <_malloc_r+0x358>
   86972:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   86976:	227e      	movs	r2, #126	; 0x7e
   86978:	e712      	b.n	867a0 <_malloc_r+0x358>
   8697a:	687b      	ldr	r3, [r7, #4]
   8697c:	e780      	b.n	86880 <_malloc_r+0x438>
   8697e:	08f0      	lsrs	r0, r6, #3
   86980:	f106 0308 	add.w	r3, r6, #8
   86984:	e60e      	b.n	865a4 <_malloc_r+0x15c>
   86986:	bf00      	nop
   86988:	20070c10 	.word	0x20070c10

0008698c <__ascii_mbtowc>:
   8698c:	b082      	sub	sp, #8
   8698e:	b149      	cbz	r1, 869a4 <__ascii_mbtowc+0x18>
   86990:	b15a      	cbz	r2, 869aa <__ascii_mbtowc+0x1e>
   86992:	b16b      	cbz	r3, 869b0 <__ascii_mbtowc+0x24>
   86994:	7813      	ldrb	r3, [r2, #0]
   86996:	600b      	str	r3, [r1, #0]
   86998:	7812      	ldrb	r2, [r2, #0]
   8699a:	1c10      	adds	r0, r2, #0
   8699c:	bf18      	it	ne
   8699e:	2001      	movne	r0, #1
   869a0:	b002      	add	sp, #8
   869a2:	4770      	bx	lr
   869a4:	a901      	add	r1, sp, #4
   869a6:	2a00      	cmp	r2, #0
   869a8:	d1f3      	bne.n	86992 <__ascii_mbtowc+0x6>
   869aa:	4610      	mov	r0, r2
   869ac:	b002      	add	sp, #8
   869ae:	4770      	bx	lr
   869b0:	f06f 0001 	mvn.w	r0, #1
   869b4:	e7f4      	b.n	869a0 <__ascii_mbtowc+0x14>
   869b6:	bf00      	nop

000869b8 <memchr>:
   869b8:	0783      	lsls	r3, r0, #30
   869ba:	b470      	push	{r4, r5, r6}
   869bc:	b2cd      	uxtb	r5, r1
   869be:	d03d      	beq.n	86a3c <memchr+0x84>
   869c0:	1e54      	subs	r4, r2, #1
   869c2:	b30a      	cbz	r2, 86a08 <memchr+0x50>
   869c4:	7803      	ldrb	r3, [r0, #0]
   869c6:	42ab      	cmp	r3, r5
   869c8:	d01f      	beq.n	86a0a <memchr+0x52>
   869ca:	1c43      	adds	r3, r0, #1
   869cc:	e005      	b.n	869da <memchr+0x22>
   869ce:	f114 34ff 	adds.w	r4, r4, #4294967295
   869d2:	d319      	bcc.n	86a08 <memchr+0x50>
   869d4:	7802      	ldrb	r2, [r0, #0]
   869d6:	42aa      	cmp	r2, r5
   869d8:	d017      	beq.n	86a0a <memchr+0x52>
   869da:	f013 0f03 	tst.w	r3, #3
   869de:	4618      	mov	r0, r3
   869e0:	f103 0301 	add.w	r3, r3, #1
   869e4:	d1f3      	bne.n	869ce <memchr+0x16>
   869e6:	2c03      	cmp	r4, #3
   869e8:	d811      	bhi.n	86a0e <memchr+0x56>
   869ea:	b34c      	cbz	r4, 86a40 <memchr+0x88>
   869ec:	7803      	ldrb	r3, [r0, #0]
   869ee:	42ab      	cmp	r3, r5
   869f0:	d00b      	beq.n	86a0a <memchr+0x52>
   869f2:	4404      	add	r4, r0
   869f4:	1c43      	adds	r3, r0, #1
   869f6:	e002      	b.n	869fe <memchr+0x46>
   869f8:	7802      	ldrb	r2, [r0, #0]
   869fa:	42aa      	cmp	r2, r5
   869fc:	d005      	beq.n	86a0a <memchr+0x52>
   869fe:	429c      	cmp	r4, r3
   86a00:	4618      	mov	r0, r3
   86a02:	f103 0301 	add.w	r3, r3, #1
   86a06:	d1f7      	bne.n	869f8 <memchr+0x40>
   86a08:	2000      	movs	r0, #0
   86a0a:	bc70      	pop	{r4, r5, r6}
   86a0c:	4770      	bx	lr
   86a0e:	0209      	lsls	r1, r1, #8
   86a10:	b289      	uxth	r1, r1
   86a12:	4329      	orrs	r1, r5
   86a14:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   86a18:	6803      	ldr	r3, [r0, #0]
   86a1a:	4606      	mov	r6, r0
   86a1c:	404b      	eors	r3, r1
   86a1e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   86a22:	ea22 0303 	bic.w	r3, r2, r3
   86a26:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   86a2a:	f100 0004 	add.w	r0, r0, #4
   86a2e:	d103      	bne.n	86a38 <memchr+0x80>
   86a30:	3c04      	subs	r4, #4
   86a32:	2c03      	cmp	r4, #3
   86a34:	d8f0      	bhi.n	86a18 <memchr+0x60>
   86a36:	e7d8      	b.n	869ea <memchr+0x32>
   86a38:	4630      	mov	r0, r6
   86a3a:	e7d7      	b.n	869ec <memchr+0x34>
   86a3c:	4614      	mov	r4, r2
   86a3e:	e7d2      	b.n	869e6 <memchr+0x2e>
   86a40:	4620      	mov	r0, r4
   86a42:	e7e2      	b.n	86a0a <memchr+0x52>

00086a44 <memcpy>:
   86a44:	4684      	mov	ip, r0
   86a46:	ea41 0300 	orr.w	r3, r1, r0
   86a4a:	f013 0303 	ands.w	r3, r3, #3
   86a4e:	d149      	bne.n	86ae4 <memcpy+0xa0>
   86a50:	3a40      	subs	r2, #64	; 0x40
   86a52:	d323      	bcc.n	86a9c <memcpy+0x58>
   86a54:	680b      	ldr	r3, [r1, #0]
   86a56:	6003      	str	r3, [r0, #0]
   86a58:	684b      	ldr	r3, [r1, #4]
   86a5a:	6043      	str	r3, [r0, #4]
   86a5c:	688b      	ldr	r3, [r1, #8]
   86a5e:	6083      	str	r3, [r0, #8]
   86a60:	68cb      	ldr	r3, [r1, #12]
   86a62:	60c3      	str	r3, [r0, #12]
   86a64:	690b      	ldr	r3, [r1, #16]
   86a66:	6103      	str	r3, [r0, #16]
   86a68:	694b      	ldr	r3, [r1, #20]
   86a6a:	6143      	str	r3, [r0, #20]
   86a6c:	698b      	ldr	r3, [r1, #24]
   86a6e:	6183      	str	r3, [r0, #24]
   86a70:	69cb      	ldr	r3, [r1, #28]
   86a72:	61c3      	str	r3, [r0, #28]
   86a74:	6a0b      	ldr	r3, [r1, #32]
   86a76:	6203      	str	r3, [r0, #32]
   86a78:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86a7a:	6243      	str	r3, [r0, #36]	; 0x24
   86a7c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86a7e:	6283      	str	r3, [r0, #40]	; 0x28
   86a80:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86a82:	62c3      	str	r3, [r0, #44]	; 0x2c
   86a84:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86a86:	6303      	str	r3, [r0, #48]	; 0x30
   86a88:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86a8a:	6343      	str	r3, [r0, #52]	; 0x34
   86a8c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86a8e:	6383      	str	r3, [r0, #56]	; 0x38
   86a90:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86a92:	63c3      	str	r3, [r0, #60]	; 0x3c
   86a94:	3040      	adds	r0, #64	; 0x40
   86a96:	3140      	adds	r1, #64	; 0x40
   86a98:	3a40      	subs	r2, #64	; 0x40
   86a9a:	d2db      	bcs.n	86a54 <memcpy+0x10>
   86a9c:	3230      	adds	r2, #48	; 0x30
   86a9e:	d30b      	bcc.n	86ab8 <memcpy+0x74>
   86aa0:	680b      	ldr	r3, [r1, #0]
   86aa2:	6003      	str	r3, [r0, #0]
   86aa4:	684b      	ldr	r3, [r1, #4]
   86aa6:	6043      	str	r3, [r0, #4]
   86aa8:	688b      	ldr	r3, [r1, #8]
   86aaa:	6083      	str	r3, [r0, #8]
   86aac:	68cb      	ldr	r3, [r1, #12]
   86aae:	60c3      	str	r3, [r0, #12]
   86ab0:	3010      	adds	r0, #16
   86ab2:	3110      	adds	r1, #16
   86ab4:	3a10      	subs	r2, #16
   86ab6:	d2f3      	bcs.n	86aa0 <memcpy+0x5c>
   86ab8:	320c      	adds	r2, #12
   86aba:	d305      	bcc.n	86ac8 <memcpy+0x84>
   86abc:	f851 3b04 	ldr.w	r3, [r1], #4
   86ac0:	f840 3b04 	str.w	r3, [r0], #4
   86ac4:	3a04      	subs	r2, #4
   86ac6:	d2f9      	bcs.n	86abc <memcpy+0x78>
   86ac8:	3204      	adds	r2, #4
   86aca:	d008      	beq.n	86ade <memcpy+0x9a>
   86acc:	07d2      	lsls	r2, r2, #31
   86ace:	bf1c      	itt	ne
   86ad0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86ad4:	f800 3b01 	strbne.w	r3, [r0], #1
   86ad8:	d301      	bcc.n	86ade <memcpy+0x9a>
   86ada:	880b      	ldrh	r3, [r1, #0]
   86adc:	8003      	strh	r3, [r0, #0]
   86ade:	4660      	mov	r0, ip
   86ae0:	4770      	bx	lr
   86ae2:	bf00      	nop
   86ae4:	2a08      	cmp	r2, #8
   86ae6:	d313      	bcc.n	86b10 <memcpy+0xcc>
   86ae8:	078b      	lsls	r3, r1, #30
   86aea:	d0b1      	beq.n	86a50 <memcpy+0xc>
   86aec:	f010 0303 	ands.w	r3, r0, #3
   86af0:	d0ae      	beq.n	86a50 <memcpy+0xc>
   86af2:	f1c3 0304 	rsb	r3, r3, #4
   86af6:	1ad2      	subs	r2, r2, r3
   86af8:	07db      	lsls	r3, r3, #31
   86afa:	bf1c      	itt	ne
   86afc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86b00:	f800 3b01 	strbne.w	r3, [r0], #1
   86b04:	d3a4      	bcc.n	86a50 <memcpy+0xc>
   86b06:	f831 3b02 	ldrh.w	r3, [r1], #2
   86b0a:	f820 3b02 	strh.w	r3, [r0], #2
   86b0e:	e79f      	b.n	86a50 <memcpy+0xc>
   86b10:	3a04      	subs	r2, #4
   86b12:	d3d9      	bcc.n	86ac8 <memcpy+0x84>
   86b14:	3a01      	subs	r2, #1
   86b16:	f811 3b01 	ldrb.w	r3, [r1], #1
   86b1a:	f800 3b01 	strb.w	r3, [r0], #1
   86b1e:	d2f9      	bcs.n	86b14 <memcpy+0xd0>
   86b20:	780b      	ldrb	r3, [r1, #0]
   86b22:	7003      	strb	r3, [r0, #0]
   86b24:	784b      	ldrb	r3, [r1, #1]
   86b26:	7043      	strb	r3, [r0, #1]
   86b28:	788b      	ldrb	r3, [r1, #2]
   86b2a:	7083      	strb	r3, [r0, #2]
   86b2c:	4660      	mov	r0, ip
   86b2e:	4770      	bx	lr

00086b30 <memmove>:
   86b30:	4288      	cmp	r0, r1
   86b32:	b5f0      	push	{r4, r5, r6, r7, lr}
   86b34:	d90d      	bls.n	86b52 <memmove+0x22>
   86b36:	188b      	adds	r3, r1, r2
   86b38:	4298      	cmp	r0, r3
   86b3a:	d20a      	bcs.n	86b52 <memmove+0x22>
   86b3c:	1884      	adds	r4, r0, r2
   86b3e:	2a00      	cmp	r2, #0
   86b40:	d051      	beq.n	86be6 <memmove+0xb6>
   86b42:	4622      	mov	r2, r4
   86b44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   86b48:	4299      	cmp	r1, r3
   86b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   86b4e:	d1f9      	bne.n	86b44 <memmove+0x14>
   86b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86b52:	2a0f      	cmp	r2, #15
   86b54:	d948      	bls.n	86be8 <memmove+0xb8>
   86b56:	ea41 0300 	orr.w	r3, r1, r0
   86b5a:	079b      	lsls	r3, r3, #30
   86b5c:	d146      	bne.n	86bec <memmove+0xbc>
   86b5e:	4615      	mov	r5, r2
   86b60:	f100 0410 	add.w	r4, r0, #16
   86b64:	f101 0310 	add.w	r3, r1, #16
   86b68:	f853 6c10 	ldr.w	r6, [r3, #-16]
   86b6c:	3d10      	subs	r5, #16
   86b6e:	f844 6c10 	str.w	r6, [r4, #-16]
   86b72:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   86b76:	2d0f      	cmp	r5, #15
   86b78:	f844 6c0c 	str.w	r6, [r4, #-12]
   86b7c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   86b80:	f104 0410 	add.w	r4, r4, #16
   86b84:	f844 6c18 	str.w	r6, [r4, #-24]
   86b88:	f853 6c04 	ldr.w	r6, [r3, #-4]
   86b8c:	f103 0310 	add.w	r3, r3, #16
   86b90:	f844 6c14 	str.w	r6, [r4, #-20]
   86b94:	d8e8      	bhi.n	86b68 <memmove+0x38>
   86b96:	f1a2 0310 	sub.w	r3, r2, #16
   86b9a:	f023 030f 	bic.w	r3, r3, #15
   86b9e:	f002 0e0f 	and.w	lr, r2, #15
   86ba2:	3310      	adds	r3, #16
   86ba4:	f1be 0f03 	cmp.w	lr, #3
   86ba8:	4419      	add	r1, r3
   86baa:	4403      	add	r3, r0
   86bac:	d921      	bls.n	86bf2 <memmove+0xc2>
   86bae:	460e      	mov	r6, r1
   86bb0:	4674      	mov	r4, lr
   86bb2:	1f1d      	subs	r5, r3, #4
   86bb4:	f856 7b04 	ldr.w	r7, [r6], #4
   86bb8:	3c04      	subs	r4, #4
   86bba:	2c03      	cmp	r4, #3
   86bbc:	f845 7f04 	str.w	r7, [r5, #4]!
   86bc0:	d8f8      	bhi.n	86bb4 <memmove+0x84>
   86bc2:	f1ae 0404 	sub.w	r4, lr, #4
   86bc6:	f024 0403 	bic.w	r4, r4, #3
   86bca:	3404      	adds	r4, #4
   86bcc:	4421      	add	r1, r4
   86bce:	4423      	add	r3, r4
   86bd0:	f002 0203 	and.w	r2, r2, #3
   86bd4:	b162      	cbz	r2, 86bf0 <memmove+0xc0>
   86bd6:	3b01      	subs	r3, #1
   86bd8:	440a      	add	r2, r1
   86bda:	f811 4b01 	ldrb.w	r4, [r1], #1
   86bde:	428a      	cmp	r2, r1
   86be0:	f803 4f01 	strb.w	r4, [r3, #1]!
   86be4:	d1f9      	bne.n	86bda <memmove+0xaa>
   86be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86be8:	4603      	mov	r3, r0
   86bea:	e7f3      	b.n	86bd4 <memmove+0xa4>
   86bec:	4603      	mov	r3, r0
   86bee:	e7f2      	b.n	86bd6 <memmove+0xa6>
   86bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86bf2:	4672      	mov	r2, lr
   86bf4:	e7ee      	b.n	86bd4 <memmove+0xa4>
   86bf6:	bf00      	nop

00086bf8 <__malloc_lock>:
   86bf8:	4801      	ldr	r0, [pc, #4]	; (86c00 <__malloc_lock+0x8>)
   86bfa:	f7ff bba1 	b.w	86340 <__retarget_lock_acquire_recursive>
   86bfe:	bf00      	nop
   86c00:	20070cdc 	.word	0x20070cdc

00086c04 <__malloc_unlock>:
   86c04:	4801      	ldr	r0, [pc, #4]	; (86c0c <__malloc_unlock+0x8>)
   86c06:	f7ff bb9d 	b.w	86344 <__retarget_lock_release_recursive>
   86c0a:	bf00      	nop
   86c0c:	20070cdc 	.word	0x20070cdc

00086c10 <_Balloc>:
   86c10:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86c12:	b570      	push	{r4, r5, r6, lr}
   86c14:	4605      	mov	r5, r0
   86c16:	460c      	mov	r4, r1
   86c18:	b14b      	cbz	r3, 86c2e <_Balloc+0x1e>
   86c1a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   86c1e:	b180      	cbz	r0, 86c42 <_Balloc+0x32>
   86c20:	6802      	ldr	r2, [r0, #0]
   86c22:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   86c26:	2300      	movs	r3, #0
   86c28:	6103      	str	r3, [r0, #16]
   86c2a:	60c3      	str	r3, [r0, #12]
   86c2c:	bd70      	pop	{r4, r5, r6, pc}
   86c2e:	2221      	movs	r2, #33	; 0x21
   86c30:	2104      	movs	r1, #4
   86c32:	f000 fe21 	bl	87878 <_calloc_r>
   86c36:	64e8      	str	r0, [r5, #76]	; 0x4c
   86c38:	4603      	mov	r3, r0
   86c3a:	2800      	cmp	r0, #0
   86c3c:	d1ed      	bne.n	86c1a <_Balloc+0xa>
   86c3e:	2000      	movs	r0, #0
   86c40:	bd70      	pop	{r4, r5, r6, pc}
   86c42:	2101      	movs	r1, #1
   86c44:	fa01 f604 	lsl.w	r6, r1, r4
   86c48:	1d72      	adds	r2, r6, #5
   86c4a:	4628      	mov	r0, r5
   86c4c:	0092      	lsls	r2, r2, #2
   86c4e:	f000 fe13 	bl	87878 <_calloc_r>
   86c52:	2800      	cmp	r0, #0
   86c54:	d0f3      	beq.n	86c3e <_Balloc+0x2e>
   86c56:	6044      	str	r4, [r0, #4]
   86c58:	6086      	str	r6, [r0, #8]
   86c5a:	e7e4      	b.n	86c26 <_Balloc+0x16>

00086c5c <_Bfree>:
   86c5c:	b131      	cbz	r1, 86c6c <_Bfree+0x10>
   86c5e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86c60:	684a      	ldr	r2, [r1, #4]
   86c62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   86c66:	6008      	str	r0, [r1, #0]
   86c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   86c6c:	4770      	bx	lr
   86c6e:	bf00      	nop

00086c70 <__multadd>:
   86c70:	b5f0      	push	{r4, r5, r6, r7, lr}
   86c72:	460c      	mov	r4, r1
   86c74:	4605      	mov	r5, r0
   86c76:	f04f 0e00 	mov.w	lr, #0
   86c7a:	690e      	ldr	r6, [r1, #16]
   86c7c:	b083      	sub	sp, #12
   86c7e:	f101 0714 	add.w	r7, r1, #20
   86c82:	6838      	ldr	r0, [r7, #0]
   86c84:	f10e 0e01 	add.w	lr, lr, #1
   86c88:	b281      	uxth	r1, r0
   86c8a:	fb02 3301 	mla	r3, r2, r1, r3
   86c8e:	0c01      	lsrs	r1, r0, #16
   86c90:	0c18      	lsrs	r0, r3, #16
   86c92:	fb02 0101 	mla	r1, r2, r1, r0
   86c96:	b29b      	uxth	r3, r3
   86c98:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   86c9c:	4576      	cmp	r6, lr
   86c9e:	f847 3b04 	str.w	r3, [r7], #4
   86ca2:	ea4f 4311 	mov.w	r3, r1, lsr #16
   86ca6:	dcec      	bgt.n	86c82 <__multadd+0x12>
   86ca8:	b13b      	cbz	r3, 86cba <__multadd+0x4a>
   86caa:	68a2      	ldr	r2, [r4, #8]
   86cac:	4296      	cmp	r6, r2
   86cae:	da07      	bge.n	86cc0 <__multadd+0x50>
   86cb0:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   86cb4:	3601      	adds	r6, #1
   86cb6:	6153      	str	r3, [r2, #20]
   86cb8:	6126      	str	r6, [r4, #16]
   86cba:	4620      	mov	r0, r4
   86cbc:	b003      	add	sp, #12
   86cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86cc0:	6861      	ldr	r1, [r4, #4]
   86cc2:	4628      	mov	r0, r5
   86cc4:	3101      	adds	r1, #1
   86cc6:	9301      	str	r3, [sp, #4]
   86cc8:	f7ff ffa2 	bl	86c10 <_Balloc>
   86ccc:	4607      	mov	r7, r0
   86cce:	6922      	ldr	r2, [r4, #16]
   86cd0:	f104 010c 	add.w	r1, r4, #12
   86cd4:	3202      	adds	r2, #2
   86cd6:	0092      	lsls	r2, r2, #2
   86cd8:	300c      	adds	r0, #12
   86cda:	f7ff feb3 	bl	86a44 <memcpy>
   86cde:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   86ce0:	6861      	ldr	r1, [r4, #4]
   86ce2:	9b01      	ldr	r3, [sp, #4]
   86ce4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   86ce8:	6020      	str	r0, [r4, #0]
   86cea:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   86cee:	463c      	mov	r4, r7
   86cf0:	e7de      	b.n	86cb0 <__multadd+0x40>
   86cf2:	bf00      	nop

00086cf4 <__hi0bits>:
   86cf4:	0c02      	lsrs	r2, r0, #16
   86cf6:	0412      	lsls	r2, r2, #16
   86cf8:	4603      	mov	r3, r0
   86cfa:	b9b2      	cbnz	r2, 86d2a <__hi0bits+0x36>
   86cfc:	0403      	lsls	r3, r0, #16
   86cfe:	2010      	movs	r0, #16
   86d00:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   86d04:	bf04      	itt	eq
   86d06:	021b      	lsleq	r3, r3, #8
   86d08:	3008      	addeq	r0, #8
   86d0a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   86d0e:	bf04      	itt	eq
   86d10:	011b      	lsleq	r3, r3, #4
   86d12:	3004      	addeq	r0, #4
   86d14:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   86d18:	bf04      	itt	eq
   86d1a:	009b      	lsleq	r3, r3, #2
   86d1c:	3002      	addeq	r0, #2
   86d1e:	2b00      	cmp	r3, #0
   86d20:	db02      	blt.n	86d28 <__hi0bits+0x34>
   86d22:	005b      	lsls	r3, r3, #1
   86d24:	d403      	bmi.n	86d2e <__hi0bits+0x3a>
   86d26:	2020      	movs	r0, #32
   86d28:	4770      	bx	lr
   86d2a:	2000      	movs	r0, #0
   86d2c:	e7e8      	b.n	86d00 <__hi0bits+0xc>
   86d2e:	3001      	adds	r0, #1
   86d30:	4770      	bx	lr
   86d32:	bf00      	nop

00086d34 <__lo0bits>:
   86d34:	6803      	ldr	r3, [r0, #0]
   86d36:	4601      	mov	r1, r0
   86d38:	f013 0207 	ands.w	r2, r3, #7
   86d3c:	d007      	beq.n	86d4e <__lo0bits+0x1a>
   86d3e:	07da      	lsls	r2, r3, #31
   86d40:	d421      	bmi.n	86d86 <__lo0bits+0x52>
   86d42:	0798      	lsls	r0, r3, #30
   86d44:	d421      	bmi.n	86d8a <__lo0bits+0x56>
   86d46:	089b      	lsrs	r3, r3, #2
   86d48:	600b      	str	r3, [r1, #0]
   86d4a:	2002      	movs	r0, #2
   86d4c:	4770      	bx	lr
   86d4e:	b298      	uxth	r0, r3
   86d50:	b198      	cbz	r0, 86d7a <__lo0bits+0x46>
   86d52:	4610      	mov	r0, r2
   86d54:	f013 0fff 	tst.w	r3, #255	; 0xff
   86d58:	bf04      	itt	eq
   86d5a:	0a1b      	lsreq	r3, r3, #8
   86d5c:	3008      	addeq	r0, #8
   86d5e:	071a      	lsls	r2, r3, #28
   86d60:	bf04      	itt	eq
   86d62:	091b      	lsreq	r3, r3, #4
   86d64:	3004      	addeq	r0, #4
   86d66:	079a      	lsls	r2, r3, #30
   86d68:	bf04      	itt	eq
   86d6a:	089b      	lsreq	r3, r3, #2
   86d6c:	3002      	addeq	r0, #2
   86d6e:	07da      	lsls	r2, r3, #31
   86d70:	d407      	bmi.n	86d82 <__lo0bits+0x4e>
   86d72:	085b      	lsrs	r3, r3, #1
   86d74:	d104      	bne.n	86d80 <__lo0bits+0x4c>
   86d76:	2020      	movs	r0, #32
   86d78:	4770      	bx	lr
   86d7a:	0c1b      	lsrs	r3, r3, #16
   86d7c:	2010      	movs	r0, #16
   86d7e:	e7e9      	b.n	86d54 <__lo0bits+0x20>
   86d80:	3001      	adds	r0, #1
   86d82:	600b      	str	r3, [r1, #0]
   86d84:	4770      	bx	lr
   86d86:	2000      	movs	r0, #0
   86d88:	4770      	bx	lr
   86d8a:	085b      	lsrs	r3, r3, #1
   86d8c:	600b      	str	r3, [r1, #0]
   86d8e:	2001      	movs	r0, #1
   86d90:	4770      	bx	lr
   86d92:	bf00      	nop

00086d94 <__i2b>:
   86d94:	b510      	push	{r4, lr}
   86d96:	460c      	mov	r4, r1
   86d98:	2101      	movs	r1, #1
   86d9a:	f7ff ff39 	bl	86c10 <_Balloc>
   86d9e:	2201      	movs	r2, #1
   86da0:	6144      	str	r4, [r0, #20]
   86da2:	6102      	str	r2, [r0, #16]
   86da4:	bd10      	pop	{r4, pc}
   86da6:	bf00      	nop

00086da8 <__multiply>:
   86da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86dac:	690c      	ldr	r4, [r1, #16]
   86dae:	6915      	ldr	r5, [r2, #16]
   86db0:	b083      	sub	sp, #12
   86db2:	42ac      	cmp	r4, r5
   86db4:	468b      	mov	fp, r1
   86db6:	4616      	mov	r6, r2
   86db8:	da04      	bge.n	86dc4 <__multiply+0x1c>
   86dba:	4622      	mov	r2, r4
   86dbc:	46b3      	mov	fp, r6
   86dbe:	462c      	mov	r4, r5
   86dc0:	460e      	mov	r6, r1
   86dc2:	4615      	mov	r5, r2
   86dc4:	f8db 3008 	ldr.w	r3, [fp, #8]
   86dc8:	eb04 0805 	add.w	r8, r4, r5
   86dcc:	f8db 1004 	ldr.w	r1, [fp, #4]
   86dd0:	4598      	cmp	r8, r3
   86dd2:	bfc8      	it	gt
   86dd4:	3101      	addgt	r1, #1
   86dd6:	f7ff ff1b 	bl	86c10 <_Balloc>
   86dda:	f100 0914 	add.w	r9, r0, #20
   86dde:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   86de2:	45d1      	cmp	r9, sl
   86de4:	9000      	str	r0, [sp, #0]
   86de6:	d205      	bcs.n	86df4 <__multiply+0x4c>
   86de8:	464b      	mov	r3, r9
   86dea:	2100      	movs	r1, #0
   86dec:	f843 1b04 	str.w	r1, [r3], #4
   86df0:	459a      	cmp	sl, r3
   86df2:	d8fb      	bhi.n	86dec <__multiply+0x44>
   86df4:	f106 0c14 	add.w	ip, r6, #20
   86df8:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   86dfc:	f10b 0b14 	add.w	fp, fp, #20
   86e00:	459c      	cmp	ip, r3
   86e02:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   86e06:	d24b      	bcs.n	86ea0 <__multiply+0xf8>
   86e08:	f8cd a004 	str.w	sl, [sp, #4]
   86e0c:	469a      	mov	sl, r3
   86e0e:	f8dc 5000 	ldr.w	r5, [ip]
   86e12:	b2af      	uxth	r7, r5
   86e14:	b1e7      	cbz	r7, 86e50 <__multiply+0xa8>
   86e16:	464d      	mov	r5, r9
   86e18:	465e      	mov	r6, fp
   86e1a:	2100      	movs	r1, #0
   86e1c:	f856 2b04 	ldr.w	r2, [r6], #4
   86e20:	6828      	ldr	r0, [r5, #0]
   86e22:	b293      	uxth	r3, r2
   86e24:	b284      	uxth	r4, r0
   86e26:	0c12      	lsrs	r2, r2, #16
   86e28:	fb07 4303 	mla	r3, r7, r3, r4
   86e2c:	0c00      	lsrs	r0, r0, #16
   86e2e:	fb07 0202 	mla	r2, r7, r2, r0
   86e32:	440b      	add	r3, r1
   86e34:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   86e38:	b29b      	uxth	r3, r3
   86e3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   86e3e:	45b6      	cmp	lr, r6
   86e40:	f845 3b04 	str.w	r3, [r5], #4
   86e44:	ea4f 4111 	mov.w	r1, r1, lsr #16
   86e48:	d8e8      	bhi.n	86e1c <__multiply+0x74>
   86e4a:	6029      	str	r1, [r5, #0]
   86e4c:	f8dc 5000 	ldr.w	r5, [ip]
   86e50:	0c2d      	lsrs	r5, r5, #16
   86e52:	d01d      	beq.n	86e90 <__multiply+0xe8>
   86e54:	f8d9 3000 	ldr.w	r3, [r9]
   86e58:	4648      	mov	r0, r9
   86e5a:	461c      	mov	r4, r3
   86e5c:	4659      	mov	r1, fp
   86e5e:	2200      	movs	r2, #0
   86e60:	880e      	ldrh	r6, [r1, #0]
   86e62:	0c24      	lsrs	r4, r4, #16
   86e64:	fb05 4406 	mla	r4, r5, r6, r4
   86e68:	b29b      	uxth	r3, r3
   86e6a:	4422      	add	r2, r4
   86e6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   86e70:	f840 3b04 	str.w	r3, [r0], #4
   86e74:	f851 3b04 	ldr.w	r3, [r1], #4
   86e78:	6804      	ldr	r4, [r0, #0]
   86e7a:	0c1b      	lsrs	r3, r3, #16
   86e7c:	b2a6      	uxth	r6, r4
   86e7e:	fb05 6303 	mla	r3, r5, r3, r6
   86e82:	458e      	cmp	lr, r1
   86e84:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   86e88:	ea4f 4213 	mov.w	r2, r3, lsr #16
   86e8c:	d8e8      	bhi.n	86e60 <__multiply+0xb8>
   86e8e:	6003      	str	r3, [r0, #0]
   86e90:	f10c 0c04 	add.w	ip, ip, #4
   86e94:	45e2      	cmp	sl, ip
   86e96:	f109 0904 	add.w	r9, r9, #4
   86e9a:	d8b8      	bhi.n	86e0e <__multiply+0x66>
   86e9c:	f8dd a004 	ldr.w	sl, [sp, #4]
   86ea0:	f1b8 0f00 	cmp.w	r8, #0
   86ea4:	dd0b      	ble.n	86ebe <__multiply+0x116>
   86ea6:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   86eaa:	f1aa 0a04 	sub.w	sl, sl, #4
   86eae:	b11b      	cbz	r3, 86eb8 <__multiply+0x110>
   86eb0:	e005      	b.n	86ebe <__multiply+0x116>
   86eb2:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   86eb6:	b913      	cbnz	r3, 86ebe <__multiply+0x116>
   86eb8:	f1b8 0801 	subs.w	r8, r8, #1
   86ebc:	d1f9      	bne.n	86eb2 <__multiply+0x10a>
   86ebe:	9800      	ldr	r0, [sp, #0]
   86ec0:	f8c0 8010 	str.w	r8, [r0, #16]
   86ec4:	b003      	add	sp, #12
   86ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86eca:	bf00      	nop

00086ecc <__pow5mult>:
   86ecc:	f012 0303 	ands.w	r3, r2, #3
   86ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86ed4:	4614      	mov	r4, r2
   86ed6:	4607      	mov	r7, r0
   86ed8:	d12e      	bne.n	86f38 <__pow5mult+0x6c>
   86eda:	460d      	mov	r5, r1
   86edc:	10a4      	asrs	r4, r4, #2
   86ede:	d01c      	beq.n	86f1a <__pow5mult+0x4e>
   86ee0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   86ee2:	b396      	cbz	r6, 86f4a <__pow5mult+0x7e>
   86ee4:	07e3      	lsls	r3, r4, #31
   86ee6:	f04f 0800 	mov.w	r8, #0
   86eea:	d406      	bmi.n	86efa <__pow5mult+0x2e>
   86eec:	1064      	asrs	r4, r4, #1
   86eee:	d014      	beq.n	86f1a <__pow5mult+0x4e>
   86ef0:	6830      	ldr	r0, [r6, #0]
   86ef2:	b1a8      	cbz	r0, 86f20 <__pow5mult+0x54>
   86ef4:	4606      	mov	r6, r0
   86ef6:	07e3      	lsls	r3, r4, #31
   86ef8:	d5f8      	bpl.n	86eec <__pow5mult+0x20>
   86efa:	4632      	mov	r2, r6
   86efc:	4629      	mov	r1, r5
   86efe:	4638      	mov	r0, r7
   86f00:	f7ff ff52 	bl	86da8 <__multiply>
   86f04:	b1b5      	cbz	r5, 86f34 <__pow5mult+0x68>
   86f06:	686a      	ldr	r2, [r5, #4]
   86f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   86f0a:	1064      	asrs	r4, r4, #1
   86f0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   86f10:	6029      	str	r1, [r5, #0]
   86f12:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   86f16:	4605      	mov	r5, r0
   86f18:	d1ea      	bne.n	86ef0 <__pow5mult+0x24>
   86f1a:	4628      	mov	r0, r5
   86f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86f20:	4632      	mov	r2, r6
   86f22:	4631      	mov	r1, r6
   86f24:	4638      	mov	r0, r7
   86f26:	f7ff ff3f 	bl	86da8 <__multiply>
   86f2a:	6030      	str	r0, [r6, #0]
   86f2c:	f8c0 8000 	str.w	r8, [r0]
   86f30:	4606      	mov	r6, r0
   86f32:	e7e0      	b.n	86ef6 <__pow5mult+0x2a>
   86f34:	4605      	mov	r5, r0
   86f36:	e7d9      	b.n	86eec <__pow5mult+0x20>
   86f38:	4a0b      	ldr	r2, [pc, #44]	; (86f68 <__pow5mult+0x9c>)
   86f3a:	3b01      	subs	r3, #1
   86f3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   86f40:	2300      	movs	r3, #0
   86f42:	f7ff fe95 	bl	86c70 <__multadd>
   86f46:	4605      	mov	r5, r0
   86f48:	e7c8      	b.n	86edc <__pow5mult+0x10>
   86f4a:	2101      	movs	r1, #1
   86f4c:	4638      	mov	r0, r7
   86f4e:	f7ff fe5f 	bl	86c10 <_Balloc>
   86f52:	f240 2171 	movw	r1, #625	; 0x271
   86f56:	2201      	movs	r2, #1
   86f58:	2300      	movs	r3, #0
   86f5a:	6141      	str	r1, [r0, #20]
   86f5c:	6102      	str	r2, [r0, #16]
   86f5e:	4606      	mov	r6, r0
   86f60:	64b8      	str	r0, [r7, #72]	; 0x48
   86f62:	6003      	str	r3, [r0, #0]
   86f64:	e7be      	b.n	86ee4 <__pow5mult+0x18>
   86f66:	bf00      	nop
   86f68:	00088bd8 	.word	0x00088bd8

00086f6c <__lshift>:
   86f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   86f70:	690b      	ldr	r3, [r1, #16]
   86f72:	1154      	asrs	r4, r2, #5
   86f74:	eb04 0803 	add.w	r8, r4, r3
   86f78:	688b      	ldr	r3, [r1, #8]
   86f7a:	f108 0501 	add.w	r5, r8, #1
   86f7e:	429d      	cmp	r5, r3
   86f80:	460e      	mov	r6, r1
   86f82:	4691      	mov	r9, r2
   86f84:	4607      	mov	r7, r0
   86f86:	6849      	ldr	r1, [r1, #4]
   86f88:	dd04      	ble.n	86f94 <__lshift+0x28>
   86f8a:	005b      	lsls	r3, r3, #1
   86f8c:	429d      	cmp	r5, r3
   86f8e:	f101 0101 	add.w	r1, r1, #1
   86f92:	dcfa      	bgt.n	86f8a <__lshift+0x1e>
   86f94:	4638      	mov	r0, r7
   86f96:	f7ff fe3b 	bl	86c10 <_Balloc>
   86f9a:	2c00      	cmp	r4, #0
   86f9c:	f100 0314 	add.w	r3, r0, #20
   86fa0:	dd06      	ble.n	86fb0 <__lshift+0x44>
   86fa2:	2100      	movs	r1, #0
   86fa4:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   86fa8:	f843 1b04 	str.w	r1, [r3], #4
   86fac:	429a      	cmp	r2, r3
   86fae:	d1fb      	bne.n	86fa8 <__lshift+0x3c>
   86fb0:	6934      	ldr	r4, [r6, #16]
   86fb2:	f106 0114 	add.w	r1, r6, #20
   86fb6:	f019 091f 	ands.w	r9, r9, #31
   86fba:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   86fbe:	d01d      	beq.n	86ffc <__lshift+0x90>
   86fc0:	2200      	movs	r2, #0
   86fc2:	f1c9 0c20 	rsb	ip, r9, #32
   86fc6:	680c      	ldr	r4, [r1, #0]
   86fc8:	fa04 f409 	lsl.w	r4, r4, r9
   86fcc:	4314      	orrs	r4, r2
   86fce:	f843 4b04 	str.w	r4, [r3], #4
   86fd2:	f851 2b04 	ldr.w	r2, [r1], #4
   86fd6:	458e      	cmp	lr, r1
   86fd8:	fa22 f20c 	lsr.w	r2, r2, ip
   86fdc:	d8f3      	bhi.n	86fc6 <__lshift+0x5a>
   86fde:	601a      	str	r2, [r3, #0]
   86fe0:	b10a      	cbz	r2, 86fe6 <__lshift+0x7a>
   86fe2:	f108 0502 	add.w	r5, r8, #2
   86fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   86fe8:	6872      	ldr	r2, [r6, #4]
   86fea:	3d01      	subs	r5, #1
   86fec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   86ff0:	6105      	str	r5, [r0, #16]
   86ff2:	6031      	str	r1, [r6, #0]
   86ff4:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   86ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   86ffc:	3b04      	subs	r3, #4
   86ffe:	f851 2b04 	ldr.w	r2, [r1], #4
   87002:	458e      	cmp	lr, r1
   87004:	f843 2f04 	str.w	r2, [r3, #4]!
   87008:	d8f9      	bhi.n	86ffe <__lshift+0x92>
   8700a:	e7ec      	b.n	86fe6 <__lshift+0x7a>

0008700c <__mcmp>:
   8700c:	b430      	push	{r4, r5}
   8700e:	690b      	ldr	r3, [r1, #16]
   87010:	4605      	mov	r5, r0
   87012:	6900      	ldr	r0, [r0, #16]
   87014:	1ac0      	subs	r0, r0, r3
   87016:	d10f      	bne.n	87038 <__mcmp+0x2c>
   87018:	009b      	lsls	r3, r3, #2
   8701a:	3514      	adds	r5, #20
   8701c:	3114      	adds	r1, #20
   8701e:	4419      	add	r1, r3
   87020:	442b      	add	r3, r5
   87022:	e001      	b.n	87028 <__mcmp+0x1c>
   87024:	429d      	cmp	r5, r3
   87026:	d207      	bcs.n	87038 <__mcmp+0x2c>
   87028:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8702c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   87030:	4294      	cmp	r4, r2
   87032:	d0f7      	beq.n	87024 <__mcmp+0x18>
   87034:	d302      	bcc.n	8703c <__mcmp+0x30>
   87036:	2001      	movs	r0, #1
   87038:	bc30      	pop	{r4, r5}
   8703a:	4770      	bx	lr
   8703c:	f04f 30ff 	mov.w	r0, #4294967295
   87040:	e7fa      	b.n	87038 <__mcmp+0x2c>
   87042:	bf00      	nop

00087044 <__mdiff>:
   87044:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87048:	690c      	ldr	r4, [r1, #16]
   8704a:	4689      	mov	r9, r1
   8704c:	6911      	ldr	r1, [r2, #16]
   8704e:	4692      	mov	sl, r2
   87050:	1a64      	subs	r4, r4, r1
   87052:	2c00      	cmp	r4, #0
   87054:	d117      	bne.n	87086 <__mdiff+0x42>
   87056:	0089      	lsls	r1, r1, #2
   87058:	f109 0714 	add.w	r7, r9, #20
   8705c:	f102 0614 	add.w	r6, r2, #20
   87060:	187b      	adds	r3, r7, r1
   87062:	4431      	add	r1, r6
   87064:	e001      	b.n	8706a <__mdiff+0x26>
   87066:	429f      	cmp	r7, r3
   87068:	d265      	bcs.n	87136 <__mdiff+0xf2>
   8706a:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8706e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   87072:	4295      	cmp	r5, r2
   87074:	d0f7      	beq.n	87066 <__mdiff+0x22>
   87076:	d267      	bcs.n	87148 <__mdiff+0x104>
   87078:	464b      	mov	r3, r9
   8707a:	46bb      	mov	fp, r7
   8707c:	46d1      	mov	r9, sl
   8707e:	4637      	mov	r7, r6
   87080:	469a      	mov	sl, r3
   87082:	2401      	movs	r4, #1
   87084:	e005      	b.n	87092 <__mdiff+0x4e>
   87086:	db61      	blt.n	8714c <__mdiff+0x108>
   87088:	2400      	movs	r4, #0
   8708a:	f109 0714 	add.w	r7, r9, #20
   8708e:	f10a 0b14 	add.w	fp, sl, #20
   87092:	f8d9 1004 	ldr.w	r1, [r9, #4]
   87096:	f7ff fdbb 	bl	86c10 <_Balloc>
   8709a:	465d      	mov	r5, fp
   8709c:	f04f 0800 	mov.w	r8, #0
   870a0:	f8d9 e010 	ldr.w	lr, [r9, #16]
   870a4:	f8da 3010 	ldr.w	r3, [sl, #16]
   870a8:	463e      	mov	r6, r7
   870aa:	60c4      	str	r4, [r0, #12]
   870ac:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   870b0:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   870b4:	f100 0414 	add.w	r4, r0, #20
   870b8:	f856 9b04 	ldr.w	r9, [r6], #4
   870bc:	f855 2b04 	ldr.w	r2, [r5], #4
   870c0:	fa1f f389 	uxth.w	r3, r9
   870c4:	4443      	add	r3, r8
   870c6:	fa1f f882 	uxth.w	r8, r2
   870ca:	0c12      	lsrs	r2, r2, #16
   870cc:	eba3 0308 	sub.w	r3, r3, r8
   870d0:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   870d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
   870d8:	b29b      	uxth	r3, r3
   870da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   870de:	45ac      	cmp	ip, r5
   870e0:	f844 3b04 	str.w	r3, [r4], #4
   870e4:	ea4f 4822 	mov.w	r8, r2, asr #16
   870e8:	d8e6      	bhi.n	870b8 <__mdiff+0x74>
   870ea:	42b7      	cmp	r7, r6
   870ec:	d917      	bls.n	8711e <__mdiff+0xda>
   870ee:	46a4      	mov	ip, r4
   870f0:	4635      	mov	r5, r6
   870f2:	f855 3b04 	ldr.w	r3, [r5], #4
   870f6:	b299      	uxth	r1, r3
   870f8:	4441      	add	r1, r8
   870fa:	140a      	asrs	r2, r1, #16
   870fc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   87100:	b289      	uxth	r1, r1
   87102:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   87106:	42af      	cmp	r7, r5
   87108:	f84c 3b04 	str.w	r3, [ip], #4
   8710c:	ea4f 4822 	mov.w	r8, r2, asr #16
   87110:	d8ef      	bhi.n	870f2 <__mdiff+0xae>
   87112:	43f6      	mvns	r6, r6
   87114:	4437      	add	r7, r6
   87116:	f027 0703 	bic.w	r7, r7, #3
   8711a:	3704      	adds	r7, #4
   8711c:	443c      	add	r4, r7
   8711e:	3c04      	subs	r4, #4
   87120:	b92b      	cbnz	r3, 8712e <__mdiff+0xea>
   87122:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   87126:	f10e 3eff 	add.w	lr, lr, #4294967295
   8712a:	2b00      	cmp	r3, #0
   8712c:	d0f9      	beq.n	87122 <__mdiff+0xde>
   8712e:	f8c0 e010 	str.w	lr, [r0, #16]
   87132:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87136:	2100      	movs	r1, #0
   87138:	f7ff fd6a 	bl	86c10 <_Balloc>
   8713c:	2201      	movs	r2, #1
   8713e:	2300      	movs	r3, #0
   87140:	6102      	str	r2, [r0, #16]
   87142:	6143      	str	r3, [r0, #20]
   87144:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87148:	46b3      	mov	fp, r6
   8714a:	e7a2      	b.n	87092 <__mdiff+0x4e>
   8714c:	464b      	mov	r3, r9
   8714e:	f109 0b14 	add.w	fp, r9, #20
   87152:	f102 0714 	add.w	r7, r2, #20
   87156:	4691      	mov	r9, r2
   87158:	2401      	movs	r4, #1
   8715a:	469a      	mov	sl, r3
   8715c:	e799      	b.n	87092 <__mdiff+0x4e>
   8715e:	bf00      	nop

00087160 <__d2b>:
   87160:	b5f0      	push	{r4, r5, r6, r7, lr}
   87162:	2101      	movs	r1, #1
   87164:	b083      	sub	sp, #12
   87166:	461c      	mov	r4, r3
   87168:	f3c3 550a 	ubfx	r5, r3, #20, #11
   8716c:	4616      	mov	r6, r2
   8716e:	f7ff fd4f 	bl	86c10 <_Balloc>
   87172:	f3c4 0413 	ubfx	r4, r4, #0, #20
   87176:	4607      	mov	r7, r0
   87178:	b10d      	cbz	r5, 8717e <__d2b+0x1e>
   8717a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8717e:	9401      	str	r4, [sp, #4]
   87180:	b306      	cbz	r6, 871c4 <__d2b+0x64>
   87182:	a802      	add	r0, sp, #8
   87184:	f840 6d08 	str.w	r6, [r0, #-8]!
   87188:	f7ff fdd4 	bl	86d34 <__lo0bits>
   8718c:	2800      	cmp	r0, #0
   8718e:	d130      	bne.n	871f2 <__d2b+0x92>
   87190:	e89d 000c 	ldmia.w	sp, {r2, r3}
   87194:	617a      	str	r2, [r7, #20]
   87196:	2b00      	cmp	r3, #0
   87198:	bf0c      	ite	eq
   8719a:	2101      	moveq	r1, #1
   8719c:	2102      	movne	r1, #2
   8719e:	61bb      	str	r3, [r7, #24]
   871a0:	6139      	str	r1, [r7, #16]
   871a2:	b9d5      	cbnz	r5, 871da <__d2b+0x7a>
   871a4:	9a08      	ldr	r2, [sp, #32]
   871a6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   871aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   871ae:	6010      	str	r0, [r2, #0]
   871b0:	6918      	ldr	r0, [r3, #16]
   871b2:	f7ff fd9f 	bl	86cf4 <__hi0bits>
   871b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   871b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   871bc:	6018      	str	r0, [r3, #0]
   871be:	4638      	mov	r0, r7
   871c0:	b003      	add	sp, #12
   871c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   871c4:	a801      	add	r0, sp, #4
   871c6:	f7ff fdb5 	bl	86d34 <__lo0bits>
   871ca:	2201      	movs	r2, #1
   871cc:	9b01      	ldr	r3, [sp, #4]
   871ce:	4611      	mov	r1, r2
   871d0:	3020      	adds	r0, #32
   871d2:	613a      	str	r2, [r7, #16]
   871d4:	617b      	str	r3, [r7, #20]
   871d6:	2d00      	cmp	r5, #0
   871d8:	d0e4      	beq.n	871a4 <__d2b+0x44>
   871da:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   871de:	9a08      	ldr	r2, [sp, #32]
   871e0:	4403      	add	r3, r0
   871e2:	6013      	str	r3, [r2, #0]
   871e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   871e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   871ea:	6018      	str	r0, [r3, #0]
   871ec:	4638      	mov	r0, r7
   871ee:	b003      	add	sp, #12
   871f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   871f2:	9b01      	ldr	r3, [sp, #4]
   871f4:	f1c0 0220 	rsb	r2, r0, #32
   871f8:	9900      	ldr	r1, [sp, #0]
   871fa:	fa03 f202 	lsl.w	r2, r3, r2
   871fe:	430a      	orrs	r2, r1
   87200:	40c3      	lsrs	r3, r0
   87202:	9301      	str	r3, [sp, #4]
   87204:	617a      	str	r2, [r7, #20]
   87206:	e7c6      	b.n	87196 <__d2b+0x36>

00087208 <_realloc_r>:
   87208:	2900      	cmp	r1, #0
   8720a:	f000 8094 	beq.w	87336 <_realloc_r+0x12e>
   8720e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87212:	460c      	mov	r4, r1
   87214:	4615      	mov	r5, r2
   87216:	b083      	sub	sp, #12
   87218:	4680      	mov	r8, r0
   8721a:	f105 060b 	add.w	r6, r5, #11
   8721e:	f7ff fceb 	bl	86bf8 <__malloc_lock>
   87222:	f854 ec04 	ldr.w	lr, [r4, #-4]
   87226:	2e16      	cmp	r6, #22
   87228:	f02e 0703 	bic.w	r7, lr, #3
   8722c:	f1a4 0908 	sub.w	r9, r4, #8
   87230:	d83c      	bhi.n	872ac <_realloc_r+0xa4>
   87232:	2210      	movs	r2, #16
   87234:	4616      	mov	r6, r2
   87236:	42b5      	cmp	r5, r6
   87238:	d83d      	bhi.n	872b6 <_realloc_r+0xae>
   8723a:	4297      	cmp	r7, r2
   8723c:	da43      	bge.n	872c6 <_realloc_r+0xbe>
   8723e:	4bc6      	ldr	r3, [pc, #792]	; (87558 <_realloc_r+0x350>)
   87240:	eb09 0007 	add.w	r0, r9, r7
   87244:	6899      	ldr	r1, [r3, #8]
   87246:	4288      	cmp	r0, r1
   87248:	f000 80c3 	beq.w	873d2 <_realloc_r+0x1ca>
   8724c:	6843      	ldr	r3, [r0, #4]
   8724e:	f023 0101 	bic.w	r1, r3, #1
   87252:	4401      	add	r1, r0
   87254:	6849      	ldr	r1, [r1, #4]
   87256:	07c9      	lsls	r1, r1, #31
   87258:	d54d      	bpl.n	872f6 <_realloc_r+0xee>
   8725a:	f01e 0f01 	tst.w	lr, #1
   8725e:	f000 809b 	beq.w	87398 <_realloc_r+0x190>
   87262:	4629      	mov	r1, r5
   87264:	4640      	mov	r0, r8
   87266:	f7ff f8ef 	bl	86448 <_malloc_r>
   8726a:	4605      	mov	r5, r0
   8726c:	2800      	cmp	r0, #0
   8726e:	d03b      	beq.n	872e8 <_realloc_r+0xe0>
   87270:	f854 3c04 	ldr.w	r3, [r4, #-4]
   87274:	f1a0 0208 	sub.w	r2, r0, #8
   87278:	f023 0301 	bic.w	r3, r3, #1
   8727c:	444b      	add	r3, r9
   8727e:	429a      	cmp	r2, r3
   87280:	f000 812b 	beq.w	874da <_realloc_r+0x2d2>
   87284:	1f3a      	subs	r2, r7, #4
   87286:	2a24      	cmp	r2, #36	; 0x24
   87288:	f200 8118 	bhi.w	874bc <_realloc_r+0x2b4>
   8728c:	2a13      	cmp	r2, #19
   8728e:	f200 80eb 	bhi.w	87468 <_realloc_r+0x260>
   87292:	4603      	mov	r3, r0
   87294:	4622      	mov	r2, r4
   87296:	6811      	ldr	r1, [r2, #0]
   87298:	6019      	str	r1, [r3, #0]
   8729a:	6851      	ldr	r1, [r2, #4]
   8729c:	6059      	str	r1, [r3, #4]
   8729e:	6892      	ldr	r2, [r2, #8]
   872a0:	609a      	str	r2, [r3, #8]
   872a2:	4621      	mov	r1, r4
   872a4:	4640      	mov	r0, r8
   872a6:	f7fe fda3 	bl	85df0 <_free_r>
   872aa:	e01d      	b.n	872e8 <_realloc_r+0xe0>
   872ac:	f026 0607 	bic.w	r6, r6, #7
   872b0:	2e00      	cmp	r6, #0
   872b2:	4632      	mov	r2, r6
   872b4:	dabf      	bge.n	87236 <_realloc_r+0x2e>
   872b6:	2500      	movs	r5, #0
   872b8:	230c      	movs	r3, #12
   872ba:	4628      	mov	r0, r5
   872bc:	f8c8 3000 	str.w	r3, [r8]
   872c0:	b003      	add	sp, #12
   872c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   872c6:	4625      	mov	r5, r4
   872c8:	1bbb      	subs	r3, r7, r6
   872ca:	2b0f      	cmp	r3, #15
   872cc:	f8d9 2004 	ldr.w	r2, [r9, #4]
   872d0:	d81d      	bhi.n	8730e <_realloc_r+0x106>
   872d2:	f002 0201 	and.w	r2, r2, #1
   872d6:	433a      	orrs	r2, r7
   872d8:	eb09 0107 	add.w	r1, r9, r7
   872dc:	f8c9 2004 	str.w	r2, [r9, #4]
   872e0:	684b      	ldr	r3, [r1, #4]
   872e2:	f043 0301 	orr.w	r3, r3, #1
   872e6:	604b      	str	r3, [r1, #4]
   872e8:	4640      	mov	r0, r8
   872ea:	f7ff fc8b 	bl	86c04 <__malloc_unlock>
   872ee:	4628      	mov	r0, r5
   872f0:	b003      	add	sp, #12
   872f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   872f6:	f023 0303 	bic.w	r3, r3, #3
   872fa:	18f9      	adds	r1, r7, r3
   872fc:	4291      	cmp	r1, r2
   872fe:	db1d      	blt.n	8733c <_realloc_r+0x134>
   87300:	68c3      	ldr	r3, [r0, #12]
   87302:	6882      	ldr	r2, [r0, #8]
   87304:	4625      	mov	r5, r4
   87306:	60d3      	str	r3, [r2, #12]
   87308:	460f      	mov	r7, r1
   8730a:	609a      	str	r2, [r3, #8]
   8730c:	e7dc      	b.n	872c8 <_realloc_r+0xc0>
   8730e:	f002 0201 	and.w	r2, r2, #1
   87312:	eb09 0106 	add.w	r1, r9, r6
   87316:	f043 0301 	orr.w	r3, r3, #1
   8731a:	4332      	orrs	r2, r6
   8731c:	f8c9 2004 	str.w	r2, [r9, #4]
   87320:	444f      	add	r7, r9
   87322:	604b      	str	r3, [r1, #4]
   87324:	687b      	ldr	r3, [r7, #4]
   87326:	3108      	adds	r1, #8
   87328:	f043 0301 	orr.w	r3, r3, #1
   8732c:	607b      	str	r3, [r7, #4]
   8732e:	4640      	mov	r0, r8
   87330:	f7fe fd5e 	bl	85df0 <_free_r>
   87334:	e7d8      	b.n	872e8 <_realloc_r+0xe0>
   87336:	4611      	mov	r1, r2
   87338:	f7ff b886 	b.w	86448 <_malloc_r>
   8733c:	f01e 0f01 	tst.w	lr, #1
   87340:	d18f      	bne.n	87262 <_realloc_r+0x5a>
   87342:	f854 1c08 	ldr.w	r1, [r4, #-8]
   87346:	eba9 0a01 	sub.w	sl, r9, r1
   8734a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8734e:	f021 0103 	bic.w	r1, r1, #3
   87352:	440b      	add	r3, r1
   87354:	443b      	add	r3, r7
   87356:	4293      	cmp	r3, r2
   87358:	db26      	blt.n	873a8 <_realloc_r+0x1a0>
   8735a:	4655      	mov	r5, sl
   8735c:	68c1      	ldr	r1, [r0, #12]
   8735e:	6880      	ldr	r0, [r0, #8]
   87360:	1f3a      	subs	r2, r7, #4
   87362:	60c1      	str	r1, [r0, #12]
   87364:	6088      	str	r0, [r1, #8]
   87366:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8736a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8736e:	2a24      	cmp	r2, #36	; 0x24
   87370:	60c1      	str	r1, [r0, #12]
   87372:	6088      	str	r0, [r1, #8]
   87374:	d826      	bhi.n	873c4 <_realloc_r+0x1bc>
   87376:	2a13      	cmp	r2, #19
   87378:	f240 8081 	bls.w	8747e <_realloc_r+0x276>
   8737c:	6821      	ldr	r1, [r4, #0]
   8737e:	2a1b      	cmp	r2, #27
   87380:	f8ca 1008 	str.w	r1, [sl, #8]
   87384:	6861      	ldr	r1, [r4, #4]
   87386:	f8ca 100c 	str.w	r1, [sl, #12]
   8738a:	f200 80ad 	bhi.w	874e8 <_realloc_r+0x2e0>
   8738e:	f104 0008 	add.w	r0, r4, #8
   87392:	f10a 0210 	add.w	r2, sl, #16
   87396:	e074      	b.n	87482 <_realloc_r+0x27a>
   87398:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8739c:	eba9 0a03 	sub.w	sl, r9, r3
   873a0:	f8da 1004 	ldr.w	r1, [sl, #4]
   873a4:	f021 0103 	bic.w	r1, r1, #3
   873a8:	187b      	adds	r3, r7, r1
   873aa:	4293      	cmp	r3, r2
   873ac:	f6ff af59 	blt.w	87262 <_realloc_r+0x5a>
   873b0:	4655      	mov	r5, sl
   873b2:	f8da 100c 	ldr.w	r1, [sl, #12]
   873b6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   873ba:	1f3a      	subs	r2, r7, #4
   873bc:	2a24      	cmp	r2, #36	; 0x24
   873be:	60c1      	str	r1, [r0, #12]
   873c0:	6088      	str	r0, [r1, #8]
   873c2:	d9d8      	bls.n	87376 <_realloc_r+0x16e>
   873c4:	4621      	mov	r1, r4
   873c6:	4628      	mov	r0, r5
   873c8:	461f      	mov	r7, r3
   873ca:	46d1      	mov	r9, sl
   873cc:	f7ff fbb0 	bl	86b30 <memmove>
   873d0:	e77a      	b.n	872c8 <_realloc_r+0xc0>
   873d2:	6841      	ldr	r1, [r0, #4]
   873d4:	f106 0010 	add.w	r0, r6, #16
   873d8:	f021 0b03 	bic.w	fp, r1, #3
   873dc:	44bb      	add	fp, r7
   873de:	4583      	cmp	fp, r0
   873e0:	da58      	bge.n	87494 <_realloc_r+0x28c>
   873e2:	f01e 0f01 	tst.w	lr, #1
   873e6:	f47f af3c 	bne.w	87262 <_realloc_r+0x5a>
   873ea:	f854 1c08 	ldr.w	r1, [r4, #-8]
   873ee:	eba9 0a01 	sub.w	sl, r9, r1
   873f2:	f8da 1004 	ldr.w	r1, [sl, #4]
   873f6:	f021 0103 	bic.w	r1, r1, #3
   873fa:	448b      	add	fp, r1
   873fc:	4558      	cmp	r0, fp
   873fe:	dcd3      	bgt.n	873a8 <_realloc_r+0x1a0>
   87400:	4655      	mov	r5, sl
   87402:	f8da 100c 	ldr.w	r1, [sl, #12]
   87406:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8740a:	1f3a      	subs	r2, r7, #4
   8740c:	2a24      	cmp	r2, #36	; 0x24
   8740e:	60c1      	str	r1, [r0, #12]
   87410:	6088      	str	r0, [r1, #8]
   87412:	f200 808d 	bhi.w	87530 <_realloc_r+0x328>
   87416:	2a13      	cmp	r2, #19
   87418:	f240 8087 	bls.w	8752a <_realloc_r+0x322>
   8741c:	6821      	ldr	r1, [r4, #0]
   8741e:	2a1b      	cmp	r2, #27
   87420:	f8ca 1008 	str.w	r1, [sl, #8]
   87424:	6861      	ldr	r1, [r4, #4]
   87426:	f8ca 100c 	str.w	r1, [sl, #12]
   8742a:	f200 8088 	bhi.w	8753e <_realloc_r+0x336>
   8742e:	f104 0108 	add.w	r1, r4, #8
   87432:	f10a 0210 	add.w	r2, sl, #16
   87436:	6808      	ldr	r0, [r1, #0]
   87438:	6010      	str	r0, [r2, #0]
   8743a:	6848      	ldr	r0, [r1, #4]
   8743c:	6050      	str	r0, [r2, #4]
   8743e:	6889      	ldr	r1, [r1, #8]
   87440:	6091      	str	r1, [r2, #8]
   87442:	ebab 0206 	sub.w	r2, fp, r6
   87446:	eb0a 0106 	add.w	r1, sl, r6
   8744a:	f042 0201 	orr.w	r2, r2, #1
   8744e:	6099      	str	r1, [r3, #8]
   87450:	604a      	str	r2, [r1, #4]
   87452:	f8da 3004 	ldr.w	r3, [sl, #4]
   87456:	4640      	mov	r0, r8
   87458:	f003 0301 	and.w	r3, r3, #1
   8745c:	431e      	orrs	r6, r3
   8745e:	f8ca 6004 	str.w	r6, [sl, #4]
   87462:	f7ff fbcf 	bl	86c04 <__malloc_unlock>
   87466:	e742      	b.n	872ee <_realloc_r+0xe6>
   87468:	6823      	ldr	r3, [r4, #0]
   8746a:	2a1b      	cmp	r2, #27
   8746c:	6003      	str	r3, [r0, #0]
   8746e:	6863      	ldr	r3, [r4, #4]
   87470:	6043      	str	r3, [r0, #4]
   87472:	d827      	bhi.n	874c4 <_realloc_r+0x2bc>
   87474:	f100 0308 	add.w	r3, r0, #8
   87478:	f104 0208 	add.w	r2, r4, #8
   8747c:	e70b      	b.n	87296 <_realloc_r+0x8e>
   8747e:	4620      	mov	r0, r4
   87480:	462a      	mov	r2, r5
   87482:	6801      	ldr	r1, [r0, #0]
   87484:	461f      	mov	r7, r3
   87486:	6011      	str	r1, [r2, #0]
   87488:	6841      	ldr	r1, [r0, #4]
   8748a:	46d1      	mov	r9, sl
   8748c:	6051      	str	r1, [r2, #4]
   8748e:	6883      	ldr	r3, [r0, #8]
   87490:	6093      	str	r3, [r2, #8]
   87492:	e719      	b.n	872c8 <_realloc_r+0xc0>
   87494:	ebab 0b06 	sub.w	fp, fp, r6
   87498:	eb09 0106 	add.w	r1, r9, r6
   8749c:	f04b 0201 	orr.w	r2, fp, #1
   874a0:	6099      	str	r1, [r3, #8]
   874a2:	604a      	str	r2, [r1, #4]
   874a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   874a8:	4640      	mov	r0, r8
   874aa:	f003 0301 	and.w	r3, r3, #1
   874ae:	431e      	orrs	r6, r3
   874b0:	f844 6c04 	str.w	r6, [r4, #-4]
   874b4:	f7ff fba6 	bl	86c04 <__malloc_unlock>
   874b8:	4625      	mov	r5, r4
   874ba:	e718      	b.n	872ee <_realloc_r+0xe6>
   874bc:	4621      	mov	r1, r4
   874be:	f7ff fb37 	bl	86b30 <memmove>
   874c2:	e6ee      	b.n	872a2 <_realloc_r+0x9a>
   874c4:	68a3      	ldr	r3, [r4, #8]
   874c6:	2a24      	cmp	r2, #36	; 0x24
   874c8:	6083      	str	r3, [r0, #8]
   874ca:	68e3      	ldr	r3, [r4, #12]
   874cc:	60c3      	str	r3, [r0, #12]
   874ce:	d018      	beq.n	87502 <_realloc_r+0x2fa>
   874d0:	f100 0310 	add.w	r3, r0, #16
   874d4:	f104 0210 	add.w	r2, r4, #16
   874d8:	e6dd      	b.n	87296 <_realloc_r+0x8e>
   874da:	f850 3c04 	ldr.w	r3, [r0, #-4]
   874de:	4625      	mov	r5, r4
   874e0:	f023 0303 	bic.w	r3, r3, #3
   874e4:	441f      	add	r7, r3
   874e6:	e6ef      	b.n	872c8 <_realloc_r+0xc0>
   874e8:	68a1      	ldr	r1, [r4, #8]
   874ea:	2a24      	cmp	r2, #36	; 0x24
   874ec:	f8ca 1010 	str.w	r1, [sl, #16]
   874f0:	68e1      	ldr	r1, [r4, #12]
   874f2:	f8ca 1014 	str.w	r1, [sl, #20]
   874f6:	d00d      	beq.n	87514 <_realloc_r+0x30c>
   874f8:	f104 0010 	add.w	r0, r4, #16
   874fc:	f10a 0218 	add.w	r2, sl, #24
   87500:	e7bf      	b.n	87482 <_realloc_r+0x27a>
   87502:	6922      	ldr	r2, [r4, #16]
   87504:	f100 0318 	add.w	r3, r0, #24
   87508:	6102      	str	r2, [r0, #16]
   8750a:	6961      	ldr	r1, [r4, #20]
   8750c:	f104 0218 	add.w	r2, r4, #24
   87510:	6141      	str	r1, [r0, #20]
   87512:	e6c0      	b.n	87296 <_realloc_r+0x8e>
   87514:	6922      	ldr	r2, [r4, #16]
   87516:	f104 0018 	add.w	r0, r4, #24
   8751a:	f8ca 2018 	str.w	r2, [sl, #24]
   8751e:	6961      	ldr	r1, [r4, #20]
   87520:	f10a 0220 	add.w	r2, sl, #32
   87524:	f8ca 101c 	str.w	r1, [sl, #28]
   87528:	e7ab      	b.n	87482 <_realloc_r+0x27a>
   8752a:	4621      	mov	r1, r4
   8752c:	462a      	mov	r2, r5
   8752e:	e782      	b.n	87436 <_realloc_r+0x22e>
   87530:	4621      	mov	r1, r4
   87532:	4628      	mov	r0, r5
   87534:	9301      	str	r3, [sp, #4]
   87536:	f7ff fafb 	bl	86b30 <memmove>
   8753a:	9b01      	ldr	r3, [sp, #4]
   8753c:	e781      	b.n	87442 <_realloc_r+0x23a>
   8753e:	68a1      	ldr	r1, [r4, #8]
   87540:	2a24      	cmp	r2, #36	; 0x24
   87542:	f8ca 1010 	str.w	r1, [sl, #16]
   87546:	68e1      	ldr	r1, [r4, #12]
   87548:	f8ca 1014 	str.w	r1, [sl, #20]
   8754c:	d006      	beq.n	8755c <_realloc_r+0x354>
   8754e:	f104 0110 	add.w	r1, r4, #16
   87552:	f10a 0218 	add.w	r2, sl, #24
   87556:	e76e      	b.n	87436 <_realloc_r+0x22e>
   87558:	200706d0 	.word	0x200706d0
   8755c:	6922      	ldr	r2, [r4, #16]
   8755e:	f104 0118 	add.w	r1, r4, #24
   87562:	f8ca 2018 	str.w	r2, [sl, #24]
   87566:	6960      	ldr	r0, [r4, #20]
   87568:	f10a 0220 	add.w	r2, sl, #32
   8756c:	f8ca 001c 	str.w	r0, [sl, #28]
   87570:	e761      	b.n	87436 <_realloc_r+0x22e>
   87572:	bf00      	nop

00087574 <_sbrk_r>:
   87574:	b538      	push	{r3, r4, r5, lr}
   87576:	2300      	movs	r3, #0
   87578:	4c06      	ldr	r4, [pc, #24]	; (87594 <_sbrk_r+0x20>)
   8757a:	4605      	mov	r5, r0
   8757c:	4608      	mov	r0, r1
   8757e:	6023      	str	r3, [r4, #0]
   87580:	f7fa fe6e 	bl	82260 <_sbrk>
   87584:	1c43      	adds	r3, r0, #1
   87586:	d000      	beq.n	8758a <_sbrk_r+0x16>
   87588:	bd38      	pop	{r3, r4, r5, pc}
   8758a:	6823      	ldr	r3, [r4, #0]
   8758c:	2b00      	cmp	r3, #0
   8758e:	d0fb      	beq.n	87588 <_sbrk_r+0x14>
   87590:	602b      	str	r3, [r5, #0]
   87592:	bd38      	pop	{r3, r4, r5, pc}
   87594:	20070cf0 	.word	0x20070cf0

00087598 <__sread>:
   87598:	b510      	push	{r4, lr}
   8759a:	460c      	mov	r4, r1
   8759c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   875a0:	f000 fa4a 	bl	87a38 <_read_r>
   875a4:	2800      	cmp	r0, #0
   875a6:	db03      	blt.n	875b0 <__sread+0x18>
   875a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   875aa:	4403      	add	r3, r0
   875ac:	6523      	str	r3, [r4, #80]	; 0x50
   875ae:	bd10      	pop	{r4, pc}
   875b0:	89a3      	ldrh	r3, [r4, #12]
   875b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   875b6:	81a3      	strh	r3, [r4, #12]
   875b8:	bd10      	pop	{r4, pc}
   875ba:	bf00      	nop

000875bc <__swrite>:
   875bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   875c0:	460c      	mov	r4, r1
   875c2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   875c6:	461f      	mov	r7, r3
   875c8:	05cb      	lsls	r3, r1, #23
   875ca:	4616      	mov	r6, r2
   875cc:	4605      	mov	r5, r0
   875ce:	d507      	bpl.n	875e0 <__swrite+0x24>
   875d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   875d4:	2302      	movs	r3, #2
   875d6:	2200      	movs	r2, #0
   875d8:	f000 fa18 	bl	87a0c <_lseek_r>
   875dc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   875e0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   875e4:	81a1      	strh	r1, [r4, #12]
   875e6:	463b      	mov	r3, r7
   875e8:	4632      	mov	r2, r6
   875ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   875ee:	4628      	mov	r0, r5
   875f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   875f4:	f000 b8c8 	b.w	87788 <_write_r>

000875f8 <__sseek>:
   875f8:	b510      	push	{r4, lr}
   875fa:	460c      	mov	r4, r1
   875fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   87600:	f000 fa04 	bl	87a0c <_lseek_r>
   87604:	89a3      	ldrh	r3, [r4, #12]
   87606:	1c42      	adds	r2, r0, #1
   87608:	bf0e      	itee	eq
   8760a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8760e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   87612:	6520      	strne	r0, [r4, #80]	; 0x50
   87614:	81a3      	strh	r3, [r4, #12]
   87616:	bd10      	pop	{r4, pc}

00087618 <__sclose>:
   87618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8761c:	f000 b95c 	b.w	878d8 <_close_r>

00087620 <__ssprint_r>:
   87620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87624:	6893      	ldr	r3, [r2, #8]
   87626:	b083      	sub	sp, #12
   87628:	4690      	mov	r8, r2
   8762a:	2b00      	cmp	r3, #0
   8762c:	d070      	beq.n	87710 <__ssprint_r+0xf0>
   8762e:	4682      	mov	sl, r0
   87630:	460c      	mov	r4, r1
   87632:	6817      	ldr	r7, [r2, #0]
   87634:	688d      	ldr	r5, [r1, #8]
   87636:	6808      	ldr	r0, [r1, #0]
   87638:	e042      	b.n	876c0 <__ssprint_r+0xa0>
   8763a:	89a3      	ldrh	r3, [r4, #12]
   8763c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   87640:	d02e      	beq.n	876a0 <__ssprint_r+0x80>
   87642:	6965      	ldr	r5, [r4, #20]
   87644:	6921      	ldr	r1, [r4, #16]
   87646:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8764a:	eba0 0b01 	sub.w	fp, r0, r1
   8764e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   87652:	f10b 0001 	add.w	r0, fp, #1
   87656:	106d      	asrs	r5, r5, #1
   87658:	4430      	add	r0, r6
   8765a:	42a8      	cmp	r0, r5
   8765c:	462a      	mov	r2, r5
   8765e:	bf84      	itt	hi
   87660:	4605      	movhi	r5, r0
   87662:	462a      	movhi	r2, r5
   87664:	055b      	lsls	r3, r3, #21
   87666:	d538      	bpl.n	876da <__ssprint_r+0xba>
   87668:	4611      	mov	r1, r2
   8766a:	4650      	mov	r0, sl
   8766c:	f7fe feec 	bl	86448 <_malloc_r>
   87670:	2800      	cmp	r0, #0
   87672:	d03c      	beq.n	876ee <__ssprint_r+0xce>
   87674:	465a      	mov	r2, fp
   87676:	6921      	ldr	r1, [r4, #16]
   87678:	9001      	str	r0, [sp, #4]
   8767a:	f7ff f9e3 	bl	86a44 <memcpy>
   8767e:	89a2      	ldrh	r2, [r4, #12]
   87680:	9b01      	ldr	r3, [sp, #4]
   87682:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   87686:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8768a:	81a2      	strh	r2, [r4, #12]
   8768c:	eba5 020b 	sub.w	r2, r5, fp
   87690:	eb03 000b 	add.w	r0, r3, fp
   87694:	6165      	str	r5, [r4, #20]
   87696:	46b3      	mov	fp, r6
   87698:	4635      	mov	r5, r6
   8769a:	6123      	str	r3, [r4, #16]
   8769c:	6020      	str	r0, [r4, #0]
   8769e:	60a2      	str	r2, [r4, #8]
   876a0:	465a      	mov	r2, fp
   876a2:	4649      	mov	r1, r9
   876a4:	f7ff fa44 	bl	86b30 <memmove>
   876a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   876ac:	68a2      	ldr	r2, [r4, #8]
   876ae:	6820      	ldr	r0, [r4, #0]
   876b0:	1b55      	subs	r5, r2, r5
   876b2:	4458      	add	r0, fp
   876b4:	1b9e      	subs	r6, r3, r6
   876b6:	60a5      	str	r5, [r4, #8]
   876b8:	6020      	str	r0, [r4, #0]
   876ba:	f8c8 6008 	str.w	r6, [r8, #8]
   876be:	b33e      	cbz	r6, 87710 <__ssprint_r+0xf0>
   876c0:	687e      	ldr	r6, [r7, #4]
   876c2:	463b      	mov	r3, r7
   876c4:	3708      	adds	r7, #8
   876c6:	2e00      	cmp	r6, #0
   876c8:	d0fa      	beq.n	876c0 <__ssprint_r+0xa0>
   876ca:	42ae      	cmp	r6, r5
   876cc:	f8d3 9000 	ldr.w	r9, [r3]
   876d0:	46ab      	mov	fp, r5
   876d2:	d2b2      	bcs.n	8763a <__ssprint_r+0x1a>
   876d4:	4635      	mov	r5, r6
   876d6:	46b3      	mov	fp, r6
   876d8:	e7e2      	b.n	876a0 <__ssprint_r+0x80>
   876da:	4650      	mov	r0, sl
   876dc:	f7ff fd94 	bl	87208 <_realloc_r>
   876e0:	4603      	mov	r3, r0
   876e2:	2800      	cmp	r0, #0
   876e4:	d1d2      	bne.n	8768c <__ssprint_r+0x6c>
   876e6:	6921      	ldr	r1, [r4, #16]
   876e8:	4650      	mov	r0, sl
   876ea:	f7fe fb81 	bl	85df0 <_free_r>
   876ee:	230c      	movs	r3, #12
   876f0:	2200      	movs	r2, #0
   876f2:	f04f 30ff 	mov.w	r0, #4294967295
   876f6:	f8ca 3000 	str.w	r3, [sl]
   876fa:	89a3      	ldrh	r3, [r4, #12]
   876fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87700:	81a3      	strh	r3, [r4, #12]
   87702:	f8c8 2008 	str.w	r2, [r8, #8]
   87706:	f8c8 2004 	str.w	r2, [r8, #4]
   8770a:	b003      	add	sp, #12
   8770c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87710:	2000      	movs	r0, #0
   87712:	f8c8 0004 	str.w	r0, [r8, #4]
   87716:	b003      	add	sp, #12
   87718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008771c <_wcrtomb_r>:
   8771c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8771e:	4606      	mov	r6, r0
   87720:	b085      	sub	sp, #20
   87722:	461f      	mov	r7, r3
   87724:	b189      	cbz	r1, 8774a <_wcrtomb_r+0x2e>
   87726:	4c10      	ldr	r4, [pc, #64]	; (87768 <_wcrtomb_r+0x4c>)
   87728:	4d10      	ldr	r5, [pc, #64]	; (8776c <_wcrtomb_r+0x50>)
   8772a:	6824      	ldr	r4, [r4, #0]
   8772c:	6b64      	ldr	r4, [r4, #52]	; 0x34
   8772e:	2c00      	cmp	r4, #0
   87730:	bf08      	it	eq
   87732:	462c      	moveq	r4, r5
   87734:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   87738:	47a0      	blx	r4
   8773a:	1c43      	adds	r3, r0, #1
   8773c:	d103      	bne.n	87746 <_wcrtomb_r+0x2a>
   8773e:	2200      	movs	r2, #0
   87740:	238a      	movs	r3, #138	; 0x8a
   87742:	603a      	str	r2, [r7, #0]
   87744:	6033      	str	r3, [r6, #0]
   87746:	b005      	add	sp, #20
   87748:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8774a:	460c      	mov	r4, r1
   8774c:	4a06      	ldr	r2, [pc, #24]	; (87768 <_wcrtomb_r+0x4c>)
   8774e:	4d07      	ldr	r5, [pc, #28]	; (8776c <_wcrtomb_r+0x50>)
   87750:	6811      	ldr	r1, [r2, #0]
   87752:	4622      	mov	r2, r4
   87754:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   87756:	a901      	add	r1, sp, #4
   87758:	2c00      	cmp	r4, #0
   8775a:	bf08      	it	eq
   8775c:	462c      	moveq	r4, r5
   8775e:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   87762:	47a0      	blx	r4
   87764:	e7e9      	b.n	8773a <_wcrtomb_r+0x1e>
   87766:	bf00      	nop
   87768:	20070134 	.word	0x20070134
   8776c:	20070564 	.word	0x20070564

00087770 <__ascii_wctomb>:
   87770:	b119      	cbz	r1, 8777a <__ascii_wctomb+0xa>
   87772:	2aff      	cmp	r2, #255	; 0xff
   87774:	d803      	bhi.n	8777e <__ascii_wctomb+0xe>
   87776:	700a      	strb	r2, [r1, #0]
   87778:	2101      	movs	r1, #1
   8777a:	4608      	mov	r0, r1
   8777c:	4770      	bx	lr
   8777e:	238a      	movs	r3, #138	; 0x8a
   87780:	f04f 31ff 	mov.w	r1, #4294967295
   87784:	6003      	str	r3, [r0, #0]
   87786:	e7f8      	b.n	8777a <__ascii_wctomb+0xa>

00087788 <_write_r>:
   87788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8778a:	460e      	mov	r6, r1
   8778c:	2500      	movs	r5, #0
   8778e:	4c08      	ldr	r4, [pc, #32]	; (877b0 <_write_r+0x28>)
   87790:	4611      	mov	r1, r2
   87792:	4607      	mov	r7, r0
   87794:	461a      	mov	r2, r3
   87796:	4630      	mov	r0, r6
   87798:	6025      	str	r5, [r4, #0]
   8779a:	f7f8 fdb5 	bl	80308 <_write>
   8779e:	1c43      	adds	r3, r0, #1
   877a0:	d000      	beq.n	877a4 <_write_r+0x1c>
   877a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   877a4:	6823      	ldr	r3, [r4, #0]
   877a6:	2b00      	cmp	r3, #0
   877a8:	d0fb      	beq.n	877a2 <_write_r+0x1a>
   877aa:	603b      	str	r3, [r7, #0]
   877ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   877ae:	bf00      	nop
   877b0:	20070cf0 	.word	0x20070cf0

000877b4 <__register_exitproc>:
   877b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   877b8:	4d2c      	ldr	r5, [pc, #176]	; (8786c <__register_exitproc+0xb8>)
   877ba:	4606      	mov	r6, r0
   877bc:	6828      	ldr	r0, [r5, #0]
   877be:	4698      	mov	r8, r3
   877c0:	460f      	mov	r7, r1
   877c2:	4691      	mov	r9, r2
   877c4:	f7fe fdbc 	bl	86340 <__retarget_lock_acquire_recursive>
   877c8:	4b29      	ldr	r3, [pc, #164]	; (87870 <__register_exitproc+0xbc>)
   877ca:	681c      	ldr	r4, [r3, #0]
   877cc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   877d0:	2b00      	cmp	r3, #0
   877d2:	d03e      	beq.n	87852 <__register_exitproc+0x9e>
   877d4:	685a      	ldr	r2, [r3, #4]
   877d6:	2a1f      	cmp	r2, #31
   877d8:	dc1c      	bgt.n	87814 <__register_exitproc+0x60>
   877da:	f102 0e01 	add.w	lr, r2, #1
   877de:	b176      	cbz	r6, 877fe <__register_exitproc+0x4a>
   877e0:	2101      	movs	r1, #1
   877e2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   877e6:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   877ea:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   877ee:	4091      	lsls	r1, r2
   877f0:	4308      	orrs	r0, r1
   877f2:	2e02      	cmp	r6, #2
   877f4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   877f8:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   877fc:	d023      	beq.n	87846 <__register_exitproc+0x92>
   877fe:	3202      	adds	r2, #2
   87800:	f8c3 e004 	str.w	lr, [r3, #4]
   87804:	6828      	ldr	r0, [r5, #0]
   87806:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8780a:	f7fe fd9b 	bl	86344 <__retarget_lock_release_recursive>
   8780e:	2000      	movs	r0, #0
   87810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   87814:	4b17      	ldr	r3, [pc, #92]	; (87874 <__register_exitproc+0xc0>)
   87816:	b30b      	cbz	r3, 8785c <__register_exitproc+0xa8>
   87818:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8781c:	f7fe fe0c 	bl	86438 <malloc>
   87820:	4603      	mov	r3, r0
   87822:	b1d8      	cbz	r0, 8785c <__register_exitproc+0xa8>
   87824:	2000      	movs	r0, #0
   87826:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8782a:	f04f 0e01 	mov.w	lr, #1
   8782e:	6058      	str	r0, [r3, #4]
   87830:	6019      	str	r1, [r3, #0]
   87832:	4602      	mov	r2, r0
   87834:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   87838:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8783c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   87840:	2e00      	cmp	r6, #0
   87842:	d0dc      	beq.n	877fe <__register_exitproc+0x4a>
   87844:	e7cc      	b.n	877e0 <__register_exitproc+0x2c>
   87846:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8784a:	4301      	orrs	r1, r0
   8784c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   87850:	e7d5      	b.n	877fe <__register_exitproc+0x4a>
   87852:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   87856:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8785a:	e7bb      	b.n	877d4 <__register_exitproc+0x20>
   8785c:	6828      	ldr	r0, [r5, #0]
   8785e:	f7fe fd71 	bl	86344 <__retarget_lock_release_recursive>
   87862:	f04f 30ff 	mov.w	r0, #4294967295
   87866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8786a:	bf00      	nop
   8786c:	20070560 	.word	0x20070560
   87870:	00088a3c 	.word	0x00088a3c
   87874:	00086439 	.word	0x00086439

00087878 <_calloc_r>:
   87878:	b510      	push	{r4, lr}
   8787a:	fb02 f101 	mul.w	r1, r2, r1
   8787e:	f7fe fde3 	bl	86448 <_malloc_r>
   87882:	4604      	mov	r4, r0
   87884:	b1d8      	cbz	r0, 878be <_calloc_r+0x46>
   87886:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8788a:	f022 0203 	bic.w	r2, r2, #3
   8788e:	3a04      	subs	r2, #4
   87890:	2a24      	cmp	r2, #36	; 0x24
   87892:	d818      	bhi.n	878c6 <_calloc_r+0x4e>
   87894:	2a13      	cmp	r2, #19
   87896:	d914      	bls.n	878c2 <_calloc_r+0x4a>
   87898:	2300      	movs	r3, #0
   8789a:	2a1b      	cmp	r2, #27
   8789c:	6003      	str	r3, [r0, #0]
   8789e:	6043      	str	r3, [r0, #4]
   878a0:	d916      	bls.n	878d0 <_calloc_r+0x58>
   878a2:	2a24      	cmp	r2, #36	; 0x24
   878a4:	6083      	str	r3, [r0, #8]
   878a6:	60c3      	str	r3, [r0, #12]
   878a8:	bf11      	iteee	ne
   878aa:	f100 0210 	addne.w	r2, r0, #16
   878ae:	6103      	streq	r3, [r0, #16]
   878b0:	6143      	streq	r3, [r0, #20]
   878b2:	f100 0218 	addeq.w	r2, r0, #24
   878b6:	2300      	movs	r3, #0
   878b8:	6013      	str	r3, [r2, #0]
   878ba:	6053      	str	r3, [r2, #4]
   878bc:	6093      	str	r3, [r2, #8]
   878be:	4620      	mov	r0, r4
   878c0:	bd10      	pop	{r4, pc}
   878c2:	4602      	mov	r2, r0
   878c4:	e7f7      	b.n	878b6 <_calloc_r+0x3e>
   878c6:	2100      	movs	r1, #0
   878c8:	f7fa fd2e 	bl	82328 <memset>
   878cc:	4620      	mov	r0, r4
   878ce:	bd10      	pop	{r4, pc}
   878d0:	f100 0208 	add.w	r2, r0, #8
   878d4:	e7ef      	b.n	878b6 <_calloc_r+0x3e>
   878d6:	bf00      	nop

000878d8 <_close_r>:
   878d8:	b538      	push	{r3, r4, r5, lr}
   878da:	2300      	movs	r3, #0
   878dc:	4c06      	ldr	r4, [pc, #24]	; (878f8 <_close_r+0x20>)
   878de:	4605      	mov	r5, r0
   878e0:	4608      	mov	r0, r1
   878e2:	6023      	str	r3, [r4, #0]
   878e4:	f7fa fcd8 	bl	82298 <_close>
   878e8:	1c43      	adds	r3, r0, #1
   878ea:	d000      	beq.n	878ee <_close_r+0x16>
   878ec:	bd38      	pop	{r3, r4, r5, pc}
   878ee:	6823      	ldr	r3, [r4, #0]
   878f0:	2b00      	cmp	r3, #0
   878f2:	d0fb      	beq.n	878ec <_close_r+0x14>
   878f4:	602b      	str	r3, [r5, #0]
   878f6:	bd38      	pop	{r3, r4, r5, pc}
   878f8:	20070cf0 	.word	0x20070cf0

000878fc <_fclose_r>:
   878fc:	b570      	push	{r4, r5, r6, lr}
   878fe:	b159      	cbz	r1, 87918 <_fclose_r+0x1c>
   87900:	4605      	mov	r5, r0
   87902:	460c      	mov	r4, r1
   87904:	b110      	cbz	r0, 8790c <_fclose_r+0x10>
   87906:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87908:	2b00      	cmp	r3, #0
   8790a:	d03c      	beq.n	87986 <_fclose_r+0x8a>
   8790c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8790e:	07d8      	lsls	r0, r3, #31
   87910:	d505      	bpl.n	8791e <_fclose_r+0x22>
   87912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87916:	b92b      	cbnz	r3, 87924 <_fclose_r+0x28>
   87918:	2600      	movs	r6, #0
   8791a:	4630      	mov	r0, r6
   8791c:	bd70      	pop	{r4, r5, r6, pc}
   8791e:	89a3      	ldrh	r3, [r4, #12]
   87920:	0599      	lsls	r1, r3, #22
   87922:	d53c      	bpl.n	8799e <_fclose_r+0xa2>
   87924:	4621      	mov	r1, r4
   87926:	4628      	mov	r0, r5
   87928:	f7fe f848 	bl	859bc <__sflush_r>
   8792c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8792e:	4606      	mov	r6, r0
   87930:	b133      	cbz	r3, 87940 <_fclose_r+0x44>
   87932:	69e1      	ldr	r1, [r4, #28]
   87934:	4628      	mov	r0, r5
   87936:	4798      	blx	r3
   87938:	2800      	cmp	r0, #0
   8793a:	bfb8      	it	lt
   8793c:	f04f 36ff 	movlt.w	r6, #4294967295
   87940:	89a3      	ldrh	r3, [r4, #12]
   87942:	061a      	lsls	r2, r3, #24
   87944:	d422      	bmi.n	8798c <_fclose_r+0x90>
   87946:	6b21      	ldr	r1, [r4, #48]	; 0x30
   87948:	b141      	cbz	r1, 8795c <_fclose_r+0x60>
   8794a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8794e:	4299      	cmp	r1, r3
   87950:	d002      	beq.n	87958 <_fclose_r+0x5c>
   87952:	4628      	mov	r0, r5
   87954:	f7fe fa4c 	bl	85df0 <_free_r>
   87958:	2300      	movs	r3, #0
   8795a:	6323      	str	r3, [r4, #48]	; 0x30
   8795c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8795e:	b121      	cbz	r1, 8796a <_fclose_r+0x6e>
   87960:	4628      	mov	r0, r5
   87962:	f7fe fa45 	bl	85df0 <_free_r>
   87966:	2300      	movs	r3, #0
   87968:	6463      	str	r3, [r4, #68]	; 0x44
   8796a:	f7fe f94b 	bl	85c04 <__sfp_lock_acquire>
   8796e:	2200      	movs	r2, #0
   87970:	6e63      	ldr	r3, [r4, #100]	; 0x64
   87972:	81a2      	strh	r2, [r4, #12]
   87974:	07db      	lsls	r3, r3, #31
   87976:	d50e      	bpl.n	87996 <_fclose_r+0x9a>
   87978:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8797a:	f7fe fcdf 	bl	8633c <__retarget_lock_close_recursive>
   8797e:	f7fe f947 	bl	85c10 <__sfp_lock_release>
   87982:	4630      	mov	r0, r6
   87984:	bd70      	pop	{r4, r5, r6, pc}
   87986:	f7fe f90d 	bl	85ba4 <__sinit>
   8798a:	e7bf      	b.n	8790c <_fclose_r+0x10>
   8798c:	6921      	ldr	r1, [r4, #16]
   8798e:	4628      	mov	r0, r5
   87990:	f7fe fa2e 	bl	85df0 <_free_r>
   87994:	e7d7      	b.n	87946 <_fclose_r+0x4a>
   87996:	6da0      	ldr	r0, [r4, #88]	; 0x58
   87998:	f7fe fcd4 	bl	86344 <__retarget_lock_release_recursive>
   8799c:	e7ec      	b.n	87978 <_fclose_r+0x7c>
   8799e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   879a0:	f7fe fcce 	bl	86340 <__retarget_lock_acquire_recursive>
   879a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   879a8:	2b00      	cmp	r3, #0
   879aa:	d1bb      	bne.n	87924 <_fclose_r+0x28>
   879ac:	6e66      	ldr	r6, [r4, #100]	; 0x64
   879ae:	f016 0601 	ands.w	r6, r6, #1
   879b2:	d1b1      	bne.n	87918 <_fclose_r+0x1c>
   879b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   879b6:	f7fe fcc5 	bl	86344 <__retarget_lock_release_recursive>
   879ba:	4630      	mov	r0, r6
   879bc:	bd70      	pop	{r4, r5, r6, pc}
   879be:	bf00      	nop

000879c0 <_fstat_r>:
   879c0:	b570      	push	{r4, r5, r6, lr}
   879c2:	460d      	mov	r5, r1
   879c4:	2300      	movs	r3, #0
   879c6:	4c07      	ldr	r4, [pc, #28]	; (879e4 <_fstat_r+0x24>)
   879c8:	4606      	mov	r6, r0
   879ca:	4611      	mov	r1, r2
   879cc:	4628      	mov	r0, r5
   879ce:	6023      	str	r3, [r4, #0]
   879d0:	f7fa fc65 	bl	8229e <_fstat>
   879d4:	1c43      	adds	r3, r0, #1
   879d6:	d000      	beq.n	879da <_fstat_r+0x1a>
   879d8:	bd70      	pop	{r4, r5, r6, pc}
   879da:	6823      	ldr	r3, [r4, #0]
   879dc:	2b00      	cmp	r3, #0
   879de:	d0fb      	beq.n	879d8 <_fstat_r+0x18>
   879e0:	6033      	str	r3, [r6, #0]
   879e2:	bd70      	pop	{r4, r5, r6, pc}
   879e4:	20070cf0 	.word	0x20070cf0

000879e8 <_isatty_r>:
   879e8:	b538      	push	{r3, r4, r5, lr}
   879ea:	2300      	movs	r3, #0
   879ec:	4c06      	ldr	r4, [pc, #24]	; (87a08 <_isatty_r+0x20>)
   879ee:	4605      	mov	r5, r0
   879f0:	4608      	mov	r0, r1
   879f2:	6023      	str	r3, [r4, #0]
   879f4:	f7fa fc58 	bl	822a8 <_isatty>
   879f8:	1c43      	adds	r3, r0, #1
   879fa:	d000      	beq.n	879fe <_isatty_r+0x16>
   879fc:	bd38      	pop	{r3, r4, r5, pc}
   879fe:	6823      	ldr	r3, [r4, #0]
   87a00:	2b00      	cmp	r3, #0
   87a02:	d0fb      	beq.n	879fc <_isatty_r+0x14>
   87a04:	602b      	str	r3, [r5, #0]
   87a06:	bd38      	pop	{r3, r4, r5, pc}
   87a08:	20070cf0 	.word	0x20070cf0

00087a0c <_lseek_r>:
   87a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87a0e:	460e      	mov	r6, r1
   87a10:	2500      	movs	r5, #0
   87a12:	4c08      	ldr	r4, [pc, #32]	; (87a34 <_lseek_r+0x28>)
   87a14:	4611      	mov	r1, r2
   87a16:	4607      	mov	r7, r0
   87a18:	461a      	mov	r2, r3
   87a1a:	4630      	mov	r0, r6
   87a1c:	6025      	str	r5, [r4, #0]
   87a1e:	f7fa fc45 	bl	822ac <_lseek>
   87a22:	1c43      	adds	r3, r0, #1
   87a24:	d000      	beq.n	87a28 <_lseek_r+0x1c>
   87a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87a28:	6823      	ldr	r3, [r4, #0]
   87a2a:	2b00      	cmp	r3, #0
   87a2c:	d0fb      	beq.n	87a26 <_lseek_r+0x1a>
   87a2e:	603b      	str	r3, [r7, #0]
   87a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87a32:	bf00      	nop
   87a34:	20070cf0 	.word	0x20070cf0

00087a38 <_read_r>:
   87a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87a3a:	460e      	mov	r6, r1
   87a3c:	2500      	movs	r5, #0
   87a3e:	4c08      	ldr	r4, [pc, #32]	; (87a60 <_read_r+0x28>)
   87a40:	4611      	mov	r1, r2
   87a42:	4607      	mov	r7, r0
   87a44:	461a      	mov	r2, r3
   87a46:	4630      	mov	r0, r6
   87a48:	6025      	str	r5, [r4, #0]
   87a4a:	f7f8 fc3f 	bl	802cc <_read>
   87a4e:	1c43      	adds	r3, r0, #1
   87a50:	d000      	beq.n	87a54 <_read_r+0x1c>
   87a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87a54:	6823      	ldr	r3, [r4, #0]
   87a56:	2b00      	cmp	r3, #0
   87a58:	d0fb      	beq.n	87a52 <_read_r+0x1a>
   87a5a:	603b      	str	r3, [r7, #0]
   87a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87a5e:	bf00      	nop
   87a60:	20070cf0 	.word	0x20070cf0

00087a64 <__aeabi_drsub>:
   87a64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   87a68:	e002      	b.n	87a70 <__adddf3>
   87a6a:	bf00      	nop

00087a6c <__aeabi_dsub>:
   87a6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00087a70 <__adddf3>:
   87a70:	b530      	push	{r4, r5, lr}
   87a72:	ea4f 0441 	mov.w	r4, r1, lsl #1
   87a76:	ea4f 0543 	mov.w	r5, r3, lsl #1
   87a7a:	ea94 0f05 	teq	r4, r5
   87a7e:	bf08      	it	eq
   87a80:	ea90 0f02 	teqeq	r0, r2
   87a84:	bf1f      	itttt	ne
   87a86:	ea54 0c00 	orrsne.w	ip, r4, r0
   87a8a:	ea55 0c02 	orrsne.w	ip, r5, r2
   87a8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   87a92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   87a96:	f000 80e2 	beq.w	87c5e <__adddf3+0x1ee>
   87a9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   87a9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   87aa2:	bfb8      	it	lt
   87aa4:	426d      	neglt	r5, r5
   87aa6:	dd0c      	ble.n	87ac2 <__adddf3+0x52>
   87aa8:	442c      	add	r4, r5
   87aaa:	ea80 0202 	eor.w	r2, r0, r2
   87aae:	ea81 0303 	eor.w	r3, r1, r3
   87ab2:	ea82 0000 	eor.w	r0, r2, r0
   87ab6:	ea83 0101 	eor.w	r1, r3, r1
   87aba:	ea80 0202 	eor.w	r2, r0, r2
   87abe:	ea81 0303 	eor.w	r3, r1, r3
   87ac2:	2d36      	cmp	r5, #54	; 0x36
   87ac4:	bf88      	it	hi
   87ac6:	bd30      	pophi	{r4, r5, pc}
   87ac8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   87acc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   87ad0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   87ad4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   87ad8:	d002      	beq.n	87ae0 <__adddf3+0x70>
   87ada:	4240      	negs	r0, r0
   87adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   87ae0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   87ae4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   87ae8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   87aec:	d002      	beq.n	87af4 <__adddf3+0x84>
   87aee:	4252      	negs	r2, r2
   87af0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   87af4:	ea94 0f05 	teq	r4, r5
   87af8:	f000 80a7 	beq.w	87c4a <__adddf3+0x1da>
   87afc:	f1a4 0401 	sub.w	r4, r4, #1
   87b00:	f1d5 0e20 	rsbs	lr, r5, #32
   87b04:	db0d      	blt.n	87b22 <__adddf3+0xb2>
   87b06:	fa02 fc0e 	lsl.w	ip, r2, lr
   87b0a:	fa22 f205 	lsr.w	r2, r2, r5
   87b0e:	1880      	adds	r0, r0, r2
   87b10:	f141 0100 	adc.w	r1, r1, #0
   87b14:	fa03 f20e 	lsl.w	r2, r3, lr
   87b18:	1880      	adds	r0, r0, r2
   87b1a:	fa43 f305 	asr.w	r3, r3, r5
   87b1e:	4159      	adcs	r1, r3
   87b20:	e00e      	b.n	87b40 <__adddf3+0xd0>
   87b22:	f1a5 0520 	sub.w	r5, r5, #32
   87b26:	f10e 0e20 	add.w	lr, lr, #32
   87b2a:	2a01      	cmp	r2, #1
   87b2c:	fa03 fc0e 	lsl.w	ip, r3, lr
   87b30:	bf28      	it	cs
   87b32:	f04c 0c02 	orrcs.w	ip, ip, #2
   87b36:	fa43 f305 	asr.w	r3, r3, r5
   87b3a:	18c0      	adds	r0, r0, r3
   87b3c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   87b40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87b44:	d507      	bpl.n	87b56 <__adddf3+0xe6>
   87b46:	f04f 0e00 	mov.w	lr, #0
   87b4a:	f1dc 0c00 	rsbs	ip, ip, #0
   87b4e:	eb7e 0000 	sbcs.w	r0, lr, r0
   87b52:	eb6e 0101 	sbc.w	r1, lr, r1
   87b56:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   87b5a:	d31b      	bcc.n	87b94 <__adddf3+0x124>
   87b5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   87b60:	d30c      	bcc.n	87b7c <__adddf3+0x10c>
   87b62:	0849      	lsrs	r1, r1, #1
   87b64:	ea5f 0030 	movs.w	r0, r0, rrx
   87b68:	ea4f 0c3c 	mov.w	ip, ip, rrx
   87b6c:	f104 0401 	add.w	r4, r4, #1
   87b70:	ea4f 5244 	mov.w	r2, r4, lsl #21
   87b74:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   87b78:	f080 809a 	bcs.w	87cb0 <__adddf3+0x240>
   87b7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   87b80:	bf08      	it	eq
   87b82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   87b86:	f150 0000 	adcs.w	r0, r0, #0
   87b8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   87b8e:	ea41 0105 	orr.w	r1, r1, r5
   87b92:	bd30      	pop	{r4, r5, pc}
   87b94:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   87b98:	4140      	adcs	r0, r0
   87b9a:	eb41 0101 	adc.w	r1, r1, r1
   87b9e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87ba2:	f1a4 0401 	sub.w	r4, r4, #1
   87ba6:	d1e9      	bne.n	87b7c <__adddf3+0x10c>
   87ba8:	f091 0f00 	teq	r1, #0
   87bac:	bf04      	itt	eq
   87bae:	4601      	moveq	r1, r0
   87bb0:	2000      	moveq	r0, #0
   87bb2:	fab1 f381 	clz	r3, r1
   87bb6:	bf08      	it	eq
   87bb8:	3320      	addeq	r3, #32
   87bba:	f1a3 030b 	sub.w	r3, r3, #11
   87bbe:	f1b3 0220 	subs.w	r2, r3, #32
   87bc2:	da0c      	bge.n	87bde <__adddf3+0x16e>
   87bc4:	320c      	adds	r2, #12
   87bc6:	dd08      	ble.n	87bda <__adddf3+0x16a>
   87bc8:	f102 0c14 	add.w	ip, r2, #20
   87bcc:	f1c2 020c 	rsb	r2, r2, #12
   87bd0:	fa01 f00c 	lsl.w	r0, r1, ip
   87bd4:	fa21 f102 	lsr.w	r1, r1, r2
   87bd8:	e00c      	b.n	87bf4 <__adddf3+0x184>
   87bda:	f102 0214 	add.w	r2, r2, #20
   87bde:	bfd8      	it	le
   87be0:	f1c2 0c20 	rsble	ip, r2, #32
   87be4:	fa01 f102 	lsl.w	r1, r1, r2
   87be8:	fa20 fc0c 	lsr.w	ip, r0, ip
   87bec:	bfdc      	itt	le
   87bee:	ea41 010c 	orrle.w	r1, r1, ip
   87bf2:	4090      	lslle	r0, r2
   87bf4:	1ae4      	subs	r4, r4, r3
   87bf6:	bfa2      	ittt	ge
   87bf8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   87bfc:	4329      	orrge	r1, r5
   87bfe:	bd30      	popge	{r4, r5, pc}
   87c00:	ea6f 0404 	mvn.w	r4, r4
   87c04:	3c1f      	subs	r4, #31
   87c06:	da1c      	bge.n	87c42 <__adddf3+0x1d2>
   87c08:	340c      	adds	r4, #12
   87c0a:	dc0e      	bgt.n	87c2a <__adddf3+0x1ba>
   87c0c:	f104 0414 	add.w	r4, r4, #20
   87c10:	f1c4 0220 	rsb	r2, r4, #32
   87c14:	fa20 f004 	lsr.w	r0, r0, r4
   87c18:	fa01 f302 	lsl.w	r3, r1, r2
   87c1c:	ea40 0003 	orr.w	r0, r0, r3
   87c20:	fa21 f304 	lsr.w	r3, r1, r4
   87c24:	ea45 0103 	orr.w	r1, r5, r3
   87c28:	bd30      	pop	{r4, r5, pc}
   87c2a:	f1c4 040c 	rsb	r4, r4, #12
   87c2e:	f1c4 0220 	rsb	r2, r4, #32
   87c32:	fa20 f002 	lsr.w	r0, r0, r2
   87c36:	fa01 f304 	lsl.w	r3, r1, r4
   87c3a:	ea40 0003 	orr.w	r0, r0, r3
   87c3e:	4629      	mov	r1, r5
   87c40:	bd30      	pop	{r4, r5, pc}
   87c42:	fa21 f004 	lsr.w	r0, r1, r4
   87c46:	4629      	mov	r1, r5
   87c48:	bd30      	pop	{r4, r5, pc}
   87c4a:	f094 0f00 	teq	r4, #0
   87c4e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   87c52:	bf06      	itte	eq
   87c54:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   87c58:	3401      	addeq	r4, #1
   87c5a:	3d01      	subne	r5, #1
   87c5c:	e74e      	b.n	87afc <__adddf3+0x8c>
   87c5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   87c62:	bf18      	it	ne
   87c64:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   87c68:	d029      	beq.n	87cbe <__adddf3+0x24e>
   87c6a:	ea94 0f05 	teq	r4, r5
   87c6e:	bf08      	it	eq
   87c70:	ea90 0f02 	teqeq	r0, r2
   87c74:	d005      	beq.n	87c82 <__adddf3+0x212>
   87c76:	ea54 0c00 	orrs.w	ip, r4, r0
   87c7a:	bf04      	itt	eq
   87c7c:	4619      	moveq	r1, r3
   87c7e:	4610      	moveq	r0, r2
   87c80:	bd30      	pop	{r4, r5, pc}
   87c82:	ea91 0f03 	teq	r1, r3
   87c86:	bf1e      	ittt	ne
   87c88:	2100      	movne	r1, #0
   87c8a:	2000      	movne	r0, #0
   87c8c:	bd30      	popne	{r4, r5, pc}
   87c8e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   87c92:	d105      	bne.n	87ca0 <__adddf3+0x230>
   87c94:	0040      	lsls	r0, r0, #1
   87c96:	4149      	adcs	r1, r1
   87c98:	bf28      	it	cs
   87c9a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   87c9e:	bd30      	pop	{r4, r5, pc}
   87ca0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   87ca4:	bf3c      	itt	cc
   87ca6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   87caa:	bd30      	popcc	{r4, r5, pc}
   87cac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87cb0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   87cb4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   87cb8:	f04f 0000 	mov.w	r0, #0
   87cbc:	bd30      	pop	{r4, r5, pc}
   87cbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   87cc2:	bf1a      	itte	ne
   87cc4:	4619      	movne	r1, r3
   87cc6:	4610      	movne	r0, r2
   87cc8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   87ccc:	bf1c      	itt	ne
   87cce:	460b      	movne	r3, r1
   87cd0:	4602      	movne	r2, r0
   87cd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   87cd6:	bf06      	itte	eq
   87cd8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   87cdc:	ea91 0f03 	teqeq	r1, r3
   87ce0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   87ce4:	bd30      	pop	{r4, r5, pc}
   87ce6:	bf00      	nop

00087ce8 <__aeabi_ui2d>:
   87ce8:	f090 0f00 	teq	r0, #0
   87cec:	bf04      	itt	eq
   87cee:	2100      	moveq	r1, #0
   87cf0:	4770      	bxeq	lr
   87cf2:	b530      	push	{r4, r5, lr}
   87cf4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87cf8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87cfc:	f04f 0500 	mov.w	r5, #0
   87d00:	f04f 0100 	mov.w	r1, #0
   87d04:	e750      	b.n	87ba8 <__adddf3+0x138>
   87d06:	bf00      	nop

00087d08 <__aeabi_i2d>:
   87d08:	f090 0f00 	teq	r0, #0
   87d0c:	bf04      	itt	eq
   87d0e:	2100      	moveq	r1, #0
   87d10:	4770      	bxeq	lr
   87d12:	b530      	push	{r4, r5, lr}
   87d14:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87d18:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87d1c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   87d20:	bf48      	it	mi
   87d22:	4240      	negmi	r0, r0
   87d24:	f04f 0100 	mov.w	r1, #0
   87d28:	e73e      	b.n	87ba8 <__adddf3+0x138>
   87d2a:	bf00      	nop

00087d2c <__aeabi_f2d>:
   87d2c:	0042      	lsls	r2, r0, #1
   87d2e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   87d32:	ea4f 0131 	mov.w	r1, r1, rrx
   87d36:	ea4f 7002 	mov.w	r0, r2, lsl #28
   87d3a:	bf1f      	itttt	ne
   87d3c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   87d40:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   87d44:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   87d48:	4770      	bxne	lr
   87d4a:	f092 0f00 	teq	r2, #0
   87d4e:	bf14      	ite	ne
   87d50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   87d54:	4770      	bxeq	lr
   87d56:	b530      	push	{r4, r5, lr}
   87d58:	f44f 7460 	mov.w	r4, #896	; 0x380
   87d5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87d60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   87d64:	e720      	b.n	87ba8 <__adddf3+0x138>
   87d66:	bf00      	nop

00087d68 <__aeabi_ul2d>:
   87d68:	ea50 0201 	orrs.w	r2, r0, r1
   87d6c:	bf08      	it	eq
   87d6e:	4770      	bxeq	lr
   87d70:	b530      	push	{r4, r5, lr}
   87d72:	f04f 0500 	mov.w	r5, #0
   87d76:	e00a      	b.n	87d8e <__aeabi_l2d+0x16>

00087d78 <__aeabi_l2d>:
   87d78:	ea50 0201 	orrs.w	r2, r0, r1
   87d7c:	bf08      	it	eq
   87d7e:	4770      	bxeq	lr
   87d80:	b530      	push	{r4, r5, lr}
   87d82:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   87d86:	d502      	bpl.n	87d8e <__aeabi_l2d+0x16>
   87d88:	4240      	negs	r0, r0
   87d8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   87d8e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87d92:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87d96:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   87d9a:	f43f aedc 	beq.w	87b56 <__adddf3+0xe6>
   87d9e:	f04f 0203 	mov.w	r2, #3
   87da2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   87da6:	bf18      	it	ne
   87da8:	3203      	addne	r2, #3
   87daa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   87dae:	bf18      	it	ne
   87db0:	3203      	addne	r2, #3
   87db2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   87db6:	f1c2 0320 	rsb	r3, r2, #32
   87dba:	fa00 fc03 	lsl.w	ip, r0, r3
   87dbe:	fa20 f002 	lsr.w	r0, r0, r2
   87dc2:	fa01 fe03 	lsl.w	lr, r1, r3
   87dc6:	ea40 000e 	orr.w	r0, r0, lr
   87dca:	fa21 f102 	lsr.w	r1, r1, r2
   87dce:	4414      	add	r4, r2
   87dd0:	e6c1      	b.n	87b56 <__adddf3+0xe6>
   87dd2:	bf00      	nop

00087dd4 <__aeabi_dmul>:
   87dd4:	b570      	push	{r4, r5, r6, lr}
   87dd6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   87dda:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   87dde:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   87de2:	bf1d      	ittte	ne
   87de4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   87de8:	ea94 0f0c 	teqne	r4, ip
   87dec:	ea95 0f0c 	teqne	r5, ip
   87df0:	f000 f8de 	bleq	87fb0 <__aeabi_dmul+0x1dc>
   87df4:	442c      	add	r4, r5
   87df6:	ea81 0603 	eor.w	r6, r1, r3
   87dfa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   87dfe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   87e02:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   87e06:	bf18      	it	ne
   87e08:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   87e0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87e10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   87e14:	d038      	beq.n	87e88 <__aeabi_dmul+0xb4>
   87e16:	fba0 ce02 	umull	ip, lr, r0, r2
   87e1a:	f04f 0500 	mov.w	r5, #0
   87e1e:	fbe1 e502 	umlal	lr, r5, r1, r2
   87e22:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   87e26:	fbe0 e503 	umlal	lr, r5, r0, r3
   87e2a:	f04f 0600 	mov.w	r6, #0
   87e2e:	fbe1 5603 	umlal	r5, r6, r1, r3
   87e32:	f09c 0f00 	teq	ip, #0
   87e36:	bf18      	it	ne
   87e38:	f04e 0e01 	orrne.w	lr, lr, #1
   87e3c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   87e40:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   87e44:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   87e48:	d204      	bcs.n	87e54 <__aeabi_dmul+0x80>
   87e4a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   87e4e:	416d      	adcs	r5, r5
   87e50:	eb46 0606 	adc.w	r6, r6, r6
   87e54:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   87e58:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   87e5c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   87e60:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   87e64:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   87e68:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   87e6c:	bf88      	it	hi
   87e6e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   87e72:	d81e      	bhi.n	87eb2 <__aeabi_dmul+0xde>
   87e74:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   87e78:	bf08      	it	eq
   87e7a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   87e7e:	f150 0000 	adcs.w	r0, r0, #0
   87e82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   87e86:	bd70      	pop	{r4, r5, r6, pc}
   87e88:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   87e8c:	ea46 0101 	orr.w	r1, r6, r1
   87e90:	ea40 0002 	orr.w	r0, r0, r2
   87e94:	ea81 0103 	eor.w	r1, r1, r3
   87e98:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   87e9c:	bfc2      	ittt	gt
   87e9e:	ebd4 050c 	rsbsgt	r5, r4, ip
   87ea2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   87ea6:	bd70      	popgt	{r4, r5, r6, pc}
   87ea8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87eac:	f04f 0e00 	mov.w	lr, #0
   87eb0:	3c01      	subs	r4, #1
   87eb2:	f300 80ab 	bgt.w	8800c <__aeabi_dmul+0x238>
   87eb6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   87eba:	bfde      	ittt	le
   87ebc:	2000      	movle	r0, #0
   87ebe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   87ec2:	bd70      	pople	{r4, r5, r6, pc}
   87ec4:	f1c4 0400 	rsb	r4, r4, #0
   87ec8:	3c20      	subs	r4, #32
   87eca:	da35      	bge.n	87f38 <__aeabi_dmul+0x164>
   87ecc:	340c      	adds	r4, #12
   87ece:	dc1b      	bgt.n	87f08 <__aeabi_dmul+0x134>
   87ed0:	f104 0414 	add.w	r4, r4, #20
   87ed4:	f1c4 0520 	rsb	r5, r4, #32
   87ed8:	fa00 f305 	lsl.w	r3, r0, r5
   87edc:	fa20 f004 	lsr.w	r0, r0, r4
   87ee0:	fa01 f205 	lsl.w	r2, r1, r5
   87ee4:	ea40 0002 	orr.w	r0, r0, r2
   87ee8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   87eec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   87ef0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   87ef4:	fa21 f604 	lsr.w	r6, r1, r4
   87ef8:	eb42 0106 	adc.w	r1, r2, r6
   87efc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87f00:	bf08      	it	eq
   87f02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   87f06:	bd70      	pop	{r4, r5, r6, pc}
   87f08:	f1c4 040c 	rsb	r4, r4, #12
   87f0c:	f1c4 0520 	rsb	r5, r4, #32
   87f10:	fa00 f304 	lsl.w	r3, r0, r4
   87f14:	fa20 f005 	lsr.w	r0, r0, r5
   87f18:	fa01 f204 	lsl.w	r2, r1, r4
   87f1c:	ea40 0002 	orr.w	r0, r0, r2
   87f20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87f24:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   87f28:	f141 0100 	adc.w	r1, r1, #0
   87f2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87f30:	bf08      	it	eq
   87f32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   87f36:	bd70      	pop	{r4, r5, r6, pc}
   87f38:	f1c4 0520 	rsb	r5, r4, #32
   87f3c:	fa00 f205 	lsl.w	r2, r0, r5
   87f40:	ea4e 0e02 	orr.w	lr, lr, r2
   87f44:	fa20 f304 	lsr.w	r3, r0, r4
   87f48:	fa01 f205 	lsl.w	r2, r1, r5
   87f4c:	ea43 0302 	orr.w	r3, r3, r2
   87f50:	fa21 f004 	lsr.w	r0, r1, r4
   87f54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87f58:	fa21 f204 	lsr.w	r2, r1, r4
   87f5c:	ea20 0002 	bic.w	r0, r0, r2
   87f60:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   87f64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87f68:	bf08      	it	eq
   87f6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   87f6e:	bd70      	pop	{r4, r5, r6, pc}
   87f70:	f094 0f00 	teq	r4, #0
   87f74:	d10f      	bne.n	87f96 <__aeabi_dmul+0x1c2>
   87f76:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   87f7a:	0040      	lsls	r0, r0, #1
   87f7c:	eb41 0101 	adc.w	r1, r1, r1
   87f80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87f84:	bf08      	it	eq
   87f86:	3c01      	subeq	r4, #1
   87f88:	d0f7      	beq.n	87f7a <__aeabi_dmul+0x1a6>
   87f8a:	ea41 0106 	orr.w	r1, r1, r6
   87f8e:	f095 0f00 	teq	r5, #0
   87f92:	bf18      	it	ne
   87f94:	4770      	bxne	lr
   87f96:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   87f9a:	0052      	lsls	r2, r2, #1
   87f9c:	eb43 0303 	adc.w	r3, r3, r3
   87fa0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   87fa4:	bf08      	it	eq
   87fa6:	3d01      	subeq	r5, #1
   87fa8:	d0f7      	beq.n	87f9a <__aeabi_dmul+0x1c6>
   87faa:	ea43 0306 	orr.w	r3, r3, r6
   87fae:	4770      	bx	lr
   87fb0:	ea94 0f0c 	teq	r4, ip
   87fb4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   87fb8:	bf18      	it	ne
   87fba:	ea95 0f0c 	teqne	r5, ip
   87fbe:	d00c      	beq.n	87fda <__aeabi_dmul+0x206>
   87fc0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   87fc4:	bf18      	it	ne
   87fc6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   87fca:	d1d1      	bne.n	87f70 <__aeabi_dmul+0x19c>
   87fcc:	ea81 0103 	eor.w	r1, r1, r3
   87fd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87fd4:	f04f 0000 	mov.w	r0, #0
   87fd8:	bd70      	pop	{r4, r5, r6, pc}
   87fda:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   87fde:	bf06      	itte	eq
   87fe0:	4610      	moveq	r0, r2
   87fe2:	4619      	moveq	r1, r3
   87fe4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   87fe8:	d019      	beq.n	8801e <__aeabi_dmul+0x24a>
   87fea:	ea94 0f0c 	teq	r4, ip
   87fee:	d102      	bne.n	87ff6 <__aeabi_dmul+0x222>
   87ff0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   87ff4:	d113      	bne.n	8801e <__aeabi_dmul+0x24a>
   87ff6:	ea95 0f0c 	teq	r5, ip
   87ffa:	d105      	bne.n	88008 <__aeabi_dmul+0x234>
   87ffc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   88000:	bf1c      	itt	ne
   88002:	4610      	movne	r0, r2
   88004:	4619      	movne	r1, r3
   88006:	d10a      	bne.n	8801e <__aeabi_dmul+0x24a>
   88008:	ea81 0103 	eor.w	r1, r1, r3
   8800c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   88010:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   88014:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   88018:	f04f 0000 	mov.w	r0, #0
   8801c:	bd70      	pop	{r4, r5, r6, pc}
   8801e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   88022:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   88026:	bd70      	pop	{r4, r5, r6, pc}

00088028 <__aeabi_ddiv>:
   88028:	b570      	push	{r4, r5, r6, lr}
   8802a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8802e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   88032:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   88036:	bf1d      	ittte	ne
   88038:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8803c:	ea94 0f0c 	teqne	r4, ip
   88040:	ea95 0f0c 	teqne	r5, ip
   88044:	f000 f8a7 	bleq	88196 <__aeabi_ddiv+0x16e>
   88048:	eba4 0405 	sub.w	r4, r4, r5
   8804c:	ea81 0e03 	eor.w	lr, r1, r3
   88050:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   88054:	ea4f 3101 	mov.w	r1, r1, lsl #12
   88058:	f000 8088 	beq.w	8816c <__aeabi_ddiv+0x144>
   8805c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   88060:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   88064:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   88068:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8806c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   88070:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   88074:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   88078:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8807c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   88080:	429d      	cmp	r5, r3
   88082:	bf08      	it	eq
   88084:	4296      	cmpeq	r6, r2
   88086:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8808a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8808e:	d202      	bcs.n	88096 <__aeabi_ddiv+0x6e>
   88090:	085b      	lsrs	r3, r3, #1
   88092:	ea4f 0232 	mov.w	r2, r2, rrx
   88096:	1ab6      	subs	r6, r6, r2
   88098:	eb65 0503 	sbc.w	r5, r5, r3
   8809c:	085b      	lsrs	r3, r3, #1
   8809e:	ea4f 0232 	mov.w	r2, r2, rrx
   880a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   880a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   880aa:	ebb6 0e02 	subs.w	lr, r6, r2
   880ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   880b2:	bf22      	ittt	cs
   880b4:	1ab6      	subcs	r6, r6, r2
   880b6:	4675      	movcs	r5, lr
   880b8:	ea40 000c 	orrcs.w	r0, r0, ip
   880bc:	085b      	lsrs	r3, r3, #1
   880be:	ea4f 0232 	mov.w	r2, r2, rrx
   880c2:	ebb6 0e02 	subs.w	lr, r6, r2
   880c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   880ca:	bf22      	ittt	cs
   880cc:	1ab6      	subcs	r6, r6, r2
   880ce:	4675      	movcs	r5, lr
   880d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   880d4:	085b      	lsrs	r3, r3, #1
   880d6:	ea4f 0232 	mov.w	r2, r2, rrx
   880da:	ebb6 0e02 	subs.w	lr, r6, r2
   880de:	eb75 0e03 	sbcs.w	lr, r5, r3
   880e2:	bf22      	ittt	cs
   880e4:	1ab6      	subcs	r6, r6, r2
   880e6:	4675      	movcs	r5, lr
   880e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   880ec:	085b      	lsrs	r3, r3, #1
   880ee:	ea4f 0232 	mov.w	r2, r2, rrx
   880f2:	ebb6 0e02 	subs.w	lr, r6, r2
   880f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   880fa:	bf22      	ittt	cs
   880fc:	1ab6      	subcs	r6, r6, r2
   880fe:	4675      	movcs	r5, lr
   88100:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   88104:	ea55 0e06 	orrs.w	lr, r5, r6
   88108:	d018      	beq.n	8813c <__aeabi_ddiv+0x114>
   8810a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8810e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   88112:	ea4f 1606 	mov.w	r6, r6, lsl #4
   88116:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8811a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8811e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   88122:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   88126:	d1c0      	bne.n	880aa <__aeabi_ddiv+0x82>
   88128:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8812c:	d10b      	bne.n	88146 <__aeabi_ddiv+0x11e>
   8812e:	ea41 0100 	orr.w	r1, r1, r0
   88132:	f04f 0000 	mov.w	r0, #0
   88136:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8813a:	e7b6      	b.n	880aa <__aeabi_ddiv+0x82>
   8813c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88140:	bf04      	itt	eq
   88142:	4301      	orreq	r1, r0
   88144:	2000      	moveq	r0, #0
   88146:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8814a:	bf88      	it	hi
   8814c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   88150:	f63f aeaf 	bhi.w	87eb2 <__aeabi_dmul+0xde>
   88154:	ebb5 0c03 	subs.w	ip, r5, r3
   88158:	bf04      	itt	eq
   8815a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8815e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   88162:	f150 0000 	adcs.w	r0, r0, #0
   88166:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8816a:	bd70      	pop	{r4, r5, r6, pc}
   8816c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   88170:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   88174:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   88178:	bfc2      	ittt	gt
   8817a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8817e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   88182:	bd70      	popgt	{r4, r5, r6, pc}
   88184:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   88188:	f04f 0e00 	mov.w	lr, #0
   8818c:	3c01      	subs	r4, #1
   8818e:	e690      	b.n	87eb2 <__aeabi_dmul+0xde>
   88190:	ea45 0e06 	orr.w	lr, r5, r6
   88194:	e68d      	b.n	87eb2 <__aeabi_dmul+0xde>
   88196:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8819a:	ea94 0f0c 	teq	r4, ip
   8819e:	bf08      	it	eq
   881a0:	ea95 0f0c 	teqeq	r5, ip
   881a4:	f43f af3b 	beq.w	8801e <__aeabi_dmul+0x24a>
   881a8:	ea94 0f0c 	teq	r4, ip
   881ac:	d10a      	bne.n	881c4 <__aeabi_ddiv+0x19c>
   881ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   881b2:	f47f af34 	bne.w	8801e <__aeabi_dmul+0x24a>
   881b6:	ea95 0f0c 	teq	r5, ip
   881ba:	f47f af25 	bne.w	88008 <__aeabi_dmul+0x234>
   881be:	4610      	mov	r0, r2
   881c0:	4619      	mov	r1, r3
   881c2:	e72c      	b.n	8801e <__aeabi_dmul+0x24a>
   881c4:	ea95 0f0c 	teq	r5, ip
   881c8:	d106      	bne.n	881d8 <__aeabi_ddiv+0x1b0>
   881ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   881ce:	f43f aefd 	beq.w	87fcc <__aeabi_dmul+0x1f8>
   881d2:	4610      	mov	r0, r2
   881d4:	4619      	mov	r1, r3
   881d6:	e722      	b.n	8801e <__aeabi_dmul+0x24a>
   881d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   881dc:	bf18      	it	ne
   881de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   881e2:	f47f aec5 	bne.w	87f70 <__aeabi_dmul+0x19c>
   881e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   881ea:	f47f af0d 	bne.w	88008 <__aeabi_dmul+0x234>
   881ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   881f2:	f47f aeeb 	bne.w	87fcc <__aeabi_dmul+0x1f8>
   881f6:	e712      	b.n	8801e <__aeabi_dmul+0x24a>

000881f8 <__gedf2>:
   881f8:	f04f 3cff 	mov.w	ip, #4294967295
   881fc:	e006      	b.n	8820c <__cmpdf2+0x4>
   881fe:	bf00      	nop

00088200 <__ledf2>:
   88200:	f04f 0c01 	mov.w	ip, #1
   88204:	e002      	b.n	8820c <__cmpdf2+0x4>
   88206:	bf00      	nop

00088208 <__cmpdf2>:
   88208:	f04f 0c01 	mov.w	ip, #1
   8820c:	f84d cd04 	str.w	ip, [sp, #-4]!
   88210:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   88214:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88218:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8821c:	bf18      	it	ne
   8821e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   88222:	d01b      	beq.n	8825c <__cmpdf2+0x54>
   88224:	b001      	add	sp, #4
   88226:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8822a:	bf0c      	ite	eq
   8822c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   88230:	ea91 0f03 	teqne	r1, r3
   88234:	bf02      	ittt	eq
   88236:	ea90 0f02 	teqeq	r0, r2
   8823a:	2000      	moveq	r0, #0
   8823c:	4770      	bxeq	lr
   8823e:	f110 0f00 	cmn.w	r0, #0
   88242:	ea91 0f03 	teq	r1, r3
   88246:	bf58      	it	pl
   88248:	4299      	cmppl	r1, r3
   8824a:	bf08      	it	eq
   8824c:	4290      	cmpeq	r0, r2
   8824e:	bf2c      	ite	cs
   88250:	17d8      	asrcs	r0, r3, #31
   88252:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   88256:	f040 0001 	orr.w	r0, r0, #1
   8825a:	4770      	bx	lr
   8825c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   88260:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88264:	d102      	bne.n	8826c <__cmpdf2+0x64>
   88266:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8826a:	d107      	bne.n	8827c <__cmpdf2+0x74>
   8826c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88270:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88274:	d1d6      	bne.n	88224 <__cmpdf2+0x1c>
   88276:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8827a:	d0d3      	beq.n	88224 <__cmpdf2+0x1c>
   8827c:	f85d 0b04 	ldr.w	r0, [sp], #4
   88280:	4770      	bx	lr
   88282:	bf00      	nop

00088284 <__aeabi_cdrcmple>:
   88284:	4684      	mov	ip, r0
   88286:	4610      	mov	r0, r2
   88288:	4662      	mov	r2, ip
   8828a:	468c      	mov	ip, r1
   8828c:	4619      	mov	r1, r3
   8828e:	4663      	mov	r3, ip
   88290:	e000      	b.n	88294 <__aeabi_cdcmpeq>
   88292:	bf00      	nop

00088294 <__aeabi_cdcmpeq>:
   88294:	b501      	push	{r0, lr}
   88296:	f7ff ffb7 	bl	88208 <__cmpdf2>
   8829a:	2800      	cmp	r0, #0
   8829c:	bf48      	it	mi
   8829e:	f110 0f00 	cmnmi.w	r0, #0
   882a2:	bd01      	pop	{r0, pc}

000882a4 <__aeabi_dcmpeq>:
   882a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   882a8:	f7ff fff4 	bl	88294 <__aeabi_cdcmpeq>
   882ac:	bf0c      	ite	eq
   882ae:	2001      	moveq	r0, #1
   882b0:	2000      	movne	r0, #0
   882b2:	f85d fb08 	ldr.w	pc, [sp], #8
   882b6:	bf00      	nop

000882b8 <__aeabi_dcmplt>:
   882b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   882bc:	f7ff ffea 	bl	88294 <__aeabi_cdcmpeq>
   882c0:	bf34      	ite	cc
   882c2:	2001      	movcc	r0, #1
   882c4:	2000      	movcs	r0, #0
   882c6:	f85d fb08 	ldr.w	pc, [sp], #8
   882ca:	bf00      	nop

000882cc <__aeabi_dcmple>:
   882cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   882d0:	f7ff ffe0 	bl	88294 <__aeabi_cdcmpeq>
   882d4:	bf94      	ite	ls
   882d6:	2001      	movls	r0, #1
   882d8:	2000      	movhi	r0, #0
   882da:	f85d fb08 	ldr.w	pc, [sp], #8
   882de:	bf00      	nop

000882e0 <__aeabi_dcmpge>:
   882e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   882e4:	f7ff ffce 	bl	88284 <__aeabi_cdrcmple>
   882e8:	bf94      	ite	ls
   882ea:	2001      	movls	r0, #1
   882ec:	2000      	movhi	r0, #0
   882ee:	f85d fb08 	ldr.w	pc, [sp], #8
   882f2:	bf00      	nop

000882f4 <__aeabi_dcmpgt>:
   882f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   882f8:	f7ff ffc4 	bl	88284 <__aeabi_cdrcmple>
   882fc:	bf34      	ite	cc
   882fe:	2001      	movcc	r0, #1
   88300:	2000      	movcs	r0, #0
   88302:	f85d fb08 	ldr.w	pc, [sp], #8
   88306:	bf00      	nop

00088308 <__aeabi_dcmpun>:
   88308:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8830c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88310:	d102      	bne.n	88318 <__aeabi_dcmpun+0x10>
   88312:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   88316:	d10a      	bne.n	8832e <__aeabi_dcmpun+0x26>
   88318:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8831c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88320:	d102      	bne.n	88328 <__aeabi_dcmpun+0x20>
   88322:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   88326:	d102      	bne.n	8832e <__aeabi_dcmpun+0x26>
   88328:	f04f 0000 	mov.w	r0, #0
   8832c:	4770      	bx	lr
   8832e:	f04f 0001 	mov.w	r0, #1
   88332:	4770      	bx	lr

00088334 <__aeabi_d2iz>:
   88334:	ea4f 0241 	mov.w	r2, r1, lsl #1
   88338:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8833c:	d215      	bcs.n	8836a <__aeabi_d2iz+0x36>
   8833e:	d511      	bpl.n	88364 <__aeabi_d2iz+0x30>
   88340:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   88344:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   88348:	d912      	bls.n	88370 <__aeabi_d2iz+0x3c>
   8834a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8834e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   88352:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   88356:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8835a:	fa23 f002 	lsr.w	r0, r3, r2
   8835e:	bf18      	it	ne
   88360:	4240      	negne	r0, r0
   88362:	4770      	bx	lr
   88364:	f04f 0000 	mov.w	r0, #0
   88368:	4770      	bx	lr
   8836a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8836e:	d105      	bne.n	8837c <__aeabi_d2iz+0x48>
   88370:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   88374:	bf08      	it	eq
   88376:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8837a:	4770      	bx	lr
   8837c:	f04f 0000 	mov.w	r0, #0
   88380:	4770      	bx	lr
   88382:	bf00      	nop

00088384 <__aeabi_uldivmod>:
   88384:	b953      	cbnz	r3, 8839c <__aeabi_uldivmod+0x18>
   88386:	b94a      	cbnz	r2, 8839c <__aeabi_uldivmod+0x18>
   88388:	2900      	cmp	r1, #0
   8838a:	bf08      	it	eq
   8838c:	2800      	cmpeq	r0, #0
   8838e:	bf1c      	itt	ne
   88390:	f04f 31ff 	movne.w	r1, #4294967295
   88394:	f04f 30ff 	movne.w	r0, #4294967295
   88398:	f000 b97a 	b.w	88690 <__aeabi_idiv0>
   8839c:	f1ad 0c08 	sub.w	ip, sp, #8
   883a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   883a4:	f000 f806 	bl	883b4 <__udivmoddi4>
   883a8:	f8dd e004 	ldr.w	lr, [sp, #4]
   883ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   883b0:	b004      	add	sp, #16
   883b2:	4770      	bx	lr

000883b4 <__udivmoddi4>:
   883b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   883b8:	468c      	mov	ip, r1
   883ba:	460e      	mov	r6, r1
   883bc:	4604      	mov	r4, r0
   883be:	9d08      	ldr	r5, [sp, #32]
   883c0:	2b00      	cmp	r3, #0
   883c2:	d150      	bne.n	88466 <__udivmoddi4+0xb2>
   883c4:	428a      	cmp	r2, r1
   883c6:	4617      	mov	r7, r2
   883c8:	d96c      	bls.n	884a4 <__udivmoddi4+0xf0>
   883ca:	fab2 fe82 	clz	lr, r2
   883ce:	f1be 0f00 	cmp.w	lr, #0
   883d2:	d00b      	beq.n	883ec <__udivmoddi4+0x38>
   883d4:	f1ce 0c20 	rsb	ip, lr, #32
   883d8:	fa01 f60e 	lsl.w	r6, r1, lr
   883dc:	fa20 fc0c 	lsr.w	ip, r0, ip
   883e0:	fa02 f70e 	lsl.w	r7, r2, lr
   883e4:	ea4c 0c06 	orr.w	ip, ip, r6
   883e8:	fa00 f40e 	lsl.w	r4, r0, lr
   883ec:	0c3a      	lsrs	r2, r7, #16
   883ee:	fbbc f9f2 	udiv	r9, ip, r2
   883f2:	b2bb      	uxth	r3, r7
   883f4:	fb02 cc19 	mls	ip, r2, r9, ip
   883f8:	fb09 fa03 	mul.w	sl, r9, r3
   883fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
   88400:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   88404:	45b2      	cmp	sl, r6
   88406:	d90a      	bls.n	8841e <__udivmoddi4+0x6a>
   88408:	19f6      	adds	r6, r6, r7
   8840a:	f109 31ff 	add.w	r1, r9, #4294967295
   8840e:	f080 8125 	bcs.w	8865c <__udivmoddi4+0x2a8>
   88412:	45b2      	cmp	sl, r6
   88414:	f240 8122 	bls.w	8865c <__udivmoddi4+0x2a8>
   88418:	f1a9 0902 	sub.w	r9, r9, #2
   8841c:	443e      	add	r6, r7
   8841e:	eba6 060a 	sub.w	r6, r6, sl
   88422:	fbb6 f0f2 	udiv	r0, r6, r2
   88426:	fb02 6610 	mls	r6, r2, r0, r6
   8842a:	fb00 f303 	mul.w	r3, r0, r3
   8842e:	b2a4      	uxth	r4, r4
   88430:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   88434:	42a3      	cmp	r3, r4
   88436:	d909      	bls.n	8844c <__udivmoddi4+0x98>
   88438:	19e4      	adds	r4, r4, r7
   8843a:	f100 32ff 	add.w	r2, r0, #4294967295
   8843e:	f080 810b 	bcs.w	88658 <__udivmoddi4+0x2a4>
   88442:	42a3      	cmp	r3, r4
   88444:	f240 8108 	bls.w	88658 <__udivmoddi4+0x2a4>
   88448:	3802      	subs	r0, #2
   8844a:	443c      	add	r4, r7
   8844c:	2100      	movs	r1, #0
   8844e:	1ae4      	subs	r4, r4, r3
   88450:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   88454:	2d00      	cmp	r5, #0
   88456:	d062      	beq.n	8851e <__udivmoddi4+0x16a>
   88458:	2300      	movs	r3, #0
   8845a:	fa24 f40e 	lsr.w	r4, r4, lr
   8845e:	602c      	str	r4, [r5, #0]
   88460:	606b      	str	r3, [r5, #4]
   88462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88466:	428b      	cmp	r3, r1
   88468:	d907      	bls.n	8847a <__udivmoddi4+0xc6>
   8846a:	2d00      	cmp	r5, #0
   8846c:	d055      	beq.n	8851a <__udivmoddi4+0x166>
   8846e:	2100      	movs	r1, #0
   88470:	e885 0041 	stmia.w	r5, {r0, r6}
   88474:	4608      	mov	r0, r1
   88476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8847a:	fab3 f183 	clz	r1, r3
   8847e:	2900      	cmp	r1, #0
   88480:	f040 808f 	bne.w	885a2 <__udivmoddi4+0x1ee>
   88484:	42b3      	cmp	r3, r6
   88486:	d302      	bcc.n	8848e <__udivmoddi4+0xda>
   88488:	4282      	cmp	r2, r0
   8848a:	f200 80fc 	bhi.w	88686 <__udivmoddi4+0x2d2>
   8848e:	1a84      	subs	r4, r0, r2
   88490:	eb66 0603 	sbc.w	r6, r6, r3
   88494:	2001      	movs	r0, #1
   88496:	46b4      	mov	ip, r6
   88498:	2d00      	cmp	r5, #0
   8849a:	d040      	beq.n	8851e <__udivmoddi4+0x16a>
   8849c:	e885 1010 	stmia.w	r5, {r4, ip}
   884a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   884a4:	b912      	cbnz	r2, 884ac <__udivmoddi4+0xf8>
   884a6:	2701      	movs	r7, #1
   884a8:	fbb7 f7f2 	udiv	r7, r7, r2
   884ac:	fab7 fe87 	clz	lr, r7
   884b0:	f1be 0f00 	cmp.w	lr, #0
   884b4:	d135      	bne.n	88522 <__udivmoddi4+0x16e>
   884b6:	2101      	movs	r1, #1
   884b8:	1bf6      	subs	r6, r6, r7
   884ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   884be:	fa1f f887 	uxth.w	r8, r7
   884c2:	fbb6 f2fc 	udiv	r2, r6, ip
   884c6:	fb0c 6612 	mls	r6, ip, r2, r6
   884ca:	fb08 f002 	mul.w	r0, r8, r2
   884ce:	0c23      	lsrs	r3, r4, #16
   884d0:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   884d4:	42b0      	cmp	r0, r6
   884d6:	d907      	bls.n	884e8 <__udivmoddi4+0x134>
   884d8:	19f6      	adds	r6, r6, r7
   884da:	f102 33ff 	add.w	r3, r2, #4294967295
   884de:	d202      	bcs.n	884e6 <__udivmoddi4+0x132>
   884e0:	42b0      	cmp	r0, r6
   884e2:	f200 80d2 	bhi.w	8868a <__udivmoddi4+0x2d6>
   884e6:	461a      	mov	r2, r3
   884e8:	1a36      	subs	r6, r6, r0
   884ea:	fbb6 f0fc 	udiv	r0, r6, ip
   884ee:	fb0c 6610 	mls	r6, ip, r0, r6
   884f2:	fb08 f800 	mul.w	r8, r8, r0
   884f6:	b2a3      	uxth	r3, r4
   884f8:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   884fc:	45a0      	cmp	r8, r4
   884fe:	d907      	bls.n	88510 <__udivmoddi4+0x15c>
   88500:	19e4      	adds	r4, r4, r7
   88502:	f100 33ff 	add.w	r3, r0, #4294967295
   88506:	d202      	bcs.n	8850e <__udivmoddi4+0x15a>
   88508:	45a0      	cmp	r8, r4
   8850a:	f200 80b9 	bhi.w	88680 <__udivmoddi4+0x2cc>
   8850e:	4618      	mov	r0, r3
   88510:	eba4 0408 	sub.w	r4, r4, r8
   88514:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   88518:	e79c      	b.n	88454 <__udivmoddi4+0xa0>
   8851a:	4629      	mov	r1, r5
   8851c:	4628      	mov	r0, r5
   8851e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88522:	fa07 f70e 	lsl.w	r7, r7, lr
   88526:	f1ce 0320 	rsb	r3, lr, #32
   8852a:	fa26 f203 	lsr.w	r2, r6, r3
   8852e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   88532:	fbb2 f1fc 	udiv	r1, r2, ip
   88536:	fa1f f887 	uxth.w	r8, r7
   8853a:	fb0c 2211 	mls	r2, ip, r1, r2
   8853e:	fa06 f60e 	lsl.w	r6, r6, lr
   88542:	fa20 f303 	lsr.w	r3, r0, r3
   88546:	fb01 f908 	mul.w	r9, r1, r8
   8854a:	4333      	orrs	r3, r6
   8854c:	0c1e      	lsrs	r6, r3, #16
   8854e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   88552:	45b1      	cmp	r9, r6
   88554:	fa00 f40e 	lsl.w	r4, r0, lr
   88558:	d909      	bls.n	8856e <__udivmoddi4+0x1ba>
   8855a:	19f6      	adds	r6, r6, r7
   8855c:	f101 32ff 	add.w	r2, r1, #4294967295
   88560:	f080 808c 	bcs.w	8867c <__udivmoddi4+0x2c8>
   88564:	45b1      	cmp	r9, r6
   88566:	f240 8089 	bls.w	8867c <__udivmoddi4+0x2c8>
   8856a:	3902      	subs	r1, #2
   8856c:	443e      	add	r6, r7
   8856e:	eba6 0609 	sub.w	r6, r6, r9
   88572:	fbb6 f0fc 	udiv	r0, r6, ip
   88576:	fb0c 6210 	mls	r2, ip, r0, r6
   8857a:	fb00 f908 	mul.w	r9, r0, r8
   8857e:	b29e      	uxth	r6, r3
   88580:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   88584:	45b1      	cmp	r9, r6
   88586:	d907      	bls.n	88598 <__udivmoddi4+0x1e4>
   88588:	19f6      	adds	r6, r6, r7
   8858a:	f100 33ff 	add.w	r3, r0, #4294967295
   8858e:	d271      	bcs.n	88674 <__udivmoddi4+0x2c0>
   88590:	45b1      	cmp	r9, r6
   88592:	d96f      	bls.n	88674 <__udivmoddi4+0x2c0>
   88594:	3802      	subs	r0, #2
   88596:	443e      	add	r6, r7
   88598:	eba6 0609 	sub.w	r6, r6, r9
   8859c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   885a0:	e78f      	b.n	884c2 <__udivmoddi4+0x10e>
   885a2:	f1c1 0720 	rsb	r7, r1, #32
   885a6:	fa22 f807 	lsr.w	r8, r2, r7
   885aa:	408b      	lsls	r3, r1
   885ac:	ea48 0303 	orr.w	r3, r8, r3
   885b0:	fa26 f407 	lsr.w	r4, r6, r7
   885b4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   885b8:	fbb4 f9fe 	udiv	r9, r4, lr
   885bc:	fa1f fc83 	uxth.w	ip, r3
   885c0:	fb0e 4419 	mls	r4, lr, r9, r4
   885c4:	408e      	lsls	r6, r1
   885c6:	fa20 f807 	lsr.w	r8, r0, r7
   885ca:	fb09 fa0c 	mul.w	sl, r9, ip
   885ce:	ea48 0806 	orr.w	r8, r8, r6
   885d2:	ea4f 4618 	mov.w	r6, r8, lsr #16
   885d6:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   885da:	45a2      	cmp	sl, r4
   885dc:	fa02 f201 	lsl.w	r2, r2, r1
   885e0:	fa00 f601 	lsl.w	r6, r0, r1
   885e4:	d908      	bls.n	885f8 <__udivmoddi4+0x244>
   885e6:	18e4      	adds	r4, r4, r3
   885e8:	f109 30ff 	add.w	r0, r9, #4294967295
   885ec:	d244      	bcs.n	88678 <__udivmoddi4+0x2c4>
   885ee:	45a2      	cmp	sl, r4
   885f0:	d942      	bls.n	88678 <__udivmoddi4+0x2c4>
   885f2:	f1a9 0902 	sub.w	r9, r9, #2
   885f6:	441c      	add	r4, r3
   885f8:	eba4 040a 	sub.w	r4, r4, sl
   885fc:	fbb4 f0fe 	udiv	r0, r4, lr
   88600:	fb0e 4410 	mls	r4, lr, r0, r4
   88604:	fb00 fc0c 	mul.w	ip, r0, ip
   88608:	fa1f f888 	uxth.w	r8, r8
   8860c:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   88610:	45a4      	cmp	ip, r4
   88612:	d907      	bls.n	88624 <__udivmoddi4+0x270>
   88614:	18e4      	adds	r4, r4, r3
   88616:	f100 3eff 	add.w	lr, r0, #4294967295
   8861a:	d229      	bcs.n	88670 <__udivmoddi4+0x2bc>
   8861c:	45a4      	cmp	ip, r4
   8861e:	d927      	bls.n	88670 <__udivmoddi4+0x2bc>
   88620:	3802      	subs	r0, #2
   88622:	441c      	add	r4, r3
   88624:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   88628:	fba0 8902 	umull	r8, r9, r0, r2
   8862c:	eba4 0c0c 	sub.w	ip, r4, ip
   88630:	45cc      	cmp	ip, r9
   88632:	46c2      	mov	sl, r8
   88634:	46ce      	mov	lr, r9
   88636:	d315      	bcc.n	88664 <__udivmoddi4+0x2b0>
   88638:	d012      	beq.n	88660 <__udivmoddi4+0x2ac>
   8863a:	b155      	cbz	r5, 88652 <__udivmoddi4+0x29e>
   8863c:	ebb6 030a 	subs.w	r3, r6, sl
   88640:	eb6c 060e 	sbc.w	r6, ip, lr
   88644:	fa06 f707 	lsl.w	r7, r6, r7
   88648:	40cb      	lsrs	r3, r1
   8864a:	431f      	orrs	r7, r3
   8864c:	40ce      	lsrs	r6, r1
   8864e:	602f      	str	r7, [r5, #0]
   88650:	606e      	str	r6, [r5, #4]
   88652:	2100      	movs	r1, #0
   88654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88658:	4610      	mov	r0, r2
   8865a:	e6f7      	b.n	8844c <__udivmoddi4+0x98>
   8865c:	4689      	mov	r9, r1
   8865e:	e6de      	b.n	8841e <__udivmoddi4+0x6a>
   88660:	4546      	cmp	r6, r8
   88662:	d2ea      	bcs.n	8863a <__udivmoddi4+0x286>
   88664:	ebb8 0a02 	subs.w	sl, r8, r2
   88668:	eb69 0e03 	sbc.w	lr, r9, r3
   8866c:	3801      	subs	r0, #1
   8866e:	e7e4      	b.n	8863a <__udivmoddi4+0x286>
   88670:	4670      	mov	r0, lr
   88672:	e7d7      	b.n	88624 <__udivmoddi4+0x270>
   88674:	4618      	mov	r0, r3
   88676:	e78f      	b.n	88598 <__udivmoddi4+0x1e4>
   88678:	4681      	mov	r9, r0
   8867a:	e7bd      	b.n	885f8 <__udivmoddi4+0x244>
   8867c:	4611      	mov	r1, r2
   8867e:	e776      	b.n	8856e <__udivmoddi4+0x1ba>
   88680:	3802      	subs	r0, #2
   88682:	443c      	add	r4, r7
   88684:	e744      	b.n	88510 <__udivmoddi4+0x15c>
   88686:	4608      	mov	r0, r1
   88688:	e706      	b.n	88498 <__udivmoddi4+0xe4>
   8868a:	3a02      	subs	r2, #2
   8868c:	443e      	add	r6, r7
   8868e:	e72b      	b.n	884e8 <__udivmoddi4+0x134>

00088690 <__aeabi_idiv0>:
   88690:	4770      	bx	lr
   88692:	bf00      	nop
   88694:	736e6f43 	.word	0x736e6f43
   88698:	20656c6f 	.word	0x20656c6f
   8869c:	64616572 	.word	0x64616572
   886a0:	00000a79 	.word	0x00000a79
   886a4:	3d3d3d3d 	.word	0x3d3d3d3d
   886a8:	3d3d3d3d 	.word	0x3d3d3d3d
   886ac:	3d3d3d3d 	.word	0x3d3d3d3d
   886b0:	00000a3d 	.word	0x00000a3d
   886b4:	00006925 	.word	0x00006925
   886b8:	656c6553 	.word	0x656c6553
   886bc:	00007463 	.word	0x00007463
   886c0:	5446454c 	.word	0x5446454c
   886c4:	00000000 	.word	0x00000000
   886c8:	00005055 	.word	0x00005055
   886cc:	4e574f44 	.word	0x4e574f44
   886d0:	00000000 	.word	0x00000000
   886d4:	48474952 	.word	0x48474952
   886d8:	00000054 	.word	0x00000054
   886dc:	454e4f4e 	.word	0x454e4f4e
   886e0:	00000000 	.word	0x00000000
   886e4:	0c040800 	.word	0x0c040800
   886e8:	0e060a02 	.word	0x0e060a02
   886ec:	0d050901 	.word	0x0d050901
   886f0:	0f070b03 	.word	0x0f070b03
   886f4:	742f2e2e 	.word	0x742f2e2e
   886f8:	2f747365 	.word	0x2f747365
   886fc:	74736574 	.word	0x74736574
   88700:	6c65645f 	.word	0x6c65645f
   88704:	75467961 	.word	0x75467961
   88708:	6974636e 	.word	0x6974636e
   8870c:	2e736e6f 	.word	0x2e736e6f
   88710:	00000063 	.word	0x00000063
   88714:	74736574 	.word	0x74736574
   88718:	6c65645f 	.word	0x6c65645f
   8871c:	69547961 	.word	0x69547961
   88720:	4972656d 	.word	0x4972656d
   88724:	696e4973 	.word	0x696e4973
   88728:	6c616974 	.word	0x6c616974
   8872c:	64657369 	.word	0x64657369
   88730:	706f7250 	.word	0x706f7250
   88734:	796c7265 	.word	0x796c7265
   88738:	00000000 	.word	0x00000000
   8873c:	74736574 	.word	0x74736574
   88740:	6c65645f 	.word	0x6c65645f
   88744:	6f437961 	.word	0x6f437961
   88748:	73746e75 	.word	0x73746e75
   8874c:	706f7250 	.word	0x706f7250
   88750:	796c7265 	.word	0x796c7265
   88754:	00000000 	.word	0x00000000
   88758:	742f2e2e 	.word	0x742f2e2e
   8875c:	2f747365 	.word	0x2f747365
   88760:	74736574 	.word	0x74736574
   88764:	64636c5f 	.word	0x64636c5f
   88768:	636e7546 	.word	0x636e7546
   8876c:	6e6f6974 	.word	0x6e6f6974
   88770:	00632e73 	.word	0x00632e73
   88774:	74736574 	.word	0x74736574
   88778:	696e695f 	.word	0x696e695f
   8877c:	6c616974 	.word	0x6c616974
   88780:	74617369 	.word	0x74617369
   88784:	664f6e69 	.word	0x664f6e69
   88788:	4c656854 	.word	0x4c656854
   8878c:	00004443 	.word	0x00004443
   88790:	74736574 	.word	0x74736574
   88794:	6972775f 	.word	0x6972775f
   88798:	676e6974 	.word	0x676e6974
   8879c:	72616843 	.word	0x72616843
   887a0:	65746361 	.word	0x65746361
   887a4:	6f547372 	.word	0x6f547372
   887a8:	4c656854 	.word	0x4c656854
   887ac:	00004443 	.word	0x00004443
   887b0:	74736574 	.word	0x74736574
   887b4:	656c635f 	.word	0x656c635f
   887b8:	6e697261 	.word	0x6e697261
   887bc:	65685467 	.word	0x65685467
   887c0:	4444434c 	.word	0x4444434c
   887c4:	6c707369 	.word	0x6c707369
   887c8:	00007961 	.word	0x00007961
   887cc:	742f2e2e 	.word	0x742f2e2e
   887d0:	2f747365 	.word	0x2f747365
   887d4:	74736574 	.word	0x74736574
   887d8:	6364615f 	.word	0x6364615f
   887dc:	636e7546 	.word	0x636e7546
   887e0:	6e6f6974 	.word	0x6e6f6974
   887e4:	00632e73 	.word	0x00632e73
   887e8:	74736574 	.word	0x74736574
   887ec:	4344415f 	.word	0x4344415f
   887f0:	65766e6f 	.word	0x65766e6f
   887f4:	72657472 	.word	0x72657472
   887f8:	74696e49 	.word	0x74696e49
   887fc:	696c6169 	.word	0x696c6169
   88800:	50736573 	.word	0x50736573
   88804:	65706f72 	.word	0x65706f72
   88808:	00796c72 	.word	0x00796c72
   8880c:	74736574 	.word	0x74736574
   88810:	4344415f 	.word	0x4344415f
   88814:	65766e6f 	.word	0x65766e6f
   88818:	72657472 	.word	0x72657472
   8881c:	64616552 	.word	0x64616552
   88820:	6c615673 	.word	0x6c615673
   88824:	69576575 	.word	0x69576575
   88828:	6f4e6874 	.word	0x6f4e6874
   8882c:	74747542 	.word	0x74747542
   88830:	72506e6f 	.word	0x72506e6f
   88834:	65737365 	.word	0x65737365
   88838:	00000064 	.word	0x00000064
   8883c:	742f2e2e 	.word	0x742f2e2e
   88840:	2f747365 	.word	0x2f747365
   88844:	74736574 	.word	0x74736574
   88848:	7475625f 	.word	0x7475625f
   8884c:	736e6f74 	.word	0x736e6f74
   88850:	0000632e 	.word	0x0000632e
   88854:	74736574 	.word	0x74736574
   88858:	426f6e5f 	.word	0x426f6e5f
   8885c:	6f747475 	.word	0x6f747475
   88860:	5073496e 	.word	0x5073496e
   88864:	73736572 	.word	0x73736572
   88868:	00006465 	.word	0x00006465
   8886c:	742f2e2e 	.word	0x742f2e2e
   88870:	2f747365 	.word	0x2f747365
   88874:	74736574 	.word	0x74736574
   88878:	64636c5f 	.word	0x64636c5f
   8887c:	6c707041 	.word	0x6c707041
   88880:	74616369 	.word	0x74616369
   88884:	2e6e6f69 	.word	0x2e6e6f69
   88888:	00000063 	.word	0x00000063
   8888c:	74736574 	.word	0x74736574
   88890:	6972775f 	.word	0x6972775f
   88894:	676e6974 	.word	0x676e6974
   88898:	67694434 	.word	0x67694434
   8889c:	754e7469 	.word	0x754e7469
   888a0:	7265626d 	.word	0x7265626d
   888a4:	68546e4f 	.word	0x68546e4f
   888a8:	44434c65 	.word	0x44434c65
   888ac:	70736944 	.word	0x70736944
   888b0:	0079616c 	.word	0x0079616c
   888b4:	74736574 	.word	0x74736574
   888b8:	6972775f 	.word	0x6972775f
   888bc:	676e6974 	.word	0x676e6974
   888c0:	69637341 	.word	0x69637341
   888c4:	72745369 	.word	0x72745369
   888c8:	4f676e69 	.word	0x4f676e69
   888cc:	6568546e 	.word	0x6568546e
   888d0:	4444434c 	.word	0x4444434c
   888d4:	6c707369 	.word	0x6c707369
   888d8:	00007961 	.word	0x00007961
   888dc:	74736574 	.word	0x74736574
   888e0:	6972775f 	.word	0x6972775f
   888e4:	676e6974 	.word	0x676e6974
   888e8:	74747542 	.word	0x74747542
   888ec:	6e4f6e6f 	.word	0x6e4f6e6f
   888f0:	4c656854 	.word	0x4c656854
   888f4:	69444443 	.word	0x69444443
   888f8:	616c7073 	.word	0x616c7073
   888fc:	00000079 	.word	0x00000079
   88900:	20434d50 	.word	0x20434d50
   88904:	20736168 	.word	0x20736168
   88908:	20746f6e 	.word	0x20746f6e
   8890c:	62616e65 	.word	0x62616e65
   88910:	2064656c 	.word	0x2064656c
   88914:	20656874 	.word	0x20656874
   88918:	69726570 	.word	0x69726570
   8891c:	72656870 	.word	0x72656870
   88920:	41206c61 	.word	0x41206c61
   88924:	63204344 	.word	0x63204344
   88928:	6b636f6c 	.word	0x6b636f6c
   8892c:	00000000 	.word	0x00000000
   88930:	20434441 	.word	0x20434441
   88934:	6e616863 	.word	0x6e616863
   88938:	206c656e 	.word	0x206c656e
   8893c:	73692037 	.word	0x73692037
   88940:	746f6e20 	.word	0x746f6e20
   88944:	616e6520 	.word	0x616e6520
   88948:	64656c62 	.word	0x64656c62
   8894c:	00000000 	.word	0x00000000
   88950:	70784520 	.word	0x70784520
   88954:	65746365 	.word	0x65746365
   88958:	52542064 	.word	0x52542064
   8895c:	57204555 	.word	0x57204555
   88960:	46207361 	.word	0x46207361
   88964:	45534c41 	.word	0x45534c41
   88968:	00000000 	.word	0x00000000
   8896c:	70784520 	.word	0x70784520
   88970:	65746365 	.word	0x65746365
   88974:	41462064 	.word	0x41462064
   88978:	2045534c 	.word	0x2045534c
   8897c:	20736157 	.word	0x20736157
   88980:	45555254 	.word	0x45555254
   88984:	00000000 	.word	0x00000000
   88988:	74736554 	.word	0x74736554
   8898c:	65766520 	.word	0x65766520
   88990:	68747972 	.word	0x68747972
   88994:	21676e69 	.word	0x21676e69
   88998:	00000000 	.word	0x00000000

0008899c <p_PIOC_ODSR>:
   8899c:	400e1238                                8..@

000889a0 <UnitySizeMask>:
   889a0:	000000ff 0000ffff 0000ffff ffffffff     ................
   889b0:	ffffffff ffffffff ffffffff              ............

000889bc <UnityStrBreaker>:
   889bc:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   889cc:	2d2d2d2d 002d2d2d                       -------.

000889d4 <UnityStrDelta>:
   889d4:	6c615620 20736575 20746f4e 68746957      Values Not With
   889e4:	44206e69 61746c65 00000020              in Delta ...

000889f0 <UnityStrExpected>:
   889f0:	70784520 65746365 00002064               Expected ..

000889fc <UnityStrFail>:
   889fc:	4c494146 00000000                       FAIL....

00088a04 <UnityStrOk>:
   88a04:	00004b4f                                OK..

00088a08 <UnityStrPass>:
   88a08:	53534150 00000000                       PASS....

00088a10 <UnityStrResultsFailures>:
   88a10:	69614620 6572756c 00002073               Failures ..

00088a1c <UnityStrResultsIgnored>:
   88a1c:	6e674920 6465726f 00000020               Ignored ...

00088a28 <UnityStrResultsTests>:
   88a28:	73655420 00207374                        Tests .

00088a30 <UnityStrSpacer>:
   88a30:	0000202e                                . ..

00088a34 <UnityStrWas>:
   88a34:	73615720 00000020                        Was ...

00088a3c <_global_impure_ptr>:
   88a3c:	20070138 00464e49 00666e69 004e414e     8.. INF.inf.NAN.
   88a4c:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   88a5c:	46454443 00000000 33323130 37363534     CDEF....01234567
   88a6c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   88a7c:	0000296c 00000030                       l)..0...

00088a84 <blanks.7223>:
   88a84:	20202020 20202020 20202020 20202020                     

00088a94 <zeroes.7224>:
   88a94:	30303030 30303030 30303030 30303030     0000000000000000

00088aa4 <blanks.7217>:
   88aa4:	20202020 20202020 20202020 20202020                     

00088ab4 <zeroes.7218>:
   88ab4:	30303030 30303030 30303030 30303030     0000000000000000
   88ac4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   88ad4:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   88ae4:	00000000                                ....

00088ae8 <__mprec_bigtens>:
   88ae8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   88af8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   88b08:	7f73bf3c 75154fdd                       <.s..O.u

00088b10 <__mprec_tens>:
   88b10:	00000000 3ff00000 00000000 40240000     .......?......$@
   88b20:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   88b30:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   88b40:	00000000 412e8480 00000000 416312d0     .......A......cA
   88b50:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   88b60:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   88b70:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   88b80:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   88b90:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   88ba0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   88bb0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   88bc0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   88bd0:	79d99db4 44ea7843                       ...yCx.D

00088bd8 <p05.6055>:
   88bd8:	00000005 00000019 0000007d              ........}...

00088be4 <_ctype_>:
   88be4:	20202000 20202020 28282020 20282828     .         ((((( 
   88bf4:	20202020 20202020 20202020 20202020                     
   88c04:	10108820 10101010 10101010 10101010      ...............
   88c14:	04040410 04040404 10040404 10101010     ................
   88c24:	41411010 41414141 01010101 01010101     ..AAAAAA........
   88c34:	01010101 01010101 01010101 10101010     ................
   88c44:	42421010 42424242 02020202 02020202     ..BBBBBB........
   88c54:	02020202 02020202 02020202 10101010     ................
   88c64:	00000020 00000000 00000000 00000000      ...............
	...

00088ce8 <_init>:
   88ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88cea:	bf00      	nop
   88cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   88cee:	bc08      	pop	{r3}
   88cf0:	469e      	mov	lr, r3
   88cf2:	4770      	bx	lr

00088cf4 <__init_array_start>:
   88cf4:	00084a31 	.word	0x00084a31

00088cf8 <__frame_dummy_init_array_entry>:
   88cf8:	00080119                                ....

00088cfc <_fini>:
   88cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88cfe:	bf00      	nop
   88d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
   88d02:	bc08      	pop	{r3}
   88d04:	469e      	mov	lr, r3
   88d06:	4770      	bx	lr

00088d08 <__fini_array_start>:
   88d08:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900                                ..=.

20070134 <_impure_ptr>:
20070134:	20070138                                8.. 

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	20070ccc                                ... 

20070564 <__global_locale>:
20070564:	00000043 00000000 00000000 00000000     C...............
	...
20070584:	00000043 00000000 00000000 00000000     C...............
	...
200705a4:	00000043 00000000 00000000 00000000     C...............
	...
200705c4:	00000043 00000000 00000000 00000000     C...............
	...
200705e4:	00000043 00000000 00000000 00000000     C...............
	...
20070604:	00000043 00000000 00000000 00000000     C...............
	...
20070624:	00000043 00000000 00000000 00000000     C...............
	...
20070644:	00087771 0008698d 00000000 00088be4     qw...i..........
20070654:	00088ae0 00088998 00088998 00088998     ................
20070664:	00088998 00088998 00088998 00088998     ................
20070674:	00088998 00088998 ffffffff ffffffff     ................
20070684:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706ac:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706d0 <__malloc_av_>:
	...
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 

20070ad8 <__malloc_sbrk_base>:
20070ad8:	ffffffff                                ....

20070adc <__malloc_trim_threshold>:
20070adc:	00020000                                ....
