
ProjectISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d48  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000059c  20070000  00080d48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000b4  2007059c  000812e4  0002059c  2**2
                  ALLOC
  3 .stack        00002000  20070650  00081398  0002059c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0002059c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000205c5  2**0
                  CONTENTS, READONLY
  6 .debug_info   00011464  00000000  00000000  0002061e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000283a  00000000  00000000  00031a82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000028f9  00000000  00000000  000342bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006e0  00000000  00000000  00036bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000628  00000000  00000000  00037295  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000076ad  00000000  00000000  000378bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d6b5  00000000  00000000  0003ef6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00062293  00000000  00000000  0004c61f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000ef4  00000000  00000000  000ae8b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	50 26 07 20 5d 09 08 00 59 09 08 00 59 09 08 00     P&. ]...Y...Y...
   80010:	59 09 08 00 59 09 08 00 59 09 08 00 00 00 00 00     Y...Y...Y.......
	...
   8002c:	59 09 08 00 59 09 08 00 00 00 00 00 59 09 08 00     Y...Y.......Y...
   8003c:	59 09 08 00 59 09 08 00 59 09 08 00 59 09 08 00     Y...Y...Y...Y...
   8004c:	59 09 08 00 59 09 08 00 59 09 08 00 59 09 08 00     Y...Y...Y...Y...
   8005c:	59 09 08 00 59 09 08 00 59 09 08 00 00 00 00 00     Y...Y...Y.......
   8006c:	cd 07 08 00 e1 07 08 00 f5 07 08 00 09 08 08 00     ................
	...
   80084:	59 09 08 00 59 09 08 00 59 09 08 00 59 09 08 00     Y...Y...Y...Y...
   80094:	59 09 08 00 59 09 08 00 59 09 08 00 59 09 08 00     Y...Y...Y...Y...
   800a4:	00 00 00 00 59 09 08 00 59 09 08 00 59 09 08 00     ....Y...Y...Y...
   800b4:	59 09 08 00 b1 02 08 00 59 09 08 00 59 09 08 00     Y.......Y...Y...
   800c4:	59 09 08 00 59 09 08 00 59 09 08 00 59 09 08 00     Y...Y...Y...Y...
   800d4:	59 09 08 00 59 09 08 00 59 09 08 00 59 09 08 00     Y...Y...Y...Y...
   800e4:	59 09 08 00 59 09 08 00 59 09 08 00 59 09 08 00     Y...Y...Y...Y...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007059c 	.word	0x2007059c
   80110:	00000000 	.word	0x00000000
   80114:	00080d48 	.word	0x00080d48

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080d48 	.word	0x00080d48
   80154:	200705a0 	.word	0x200705a0
   80158:	00080d48 	.word	0x00080d48
   8015c:	00000000 	.word	0x00000000

00080160 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
   80160:	2301      	movs	r3, #1
   80162:	6003      	str	r3, [r0, #0]
   80164:	4770      	bx	lr

00080166 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
   80166:	b929      	cbnz	r1, 80174 <dacc_set_transfer_mode+0xe>
		p_dacc->DACC_MR |= DACC_MR_ONE;
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
		p_dacc->DACC_MR = ul_mode;
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
   80168:	6843      	ldr	r3, [r0, #4]
   8016a:	f023 0310 	bic.w	r3, r3, #16
   8016e:	6043      	str	r3, [r0, #4]
#endif
	}
	return DACC_RC_OK;
}
   80170:	2000      	movs	r0, #0
   80172:	4770      	bx	lr
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
   80174:	6843      	ldr	r3, [r0, #4]
   80176:	f043 0310 	orr.w	r3, r3, #16
   8017a:	6043      	str	r3, [r0, #4]
   8017c:	e7f8      	b.n	80170 <dacc_set_transfer_mode+0xa>

0008017e <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
   8017e:	6201      	str	r1, [r0, #32]
   80180:	4770      	bx	lr

00080182 <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
   80182:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
   80184:	2901      	cmp	r1, #1
   80186:	d901      	bls.n	8018c <dacc_set_channel_selection+0xa>
		return DACC_RC_INVALID_PARAM;
   80188:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
   8018a:	4770      	bx	lr
	mr &= ~(DACC_MR_TAG);
   8018c:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
   80190:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
   80194:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
   80196:	2000      	movs	r0, #0
   80198:	4770      	bx	lr

0008019a <dacc_set_timing>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		uint32_t ul_refresh, uint32_t ul_maxs, uint32_t ul_startup)
{
   8019a:	b410      	push	{r4}
	uint32_t mr = p_dacc->DACC_MR
   8019c:	6844      	ldr	r4, [r0, #4]
   8019e:	f024 547c 	bic.w	r4, r4, #1056964608	; 0x3f000000
   801a2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
	& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	mr |= DACC_MR_REFRESH(ul_refresh);
   801a6:	0209      	lsls	r1, r1, #8
   801a8:	b289      	uxth	r1, r1
   801aa:	4321      	orrs	r1, r4
	if (ul_maxs) {
   801ac:	b94a      	cbnz	r2, 801c2 <dacc_set_timing+0x28>
		mr |= DACC_MR_MAXS;
		} else {
		mr &= ~DACC_MR_MAXS;
   801ae:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
   801b2:	061b      	lsls	r3, r3, #24
   801b4:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
   801b8:	430b      	orrs	r3, r1

	p_dacc->DACC_MR = mr;
   801ba:	6043      	str	r3, [r0, #4]
	return DACC_RC_OK;
}
   801bc:	2000      	movs	r0, #0
   801be:	bc10      	pop	{r4}
   801c0:	4770      	bx	lr
		mr |= DACC_MR_MAXS;
   801c2:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
   801c6:	e7f4      	b.n	801b2 <dacc_set_timing+0x18>

000801c8 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
   801c8:	2901      	cmp	r1, #1
   801ca:	d901      	bls.n	801d0 <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
   801cc:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
   801ce:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
   801d0:	2301      	movs	r3, #1
   801d2:	fa03 f101 	lsl.w	r1, r3, r1
   801d6:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
   801d8:	2000      	movs	r0, #0
   801da:	4770      	bx	lr

000801dc <configure_tc>:
volatile uint8_t next = 0;
int value[] = {1700, 2021, 2293, 2476, 2690, 2476, 2293, 2021, 1700, 1378, 1105, 923, 860, 920, 1105, 1378};
int freq = 970205 % 1999 + 991;

void configure_tc(void)
{
   801dc:	b570      	push	{r4, r5, r6, lr}
   801de:	b084      	sub	sp, #16
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();
	/* Configure power management of timer clocks */
	pmc_enable_periph_clk(ID_TC3);
   801e0:	201e      	movs	r0, #30
   801e2:	4d1f      	ldr	r5, [pc, #124]	; (80260 <configure_tc+0x84>)
   801e4:	47a8      	blx	r5
	/* Configure TC for a 44,1kHz frequency and trigger
	on RC compare. */
	tc_find_mck_divisor(1681, ul_sysclk, &ul_div,
   801e6:	4c1f      	ldr	r4, [pc, #124]	; (80264 <configure_tc+0x88>)
   801e8:	9400      	str	r4, [sp, #0]
   801ea:	ab02      	add	r3, sp, #8
   801ec:	aa03      	add	r2, sp, #12
   801ee:	4621      	mov	r1, r4
   801f0:	f240 6091 	movw	r0, #1681	; 0x691
   801f4:	4e1c      	ldr	r6, [pc, #112]	; (80268 <configure_tc+0x8c>)
   801f6:	47b0      	blx	r6
	&ul_tcclks, ul_sysclk);
	tc_init(TC1, 0, ul_tcclks | TC_CMR_CPCTRG);
   801f8:	4e1c      	ldr	r6, [pc, #112]	; (8026c <configure_tc+0x90>)
   801fa:	9a02      	ldr	r2, [sp, #8]
   801fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80200:	2100      	movs	r1, #0
   80202:	4630      	mov	r0, r6
   80204:	4b1a      	ldr	r3, [pc, #104]	; (80270 <configure_tc+0x94>)
   80206:	4798      	blx	r3
	tc_write_rc(TC1, 0, (ul_sysclk / ul_div) / 1681);
   80208:	9a03      	ldr	r2, [sp, #12]
   8020a:	fbb4 f4f2 	udiv	r4, r4, r2
   8020e:	4a19      	ldr	r2, [pc, #100]	; (80274 <configure_tc+0x98>)
   80210:	fba2 3204 	umull	r3, r2, r2, r4
   80214:	1aa4      	subs	r4, r4, r2
   80216:	eb02 0254 	add.w	r2, r2, r4, lsr #1
   8021a:	0a92      	lsrs	r2, r2, #10
   8021c:	2100      	movs	r1, #0
   8021e:	4630      	mov	r0, r6
   80220:	4b15      	ldr	r3, [pc, #84]	; (80278 <configure_tc+0x9c>)
   80222:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80224:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   80228:	4b14      	ldr	r3, [pc, #80]	; (8027c <configure_tc+0xa0>)
   8022a:	601a      	str	r2, [r3, #0]
	/* Configure and enable interrupt on RC compare */
	NVIC_EnableIRQ(TC3_IRQn);
	tc_enable_interrupt(TC1, 0, TC_IER_CPCS);
   8022c:	2210      	movs	r2, #16
   8022e:	2100      	movs	r1, #0
   80230:	4630      	mov	r0, r6
   80232:	4b13      	ldr	r3, [pc, #76]	; (80280 <configure_tc+0xa4>)
   80234:	4798      	blx	r3
	tc_start(TC1, 0);
   80236:	2100      	movs	r1, #0
   80238:	4630      	mov	r0, r6
   8023a:	4b12      	ldr	r3, [pc, #72]	; (80284 <configure_tc+0xa8>)
   8023c:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8023e:	200b      	movs	r0, #11
   80240:	47a8      	blx	r5
   80242:	200c      	movs	r0, #12
   80244:	47a8      	blx	r5
   80246:	200d      	movs	r0, #13
   80248:	47a8      	blx	r5
   8024a:	200e      	movs	r0, #14
   8024c:	47a8      	blx	r5
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8024e:	4b0e      	ldr	r3, [pc, #56]	; (80288 <configure_tc+0xac>)
   80250:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80254:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80256:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_init();
	ioport_set_pin_dir(p22, IOPORT_DIR_OUTPUT);
}
   8025a:	b004      	add	sp, #16
   8025c:	bd70      	pop	{r4, r5, r6, pc}
   8025e:	bf00      	nop
   80260:	00080905 	.word	0x00080905
   80264:	0501bd00 	.word	0x0501bd00
   80268:	0008033b 	.word	0x0008033b
   8026c:	40084000 	.word	0x40084000
   80270:	000802ed 	.word	0x000802ed
   80274:	37e3fa85 	.word	0x37e3fa85
   80278:	00080323 	.word	0x00080323
   8027c:	e000e100 	.word	0xe000e100
   80280:	0008032b 	.word	0x0008032b
   80284:	0008030b 	.word	0x0008030b
   80288:	400e1000 	.word	0x400e1000

0008028c <nextval>:

uint32_t nextval(){
	next = ++next % 16;
   8028c:	4a06      	ldr	r2, [pc, #24]	; (802a8 <nextval+0x1c>)
   8028e:	7813      	ldrb	r3, [r2, #0]
   80290:	3301      	adds	r3, #1
   80292:	b2db      	uxtb	r3, r3
   80294:	7013      	strb	r3, [r2, #0]
   80296:	f003 030f 	and.w	r3, r3, #15
   8029a:	7013      	strb	r3, [r2, #0]
	return(uint32_t)value[next];
   8029c:	7812      	ldrb	r2, [r2, #0]
}
   8029e:	4b03      	ldr	r3, [pc, #12]	; (802ac <nextval+0x20>)
   802a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   802a4:	4770      	bx	lr
   802a6:	bf00      	nop
   802a8:	200705b8 	.word	0x200705b8
   802ac:	2007012c 	.word	0x2007012c

000802b0 <TC3_Handler>:

void TC3_Handler() {
   802b0:	b538      	push	{r3, r4, r5, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   802b2:	4c08      	ldr	r4, [pc, #32]	; (802d4 <TC3_Handler+0x24>)
   802b4:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   802b8:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(p22, true);
	tc_get_status(TC1, 0);
   802ba:	2100      	movs	r1, #0
   802bc:	4806      	ldr	r0, [pc, #24]	; (802d8 <TC3_Handler+0x28>)
   802be:	4b07      	ldr	r3, [pc, #28]	; (802dc <TC3_Handler+0x2c>)
   802c0:	4798      	blx	r3
	uint32_t value = nextval();
   802c2:	4b07      	ldr	r3, [pc, #28]	; (802e0 <TC3_Handler+0x30>)
   802c4:	4798      	blx	r3
	dacc_write_conversion_data(DACC, value);
   802c6:	4601      	mov	r1, r0
   802c8:	4806      	ldr	r0, [pc, #24]	; (802e4 <TC3_Handler+0x34>)
   802ca:	4b07      	ldr	r3, [pc, #28]	; (802e8 <TC3_Handler+0x38>)
   802cc:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   802ce:	6365      	str	r5, [r4, #52]	; 0x34
   802d0:	bd38      	pop	{r3, r4, r5, pc}
   802d2:	bf00      	nop
   802d4:	400e1000 	.word	0x400e1000
   802d8:	40084000 	.word	0x40084000
   802dc:	00080333 	.word	0x00080333
   802e0:	0008028d 	.word	0x0008028d
   802e4:	400c8000 	.word	0x400c8000
   802e8:	0008017f 	.word	0x0008017f

000802ec <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   802ec:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   802ee:	0189      	lsls	r1, r1, #6
   802f0:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   802f2:	2402      	movs	r4, #2
   802f4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   802f6:	f04f 31ff 	mov.w	r1, #4294967295
   802fa:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   802fc:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   802fe:	605a      	str	r2, [r3, #4]
}
   80300:	bc10      	pop	{r4}
   80302:	4770      	bx	lr

00080304 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   80304:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   80308:	4770      	bx	lr

0008030a <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   8030a:	0189      	lsls	r1, r1, #6
   8030c:	2305      	movs	r3, #5
   8030e:	5043      	str	r3, [r0, r1]
   80310:	4770      	bx	lr

00080312 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   80312:	0189      	lsls	r1, r1, #6
   80314:	2302      	movs	r3, #2
   80316:	5043      	str	r3, [r0, r1]
   80318:	4770      	bx	lr

0008031a <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   8031a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   8031e:	6908      	ldr	r0, [r1, #16]
}
   80320:	4770      	bx	lr

00080322 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   80322:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80326:	61ca      	str	r2, [r1, #28]
   80328:	4770      	bx	lr

0008032a <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8032a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   8032e:	624a      	str	r2, [r1, #36]	; 0x24
   80330:	4770      	bx	lr

00080332 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80332:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   80336:	6a08      	ldr	r0, [r1, #32]
}
   80338:	4770      	bx	lr

0008033a <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
   8033a:	b4f0      	push	{r4, r5, r6, r7}
   8033c:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   8033e:	2402      	movs	r4, #2
   80340:	9401      	str	r4, [sp, #4]
   80342:	2408      	movs	r4, #8
   80344:	9402      	str	r4, [sp, #8]
   80346:	2420      	movs	r4, #32
   80348:	9403      	str	r4, [sp, #12]
   8034a:	2480      	movs	r4, #128	; 0x80
   8034c:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
   8034e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   80350:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   80352:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
   80354:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
   80358:	d814      	bhi.n	80384 <tc_find_mck_divisor+0x4a>
   8035a:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
   8035c:	42a0      	cmp	r0, r4
   8035e:	d217      	bcs.n	80390 <tc_find_mck_divisor+0x56>
   80360:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
   80362:	af01      	add	r7, sp, #4
   80364:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
   80368:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
   8036c:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
   8036e:	4284      	cmp	r4, r0
   80370:	d30a      	bcc.n	80388 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
   80372:	4286      	cmp	r6, r0
   80374:	d90d      	bls.n	80392 <tc_find_mck_divisor+0x58>
			ul_index++) {
   80376:	3501      	adds	r5, #1
	for (ul_index = 0;
   80378:	2d05      	cmp	r5, #5
   8037a:	d1f3      	bne.n	80364 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
   8037c:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
   8037e:	b006      	add	sp, #24
   80380:	bcf0      	pop	{r4, r5, r6, r7}
   80382:	4770      	bx	lr
			return 0;
   80384:	2000      	movs	r0, #0
   80386:	e7fa      	b.n	8037e <tc_find_mck_divisor+0x44>
   80388:	2000      	movs	r0, #0
   8038a:	e7f8      	b.n	8037e <tc_find_mck_divisor+0x44>
	return 1;
   8038c:	2001      	movs	r0, #1
   8038e:	e7f6      	b.n	8037e <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
   80390:	2500      	movs	r5, #0
	if (p_uldiv) {
   80392:	b12a      	cbz	r2, 803a0 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
   80394:	a906      	add	r1, sp, #24
   80396:	eb01 0185 	add.w	r1, r1, r5, lsl #2
   8039a:	f851 1c14 	ldr.w	r1, [r1, #-20]
   8039e:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
   803a0:	2b00      	cmp	r3, #0
   803a2:	d0f3      	beq.n	8038c <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
   803a4:	601d      	str	r5, [r3, #0]
	return 1;
   803a6:	2001      	movs	r0, #1
   803a8:	e7e9      	b.n	8037e <tc_find_mck_divisor+0x44>
	...

000803ac <daccInit>:
#include <asf.h>
#include "daccinit.h"


int daccInit()
{
   803ac:	b538      	push	{r3, r4, r5, lr}
	int allOK = 1;
	pmc_enable_periph_clk(ID_DACC); /* DACC clock should
   803ae:	2026      	movs	r0, #38	; 0x26
   803b0:	4b0c      	ldr	r3, [pc, #48]	; (803e4 <daccInit+0x38>)
   803b2:	4798      	blx	r3
	be enabled before using it. */
	dacc_reset(DACC); /* Reset DACC */
   803b4:	4c0c      	ldr	r4, [pc, #48]	; (803e8 <daccInit+0x3c>)
   803b6:	4620      	mov	r0, r4
   803b8:	4b0c      	ldr	r3, [pc, #48]	; (803ec <daccInit+0x40>)
   803ba:	4798      	blx	r3
	dacc_set_transfer_mode(DACC, 0); /* Configure FIFO
   803bc:	2100      	movs	r1, #0
   803be:	4620      	mov	r0, r4
   803c0:	4b0b      	ldr	r3, [pc, #44]	; (803f0 <daccInit+0x44>)
   803c2:	4798      	blx	r3
	transfer mode */
	dacc_set_timing(DACC,1,1,0); /* 1 is shortest refresh
   803c4:	2300      	movs	r3, #0
   803c6:	2201      	movs	r2, #1
   803c8:	4611      	mov	r1, r2
   803ca:	4620      	mov	r0, r4
   803cc:	4d09      	ldr	r5, [pc, #36]	; (803f4 <daccInit+0x48>)
   803ce:	47a8      	blx	r5
	period, 1 max. speed, 0 startup time */
	dacc_set_channel_selection(DACC,1); /* Disable
   803d0:	2101      	movs	r1, #1
   803d2:	4620      	mov	r0, r4
   803d4:	4b08      	ldr	r3, [pc, #32]	; (803f8 <daccInit+0x4c>)
   803d6:	4798      	blx	r3
	flexible (TAG) mode and select channel 0 for DAC
	output */
	allOK = dacc_enable_channel(DACC, 1); /* Enable DAC
   803d8:	2101      	movs	r1, #1
   803da:	4620      	mov	r0, r4
   803dc:	4b07      	ldr	r3, [pc, #28]	; (803fc <daccInit+0x50>)
   803de:	4798      	blx	r3
	channel 0 */
	return allOK;
   803e0:	bd38      	pop	{r3, r4, r5, pc}
   803e2:	bf00      	nop
   803e4:	00080905 	.word	0x00080905
   803e8:	400c8000 	.word	0x400c8000
   803ec:	00080161 	.word	0x00080161
   803f0:	00080167 	.word	0x00080167
   803f4:	0008019b 	.word	0x0008019b
   803f8:	00080183 	.word	0x00080183
   803fc:	000801c9 	.word	0x000801c9

00080400 <watchdogReload>:
#include <stdlib.h>
#include <stdio.h>


int watchdogReload(void){
	WDT->WDT_CR |= ((0xA5 << 24) + 0x1);
   80400:	4a03      	ldr	r2, [pc, #12]	; (80410 <watchdogReload+0x10>)
   80402:	6813      	ldr	r3, [r2, #0]
   80404:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80408:	f043 0301 	orr.w	r3, r3, #1
   8040c:	6013      	str	r3, [r2, #0]
   8040e:	4770      	bx	lr
   80410:	400e1a50 	.word	0x400e1a50

00080414 <delayInit>:

#include <asf.h>
#include "DelayFunctions.h"

void delayInit(void)		/* Initializes the timer used for delays */
{
   80414:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);
   80416:	201b      	movs	r0, #27
   80418:	4b08      	ldr	r3, [pc, #32]	; (8043c <delayInit+0x28>)
   8041a:	4798      	blx	r3
	tc_init(TC0,0,0);		 /* TC0, channel 0, TCLK1 och capturemode */
   8041c:	4c08      	ldr	r4, [pc, #32]	; (80440 <delayInit+0x2c>)
   8041e:	2200      	movs	r2, #0
   80420:	4611      	mov	r1, r2
   80422:	4620      	mov	r0, r4
   80424:	4b07      	ldr	r3, [pc, #28]	; (80444 <delayInit+0x30>)
   80426:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   80428:	2100      	movs	r1, #0
   8042a:	4620      	mov	r0, r4
   8042c:	4b06      	ldr	r3, [pc, #24]	; (80448 <delayInit+0x34>)
   8042e:	4798      	blx	r3
	tc_stop(TC0,0);			/* making sure the timer does not run  */
   80430:	2100      	movs	r1, #0
   80432:	4620      	mov	r0, r4
   80434:	4b05      	ldr	r3, [pc, #20]	; (8044c <delayInit+0x38>)
   80436:	4798      	blx	r3
   80438:	bd10      	pop	{r4, pc}
   8043a:	bf00      	nop
   8043c:	00080905 	.word	0x00080905
   80440:	40080000 	.word	0x40080000
   80444:	000802ed 	.word	0x000802ed
   80448:	00080305 	.word	0x00080305
   8044c:	00080313 	.word	0x00080313

00080450 <delayMicroseconds>:
}


void delayMicroseconds(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   80450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80452:	4605      	mov	r5, r0
	tc_start(TC0,0);
   80454:	2100      	movs	r1, #0
   80456:	4809      	ldr	r0, [pc, #36]	; (8047c <delayMicroseconds+0x2c>)
   80458:	4b09      	ldr	r3, [pc, #36]	; (80480 <delayMicroseconds+0x30>)
   8045a:	4798      	blx	r3
	while (tc_read_cv(TC0,0) < us*42); /* Only works in newere version of ASF */
   8045c:	242a      	movs	r4, #42	; 0x2a
   8045e:	fb04 f405 	mul.w	r4, r4, r5
   80462:	4f06      	ldr	r7, [pc, #24]	; (8047c <delayMicroseconds+0x2c>)
   80464:	2600      	movs	r6, #0
   80466:	4d07      	ldr	r5, [pc, #28]	; (80484 <delayMicroseconds+0x34>)
   80468:	4631      	mov	r1, r6
   8046a:	4638      	mov	r0, r7
   8046c:	47a8      	blx	r5
   8046e:	42a0      	cmp	r0, r4
   80470:	d3fa      	bcc.n	80468 <delayMicroseconds+0x18>
	tc_stop(TC0,0);
   80472:	2100      	movs	r1, #0
   80474:	4801      	ldr	r0, [pc, #4]	; (8047c <delayMicroseconds+0x2c>)
   80476:	4b04      	ldr	r3, [pc, #16]	; (80488 <delayMicroseconds+0x38>)
   80478:	4798      	blx	r3
   8047a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8047c:	40080000 	.word	0x40080000
   80480:	0008030b 	.word	0x0008030b
   80484:	0008031b 	.word	0x0008031b
   80488:	00080313 	.word	0x00080313

0008048c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8048c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8048e:	480e      	ldr	r0, [pc, #56]	; (804c8 <sysclk_init+0x3c>)
   80490:	4b0e      	ldr	r3, [pc, #56]	; (804cc <sysclk_init+0x40>)
   80492:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80494:	213e      	movs	r1, #62	; 0x3e
   80496:	2000      	movs	r0, #0
   80498:	4b0d      	ldr	r3, [pc, #52]	; (804d0 <sysclk_init+0x44>)
   8049a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8049c:	4c0d      	ldr	r4, [pc, #52]	; (804d4 <sysclk_init+0x48>)
   8049e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   804a0:	2800      	cmp	r0, #0
   804a2:	d0fc      	beq.n	8049e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   804a4:	4b0c      	ldr	r3, [pc, #48]	; (804d8 <sysclk_init+0x4c>)
   804a6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   804a8:	4a0c      	ldr	r2, [pc, #48]	; (804dc <sysclk_init+0x50>)
   804aa:	4b0d      	ldr	r3, [pc, #52]	; (804e0 <sysclk_init+0x54>)
   804ac:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   804ae:	4c0d      	ldr	r4, [pc, #52]	; (804e4 <sysclk_init+0x58>)
   804b0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   804b2:	2800      	cmp	r0, #0
   804b4:	d0fc      	beq.n	804b0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   804b6:	2010      	movs	r0, #16
   804b8:	4b0b      	ldr	r3, [pc, #44]	; (804e8 <sysclk_init+0x5c>)
   804ba:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   804bc:	4b0b      	ldr	r3, [pc, #44]	; (804ec <sysclk_init+0x60>)
   804be:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   804c0:	4801      	ldr	r0, [pc, #4]	; (804c8 <sysclk_init+0x3c>)
   804c2:	4b02      	ldr	r3, [pc, #8]	; (804cc <sysclk_init+0x40>)
   804c4:	4798      	blx	r3
   804c6:	bd10      	pop	{r4, pc}
   804c8:	0501bd00 	.word	0x0501bd00
   804cc:	200700a5 	.word	0x200700a5
   804d0:	00080881 	.word	0x00080881
   804d4:	000808d5 	.word	0x000808d5
   804d8:	000808e5 	.word	0x000808e5
   804dc:	200d3f01 	.word	0x200d3f01
   804e0:	400e0600 	.word	0x400e0600
   804e4:	000808f5 	.word	0x000808f5
   804e8:	0008081d 	.word	0x0008081d
   804ec:	000809f5 	.word	0x000809f5

000804f0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   804f0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   804f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804f6:	4b17      	ldr	r3, [pc, #92]	; (80554 <board_init+0x64>)
   804f8:	605a      	str	r2, [r3, #4]
   804fa:	200b      	movs	r0, #11
   804fc:	4c16      	ldr	r4, [pc, #88]	; (80558 <board_init+0x68>)
   804fe:	47a0      	blx	r4
   80500:	200c      	movs	r0, #12
   80502:	47a0      	blx	r4
   80504:	200d      	movs	r0, #13
   80506:	47a0      	blx	r4
   80508:	200e      	movs	r0, #14
   8050a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8050c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80510:	203b      	movs	r0, #59	; 0x3b
   80512:	4c12      	ldr	r4, [pc, #72]	; (8055c <board_init+0x6c>)
   80514:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80516:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8051a:	2055      	movs	r0, #85	; 0x55
   8051c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8051e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80522:	2056      	movs	r0, #86	; 0x56
   80524:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80526:	490e      	ldr	r1, [pc, #56]	; (80560 <board_init+0x70>)
   80528:	2068      	movs	r0, #104	; 0x68
   8052a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8052c:	490d      	ldr	r1, [pc, #52]	; (80564 <board_init+0x74>)
   8052e:	205c      	movs	r0, #92	; 0x5c
   80530:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80532:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80536:	f44f 7140 	mov.w	r1, #768	; 0x300
   8053a:	480b      	ldr	r0, [pc, #44]	; (80568 <board_init+0x78>)
   8053c:	4b0b      	ldr	r3, [pc, #44]	; (8056c <board_init+0x7c>)
   8053e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80540:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80544:	202b      	movs	r0, #43	; 0x2b
   80546:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80548:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8054c:	202a      	movs	r0, #42	; 0x2a
   8054e:	47a0      	blx	r4
   80550:	bd10      	pop	{r4, pc}
   80552:	bf00      	nop
   80554:	400e1a50 	.word	0x400e1a50
   80558:	00080905 	.word	0x00080905
   8055c:	00080611 	.word	0x00080611
   80560:	28000079 	.word	0x28000079
   80564:	28000001 	.word	0x28000001
   80568:	400e0e00 	.word	0x400e0e00
   8056c:	000806e1 	.word	0x000806e1

00080570 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80570:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80572:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80576:	d016      	beq.n	805a6 <pio_set_peripheral+0x36>
   80578:	d80b      	bhi.n	80592 <pio_set_peripheral+0x22>
   8057a:	b149      	cbz	r1, 80590 <pio_set_peripheral+0x20>
   8057c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80580:	d105      	bne.n	8058e <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80582:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80584:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80586:	400b      	ands	r3, r1
   80588:	ea23 0302 	bic.w	r3, r3, r2
   8058c:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8058e:	6042      	str	r2, [r0, #4]
   80590:	4770      	bx	lr
	switch (ul_type) {
   80592:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80596:	d0fb      	beq.n	80590 <pio_set_peripheral+0x20>
   80598:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8059c:	d0f8      	beq.n	80590 <pio_set_peripheral+0x20>
   8059e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   805a2:	d1f4      	bne.n	8058e <pio_set_peripheral+0x1e>
   805a4:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   805a6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   805a8:	4313      	orrs	r3, r2
   805aa:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   805ac:	e7ef      	b.n	8058e <pio_set_peripheral+0x1e>

000805ae <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   805ae:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   805b0:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   805b4:	bf14      	ite	ne
   805b6:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   805b8:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   805ba:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   805be:	bf14      	ite	ne
   805c0:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   805c2:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   805c4:	f012 0f02 	tst.w	r2, #2
   805c8:	d107      	bne.n	805da <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   805ca:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   805ce:	bf18      	it	ne
   805d0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   805d4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   805d6:	6001      	str	r1, [r0, #0]
   805d8:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   805da:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   805de:	e7f9      	b.n	805d4 <pio_set_input+0x26>

000805e0 <pio_set_output>:
{
   805e0:	b410      	push	{r4}
   805e2:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   805e4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   805e6:	b944      	cbnz	r4, 805fa <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   805e8:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   805ea:	b143      	cbz	r3, 805fe <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   805ec:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   805ee:	b942      	cbnz	r2, 80602 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   805f0:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   805f2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   805f4:	6001      	str	r1, [r0, #0]
}
   805f6:	bc10      	pop	{r4}
   805f8:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   805fa:	6641      	str	r1, [r0, #100]	; 0x64
   805fc:	e7f5      	b.n	805ea <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   805fe:	6541      	str	r1, [r0, #84]	; 0x54
   80600:	e7f5      	b.n	805ee <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80602:	6301      	str	r1, [r0, #48]	; 0x30
   80604:	e7f5      	b.n	805f2 <pio_set_output+0x12>

00080606 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80606:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80608:	4770      	bx	lr

0008060a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8060a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8060c:	4770      	bx	lr
	...

00080610 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80610:	b570      	push	{r4, r5, r6, lr}
   80612:	b082      	sub	sp, #8
   80614:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80616:	0943      	lsrs	r3, r0, #5
   80618:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8061c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80620:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80622:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80626:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8062a:	d031      	beq.n	80690 <pio_configure_pin+0x80>
   8062c:	d816      	bhi.n	8065c <pio_configure_pin+0x4c>
   8062e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80632:	d01b      	beq.n	8066c <pio_configure_pin+0x5c>
   80634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80638:	d116      	bne.n	80668 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8063a:	f000 001f 	and.w	r0, r0, #31
   8063e:	2601      	movs	r6, #1
   80640:	4086      	lsls	r6, r0
   80642:	4632      	mov	r2, r6
   80644:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80648:	4620      	mov	r0, r4
   8064a:	4b22      	ldr	r3, [pc, #136]	; (806d4 <pio_configure_pin+0xc4>)
   8064c:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8064e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80652:	bf14      	ite	ne
   80654:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80656:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80658:	2001      	movs	r0, #1
   8065a:	e017      	b.n	8068c <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   8065c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80660:	d021      	beq.n	806a6 <pio_configure_pin+0x96>
   80662:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80666:	d01e      	beq.n	806a6 <pio_configure_pin+0x96>
		return 0;
   80668:	2000      	movs	r0, #0
   8066a:	e00f      	b.n	8068c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8066c:	f000 001f 	and.w	r0, r0, #31
   80670:	2601      	movs	r6, #1
   80672:	4086      	lsls	r6, r0
   80674:	4632      	mov	r2, r6
   80676:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8067a:	4620      	mov	r0, r4
   8067c:	4b15      	ldr	r3, [pc, #84]	; (806d4 <pio_configure_pin+0xc4>)
   8067e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80680:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80684:	bf14      	ite	ne
   80686:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80688:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8068a:	2001      	movs	r0, #1
}
   8068c:	b002      	add	sp, #8
   8068e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80690:	f000 011f 	and.w	r1, r0, #31
   80694:	2601      	movs	r6, #1
   80696:	462a      	mov	r2, r5
   80698:	fa06 f101 	lsl.w	r1, r6, r1
   8069c:	4620      	mov	r0, r4
   8069e:	4b0e      	ldr	r3, [pc, #56]	; (806d8 <pio_configure_pin+0xc8>)
   806a0:	4798      	blx	r3
	return 1;
   806a2:	4630      	mov	r0, r6
		break;
   806a4:	e7f2      	b.n	8068c <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   806a6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   806aa:	f000 011f 	and.w	r1, r0, #31
   806ae:	2601      	movs	r6, #1
   806b0:	ea05 0306 	and.w	r3, r5, r6
   806b4:	9300      	str	r3, [sp, #0]
   806b6:	f3c5 0380 	ubfx	r3, r5, #2, #1
   806ba:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   806be:	bf14      	ite	ne
   806c0:	2200      	movne	r2, #0
   806c2:	2201      	moveq	r2, #1
   806c4:	fa06 f101 	lsl.w	r1, r6, r1
   806c8:	4620      	mov	r0, r4
   806ca:	4c04      	ldr	r4, [pc, #16]	; (806dc <pio_configure_pin+0xcc>)
   806cc:	47a0      	blx	r4
	return 1;
   806ce:	4630      	mov	r0, r6
		break;
   806d0:	e7dc      	b.n	8068c <pio_configure_pin+0x7c>
   806d2:	bf00      	nop
   806d4:	00080571 	.word	0x00080571
   806d8:	000805af 	.word	0x000805af
   806dc:	000805e1 	.word	0x000805e1

000806e0 <pio_configure_pin_group>:
{
   806e0:	b570      	push	{r4, r5, r6, lr}
   806e2:	b082      	sub	sp, #8
   806e4:	4605      	mov	r5, r0
   806e6:	460e      	mov	r6, r1
   806e8:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   806ea:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   806ee:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   806f2:	d027      	beq.n	80744 <pio_configure_pin_group+0x64>
   806f4:	d811      	bhi.n	8071a <pio_configure_pin_group+0x3a>
   806f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   806fa:	d016      	beq.n	8072a <pio_configure_pin_group+0x4a>
   806fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80700:	d111      	bne.n	80726 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80702:	460a      	mov	r2, r1
   80704:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80708:	4b19      	ldr	r3, [pc, #100]	; (80770 <pio_configure_pin_group+0x90>)
   8070a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8070c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80710:	bf14      	ite	ne
   80712:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80714:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80716:	2001      	movs	r0, #1
   80718:	e012      	b.n	80740 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   8071a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8071e:	d015      	beq.n	8074c <pio_configure_pin_group+0x6c>
   80720:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80724:	d012      	beq.n	8074c <pio_configure_pin_group+0x6c>
		return 0;
   80726:	2000      	movs	r0, #0
   80728:	e00a      	b.n	80740 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8072a:	460a      	mov	r2, r1
   8072c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80730:	4b0f      	ldr	r3, [pc, #60]	; (80770 <pio_configure_pin_group+0x90>)
   80732:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80734:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80738:	bf14      	ite	ne
   8073a:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8073c:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8073e:	2001      	movs	r0, #1
}
   80740:	b002      	add	sp, #8
   80742:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80744:	4b0b      	ldr	r3, [pc, #44]	; (80774 <pio_configure_pin_group+0x94>)
   80746:	4798      	blx	r3
	return 1;
   80748:	2001      	movs	r0, #1
		break;
   8074a:	e7f9      	b.n	80740 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8074c:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80750:	f004 0301 	and.w	r3, r4, #1
   80754:	9300      	str	r3, [sp, #0]
   80756:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8075a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8075e:	bf14      	ite	ne
   80760:	2200      	movne	r2, #0
   80762:	2201      	moveq	r2, #1
   80764:	4631      	mov	r1, r6
   80766:	4628      	mov	r0, r5
   80768:	4c03      	ldr	r4, [pc, #12]	; (80778 <pio_configure_pin_group+0x98>)
   8076a:	47a0      	blx	r4
	return 1;
   8076c:	2001      	movs	r0, #1
		break;
   8076e:	e7e7      	b.n	80740 <pio_configure_pin_group+0x60>
   80770:	00080571 	.word	0x00080571
   80774:	000805af 	.word	0x000805af
   80778:	000805e1 	.word	0x000805e1

0008077c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8077c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80780:	4604      	mov	r4, r0
   80782:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80784:	4b0e      	ldr	r3, [pc, #56]	; (807c0 <pio_handler_process+0x44>)
   80786:	4798      	blx	r3
   80788:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8078a:	4620      	mov	r0, r4
   8078c:	4b0d      	ldr	r3, [pc, #52]	; (807c4 <pio_handler_process+0x48>)
   8078e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80790:	4005      	ands	r5, r0
   80792:	d013      	beq.n	807bc <pio_handler_process+0x40>
   80794:	4c0c      	ldr	r4, [pc, #48]	; (807c8 <pio_handler_process+0x4c>)
   80796:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8079a:	e003      	b.n	807a4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8079c:	42b4      	cmp	r4, r6
   8079e:	d00d      	beq.n	807bc <pio_handler_process+0x40>
   807a0:	3410      	adds	r4, #16
		while (status != 0) {
   807a2:	b15d      	cbz	r5, 807bc <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   807a4:	6820      	ldr	r0, [r4, #0]
   807a6:	4540      	cmp	r0, r8
   807a8:	d1f8      	bne.n	8079c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   807aa:	6861      	ldr	r1, [r4, #4]
   807ac:	4229      	tst	r1, r5
   807ae:	d0f5      	beq.n	8079c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   807b0:	68e3      	ldr	r3, [r4, #12]
   807b2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   807b4:	6863      	ldr	r3, [r4, #4]
   807b6:	ea25 0503 	bic.w	r5, r5, r3
   807ba:	e7ef      	b.n	8079c <pio_handler_process+0x20>
   807bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   807c0:	00080607 	.word	0x00080607
   807c4:	0008060b 	.word	0x0008060b
   807c8:	200705bc 	.word	0x200705bc

000807cc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   807cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   807ce:	210b      	movs	r1, #11
   807d0:	4801      	ldr	r0, [pc, #4]	; (807d8 <PIOA_Handler+0xc>)
   807d2:	4b02      	ldr	r3, [pc, #8]	; (807dc <PIOA_Handler+0x10>)
   807d4:	4798      	blx	r3
   807d6:	bd08      	pop	{r3, pc}
   807d8:	400e0e00 	.word	0x400e0e00
   807dc:	0008077d 	.word	0x0008077d

000807e0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   807e0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   807e2:	210c      	movs	r1, #12
   807e4:	4801      	ldr	r0, [pc, #4]	; (807ec <PIOB_Handler+0xc>)
   807e6:	4b02      	ldr	r3, [pc, #8]	; (807f0 <PIOB_Handler+0x10>)
   807e8:	4798      	blx	r3
   807ea:	bd08      	pop	{r3, pc}
   807ec:	400e1000 	.word	0x400e1000
   807f0:	0008077d 	.word	0x0008077d

000807f4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   807f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   807f6:	210d      	movs	r1, #13
   807f8:	4801      	ldr	r0, [pc, #4]	; (80800 <PIOC_Handler+0xc>)
   807fa:	4b02      	ldr	r3, [pc, #8]	; (80804 <PIOC_Handler+0x10>)
   807fc:	4798      	blx	r3
   807fe:	bd08      	pop	{r3, pc}
   80800:	400e1200 	.word	0x400e1200
   80804:	0008077d 	.word	0x0008077d

00080808 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80808:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8080a:	210e      	movs	r1, #14
   8080c:	4801      	ldr	r0, [pc, #4]	; (80814 <PIOD_Handler+0xc>)
   8080e:	4b02      	ldr	r3, [pc, #8]	; (80818 <PIOD_Handler+0x10>)
   80810:	4798      	blx	r3
   80812:	bd08      	pop	{r3, pc}
   80814:	400e1400 	.word	0x400e1400
   80818:	0008077d 	.word	0x0008077d

0008081c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8081c:	4a17      	ldr	r2, [pc, #92]	; (8087c <pmc_switch_mck_to_pllack+0x60>)
   8081e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80824:	4318      	orrs	r0, r3
   80826:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80828:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8082a:	f013 0f08 	tst.w	r3, #8
   8082e:	d10a      	bne.n	80846 <pmc_switch_mck_to_pllack+0x2a>
   80830:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80834:	4911      	ldr	r1, [pc, #68]	; (8087c <pmc_switch_mck_to_pllack+0x60>)
   80836:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80838:	f012 0f08 	tst.w	r2, #8
   8083c:	d103      	bne.n	80846 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8083e:	3b01      	subs	r3, #1
   80840:	d1f9      	bne.n	80836 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80842:	2001      	movs	r0, #1
   80844:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80846:	4a0d      	ldr	r2, [pc, #52]	; (8087c <pmc_switch_mck_to_pllack+0x60>)
   80848:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8084a:	f023 0303 	bic.w	r3, r3, #3
   8084e:	f043 0302 	orr.w	r3, r3, #2
   80852:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80854:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80856:	f013 0f08 	tst.w	r3, #8
   8085a:	d10a      	bne.n	80872 <pmc_switch_mck_to_pllack+0x56>
   8085c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80860:	4906      	ldr	r1, [pc, #24]	; (8087c <pmc_switch_mck_to_pllack+0x60>)
   80862:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80864:	f012 0f08 	tst.w	r2, #8
   80868:	d105      	bne.n	80876 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8086a:	3b01      	subs	r3, #1
   8086c:	d1f9      	bne.n	80862 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   8086e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80870:	4770      	bx	lr
	return 0;
   80872:	2000      	movs	r0, #0
   80874:	4770      	bx	lr
   80876:	2000      	movs	r0, #0
   80878:	4770      	bx	lr
   8087a:	bf00      	nop
   8087c:	400e0600 	.word	0x400e0600

00080880 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80880:	b9c8      	cbnz	r0, 808b6 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80882:	4a11      	ldr	r2, [pc, #68]	; (808c8 <pmc_switch_mainck_to_xtal+0x48>)
   80884:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80886:	0209      	lsls	r1, r1, #8
   80888:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8088a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8088e:	f023 0303 	bic.w	r3, r3, #3
   80892:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80896:	f043 0301 	orr.w	r3, r3, #1
   8089a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8089c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8089e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   808a0:	f013 0f01 	tst.w	r3, #1
   808a4:	d0fb      	beq.n	8089e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   808a6:	4a08      	ldr	r2, [pc, #32]	; (808c8 <pmc_switch_mainck_to_xtal+0x48>)
   808a8:	6a13      	ldr	r3, [r2, #32]
   808aa:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   808ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   808b2:	6213      	str	r3, [r2, #32]
   808b4:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   808b6:	4904      	ldr	r1, [pc, #16]	; (808c8 <pmc_switch_mainck_to_xtal+0x48>)
   808b8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   808ba:	4a04      	ldr	r2, [pc, #16]	; (808cc <pmc_switch_mainck_to_xtal+0x4c>)
   808bc:	401a      	ands	r2, r3
   808be:	4b04      	ldr	r3, [pc, #16]	; (808d0 <pmc_switch_mainck_to_xtal+0x50>)
   808c0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   808c2:	620b      	str	r3, [r1, #32]
   808c4:	4770      	bx	lr
   808c6:	bf00      	nop
   808c8:	400e0600 	.word	0x400e0600
   808cc:	fec8fffc 	.word	0xfec8fffc
   808d0:	01370002 	.word	0x01370002

000808d4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   808d4:	4b02      	ldr	r3, [pc, #8]	; (808e0 <pmc_osc_is_ready_mainck+0xc>)
   808d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   808d8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   808dc:	4770      	bx	lr
   808de:	bf00      	nop
   808e0:	400e0600 	.word	0x400e0600

000808e4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   808e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   808e8:	4b01      	ldr	r3, [pc, #4]	; (808f0 <pmc_disable_pllack+0xc>)
   808ea:	629a      	str	r2, [r3, #40]	; 0x28
   808ec:	4770      	bx	lr
   808ee:	bf00      	nop
   808f0:	400e0600 	.word	0x400e0600

000808f4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   808f4:	4b02      	ldr	r3, [pc, #8]	; (80900 <pmc_is_locked_pllack+0xc>)
   808f6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   808f8:	f000 0002 	and.w	r0, r0, #2
   808fc:	4770      	bx	lr
   808fe:	bf00      	nop
   80900:	400e0600 	.word	0x400e0600

00080904 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80904:	282c      	cmp	r0, #44	; 0x2c
   80906:	d81e      	bhi.n	80946 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80908:	281f      	cmp	r0, #31
   8090a:	d80c      	bhi.n	80926 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8090c:	4b11      	ldr	r3, [pc, #68]	; (80954 <pmc_enable_periph_clk+0x50>)
   8090e:	699a      	ldr	r2, [r3, #24]
   80910:	2301      	movs	r3, #1
   80912:	4083      	lsls	r3, r0
   80914:	4393      	bics	r3, r2
   80916:	d018      	beq.n	8094a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80918:	2301      	movs	r3, #1
   8091a:	fa03 f000 	lsl.w	r0, r3, r0
   8091e:	4b0d      	ldr	r3, [pc, #52]	; (80954 <pmc_enable_periph_clk+0x50>)
   80920:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80922:	2000      	movs	r0, #0
   80924:	4770      	bx	lr
		ul_id -= 32;
   80926:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80928:	4b0a      	ldr	r3, [pc, #40]	; (80954 <pmc_enable_periph_clk+0x50>)
   8092a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   8092e:	2301      	movs	r3, #1
   80930:	4083      	lsls	r3, r0
   80932:	4393      	bics	r3, r2
   80934:	d00b      	beq.n	8094e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80936:	2301      	movs	r3, #1
   80938:	fa03 f000 	lsl.w	r0, r3, r0
   8093c:	4b05      	ldr	r3, [pc, #20]	; (80954 <pmc_enable_periph_clk+0x50>)
   8093e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80942:	2000      	movs	r0, #0
   80944:	4770      	bx	lr
		return 1;
   80946:	2001      	movs	r0, #1
   80948:	4770      	bx	lr
	return 0;
   8094a:	2000      	movs	r0, #0
   8094c:	4770      	bx	lr
   8094e:	2000      	movs	r0, #0
}
   80950:	4770      	bx	lr
   80952:	bf00      	nop
   80954:	400e0600 	.word	0x400e0600

00080958 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80958:	e7fe      	b.n	80958 <Dummy_Handler>
	...

0008095c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8095c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8095e:	4b1c      	ldr	r3, [pc, #112]	; (809d0 <Reset_Handler+0x74>)
   80960:	4a1c      	ldr	r2, [pc, #112]	; (809d4 <Reset_Handler+0x78>)
   80962:	429a      	cmp	r2, r3
   80964:	d010      	beq.n	80988 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80966:	4b1c      	ldr	r3, [pc, #112]	; (809d8 <Reset_Handler+0x7c>)
   80968:	4a19      	ldr	r2, [pc, #100]	; (809d0 <Reset_Handler+0x74>)
   8096a:	429a      	cmp	r2, r3
   8096c:	d20c      	bcs.n	80988 <Reset_Handler+0x2c>
   8096e:	3b01      	subs	r3, #1
   80970:	1a9b      	subs	r3, r3, r2
   80972:	f023 0303 	bic.w	r3, r3, #3
   80976:	3304      	adds	r3, #4
   80978:	4413      	add	r3, r2
   8097a:	4916      	ldr	r1, [pc, #88]	; (809d4 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   8097c:	f851 0b04 	ldr.w	r0, [r1], #4
   80980:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80984:	429a      	cmp	r2, r3
   80986:	d1f9      	bne.n	8097c <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80988:	4b14      	ldr	r3, [pc, #80]	; (809dc <Reset_Handler+0x80>)
   8098a:	4a15      	ldr	r2, [pc, #84]	; (809e0 <Reset_Handler+0x84>)
   8098c:	429a      	cmp	r2, r3
   8098e:	d20a      	bcs.n	809a6 <Reset_Handler+0x4a>
   80990:	3b01      	subs	r3, #1
   80992:	1a9b      	subs	r3, r3, r2
   80994:	f023 0303 	bic.w	r3, r3, #3
   80998:	3304      	adds	r3, #4
   8099a:	4413      	add	r3, r2
		*pDest++ = 0;
   8099c:	2100      	movs	r1, #0
   8099e:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   809a2:	4293      	cmp	r3, r2
   809a4:	d1fb      	bne.n	8099e <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   809a6:	4b0f      	ldr	r3, [pc, #60]	; (809e4 <Reset_Handler+0x88>)
   809a8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   809ac:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   809b0:	490d      	ldr	r1, [pc, #52]	; (809e8 <Reset_Handler+0x8c>)
   809b2:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   809b4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   809b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   809bc:	d203      	bcs.n	809c6 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   809be:	688b      	ldr	r3, [r1, #8]
   809c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   809c4:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   809c6:	4b09      	ldr	r3, [pc, #36]	; (809ec <Reset_Handler+0x90>)
   809c8:	4798      	blx	r3

	/* Branch to main function */
	main();
   809ca:	4b09      	ldr	r3, [pc, #36]	; (809f0 <Reset_Handler+0x94>)
   809cc:	4798      	blx	r3
   809ce:	e7fe      	b.n	809ce <Reset_Handler+0x72>
   809d0:	20070000 	.word	0x20070000
   809d4:	00080d48 	.word	0x00080d48
   809d8:	2007059c 	.word	0x2007059c
   809dc:	20070650 	.word	0x20070650
   809e0:	2007059c 	.word	0x2007059c
   809e4:	00080000 	.word	0x00080000
   809e8:	e000ed00 	.word	0xe000ed00
   809ec:	00080bb1 	.word	0x00080bb1
   809f0:	00080b4d 	.word	0x00080b4d

000809f4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   809f4:	4b3d      	ldr	r3, [pc, #244]	; (80aec <SystemCoreClockUpdate+0xf8>)
   809f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   809f8:	f003 0303 	and.w	r3, r3, #3
   809fc:	2b03      	cmp	r3, #3
   809fe:	d80e      	bhi.n	80a1e <SystemCoreClockUpdate+0x2a>
   80a00:	e8df f003 	tbb	[pc, r3]
   80a04:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80a08:	4b39      	ldr	r3, [pc, #228]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   80a0a:	695b      	ldr	r3, [r3, #20]
   80a0c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80a10:	bf14      	ite	ne
   80a12:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80a16:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80a1a:	4b36      	ldr	r3, [pc, #216]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a1c:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80a1e:	4b33      	ldr	r3, [pc, #204]	; (80aec <SystemCoreClockUpdate+0xf8>)
   80a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a22:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a26:	2b70      	cmp	r3, #112	; 0x70
   80a28:	d057      	beq.n	80ada <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80a2a:	4b30      	ldr	r3, [pc, #192]	; (80aec <SystemCoreClockUpdate+0xf8>)
   80a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80a2e:	4931      	ldr	r1, [pc, #196]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a30:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80a34:	680b      	ldr	r3, [r1, #0]
   80a36:	40d3      	lsrs	r3, r2
   80a38:	600b      	str	r3, [r1, #0]
   80a3a:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80a3c:	4b2b      	ldr	r3, [pc, #172]	; (80aec <SystemCoreClockUpdate+0xf8>)
   80a3e:	6a1b      	ldr	r3, [r3, #32]
   80a40:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80a44:	d003      	beq.n	80a4e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80a46:	4a2c      	ldr	r2, [pc, #176]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a48:	4b2a      	ldr	r3, [pc, #168]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a4a:	601a      	str	r2, [r3, #0]
   80a4c:	e7e7      	b.n	80a1e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80a4e:	4a2b      	ldr	r2, [pc, #172]	; (80afc <SystemCoreClockUpdate+0x108>)
   80a50:	4b28      	ldr	r3, [pc, #160]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a52:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80a54:	4b25      	ldr	r3, [pc, #148]	; (80aec <SystemCoreClockUpdate+0xf8>)
   80a56:	6a1b      	ldr	r3, [r3, #32]
   80a58:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a5c:	2b10      	cmp	r3, #16
   80a5e:	d005      	beq.n	80a6c <SystemCoreClockUpdate+0x78>
   80a60:	2b20      	cmp	r3, #32
   80a62:	d1dc      	bne.n	80a1e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80a64:	4a24      	ldr	r2, [pc, #144]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a66:	4b23      	ldr	r3, [pc, #140]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a68:	601a      	str	r2, [r3, #0]
				break;
   80a6a:	e7d8      	b.n	80a1e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80a6c:	4a24      	ldr	r2, [pc, #144]	; (80b00 <SystemCoreClockUpdate+0x10c>)
   80a6e:	4b21      	ldr	r3, [pc, #132]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a70:	601a      	str	r2, [r3, #0]
				break;
   80a72:	e7d4      	b.n	80a1e <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80a74:	4b1d      	ldr	r3, [pc, #116]	; (80aec <SystemCoreClockUpdate+0xf8>)
   80a76:	6a1b      	ldr	r3, [r3, #32]
   80a78:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80a7c:	d00c      	beq.n	80a98 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80a7e:	4a1e      	ldr	r2, [pc, #120]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a80:	4b1c      	ldr	r3, [pc, #112]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a82:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80a84:	4b19      	ldr	r3, [pc, #100]	; (80aec <SystemCoreClockUpdate+0xf8>)
   80a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a88:	f003 0303 	and.w	r3, r3, #3
   80a8c:	2b02      	cmp	r3, #2
   80a8e:	d016      	beq.n	80abe <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80a90:	4a1c      	ldr	r2, [pc, #112]	; (80b04 <SystemCoreClockUpdate+0x110>)
   80a92:	4b18      	ldr	r3, [pc, #96]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a94:	601a      	str	r2, [r3, #0]
   80a96:	e7c2      	b.n	80a1e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80a98:	4a18      	ldr	r2, [pc, #96]	; (80afc <SystemCoreClockUpdate+0x108>)
   80a9a:	4b16      	ldr	r3, [pc, #88]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a9c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80a9e:	4b13      	ldr	r3, [pc, #76]	; (80aec <SystemCoreClockUpdate+0xf8>)
   80aa0:	6a1b      	ldr	r3, [r3, #32]
   80aa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80aa6:	2b10      	cmp	r3, #16
   80aa8:	d005      	beq.n	80ab6 <SystemCoreClockUpdate+0xc2>
   80aaa:	2b20      	cmp	r3, #32
   80aac:	d1ea      	bne.n	80a84 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80aae:	4a12      	ldr	r2, [pc, #72]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80ab0:	4b10      	ldr	r3, [pc, #64]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80ab2:	601a      	str	r2, [r3, #0]
				break;
   80ab4:	e7e6      	b.n	80a84 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80ab6:	4a12      	ldr	r2, [pc, #72]	; (80b00 <SystemCoreClockUpdate+0x10c>)
   80ab8:	4b0e      	ldr	r3, [pc, #56]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80aba:	601a      	str	r2, [r3, #0]
				break;
   80abc:	e7e2      	b.n	80a84 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80abe:	4a0b      	ldr	r2, [pc, #44]	; (80aec <SystemCoreClockUpdate+0xf8>)
   80ac0:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80ac2:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80ac4:	480b      	ldr	r0, [pc, #44]	; (80af4 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80ac6:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80aca:	6803      	ldr	r3, [r0, #0]
   80acc:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80ad0:	b2d2      	uxtb	r2, r2
   80ad2:	fbb3 f3f2 	udiv	r3, r3, r2
   80ad6:	6003      	str	r3, [r0, #0]
   80ad8:	e7a1      	b.n	80a1e <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80ada:	4a06      	ldr	r2, [pc, #24]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80adc:	6813      	ldr	r3, [r2, #0]
   80ade:	490a      	ldr	r1, [pc, #40]	; (80b08 <SystemCoreClockUpdate+0x114>)
   80ae0:	fba1 1303 	umull	r1, r3, r1, r3
   80ae4:	085b      	lsrs	r3, r3, #1
   80ae6:	6013      	str	r3, [r2, #0]
   80ae8:	4770      	bx	lr
   80aea:	bf00      	nop
   80aec:	400e0600 	.word	0x400e0600
   80af0:	400e1a10 	.word	0x400e1a10
   80af4:	2007016c 	.word	0x2007016c
   80af8:	00b71b00 	.word	0x00b71b00
   80afc:	003d0900 	.word	0x003d0900
   80b00:	007a1200 	.word	0x007a1200
   80b04:	0e4e1c00 	.word	0x0e4e1c00
   80b08:	aaaaaaab 	.word	0xaaaaaaab

00080b0c <pinMode>:
void pinMode(int pinNumber, mode_definition mode)
{
	uint32_t *const p_PIOB_PER = (uint32_t *) (PIOB_BASE_ADDRESS+0x0000U);	/* defines the address for enabling the parallel Input/output B register */
	uint32_t *const p_PIOB_OER = (uint32_t *) (PIOB_BASE_ADDRESS+0x0010U);	/* defines the address for enabling the parallel output B register */

	if (mode == OUTPUT)	/* You only have to program a function that cares about OUTPUT, and does nothing for the other values 
   80b0c:	2902      	cmp	r1, #2
   80b0e:	d000      	beq.n	80b12 <pinMode+0x6>
   80b10:	4770      	bx	lr
	http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-11057-32-bit-Cortex-M3-Microcontroller-SAM3X-SAM3A_Datasheet.pdf sida 31 (minnes celler adress)
	https://www.arduino.cc/en/Hacking/PinMappingSAM3X (pin mapping due)
	*/
	{
		/* Write code here */
		if(pinNumber == 13){
   80b12:	280d      	cmp	r0, #13
   80b14:	d00c      	beq.n	80b30 <pinMode+0x24>
			*p_PIOB_OER |= (1 << 27);
			*p_PIOB_PER |= (1 << 27);
		}
		
		else if(pinNumber == 22) {
   80b16:	2816      	cmp	r0, #22
   80b18:	d1fa      	bne.n	80b10 <pinMode+0x4>
			*p_PIOB_OER |= (1 << 26);
   80b1a:	4a0b      	ldr	r2, [pc, #44]	; (80b48 <pinMode+0x3c>)
   80b1c:	6813      	ldr	r3, [r2, #0]
   80b1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   80b22:	6013      	str	r3, [r2, #0]
			*p_PIOB_PER |= (1 << 26);
   80b24:	3a10      	subs	r2, #16
   80b26:	6813      	ldr	r3, [r2, #0]
   80b28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   80b2c:	6013      	str	r3, [r2, #0]
	}
	else
	{
		/* Do nothing */
	}
}
   80b2e:	e7ef      	b.n	80b10 <pinMode+0x4>
			*p_PIOB_OER |= (1 << 27);
   80b30:	4a05      	ldr	r2, [pc, #20]	; (80b48 <pinMode+0x3c>)
   80b32:	6813      	ldr	r3, [r2, #0]
   80b34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80b38:	6013      	str	r3, [r2, #0]
			*p_PIOB_PER |= (1 << 27);
   80b3a:	3a10      	subs	r2, #16
   80b3c:	6813      	ldr	r3, [r2, #0]
   80b3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80b42:	6013      	str	r3, [r2, #0]
   80b44:	4770      	bx	lr
   80b46:	bf00      	nop
   80b48:	400e1010 	.word	0x400e1010

00080b4c <main>:
#include "timercounter.h"

#define CONF_BOARD_KEEP_WATCHDOG_AT_INIT 1		//to keep watchdog activated at board_init

int main (void)
{
   80b4c:	b580      	push	{r7, lr}
	// Insert system clock initialization code here (sysclk_init()).
	sysclk_init();
   80b4e:	4b0e      	ldr	r3, [pc, #56]	; (80b88 <main+0x3c>)
   80b50:	4798      	blx	r3
	board_init();
   80b52:	4b0e      	ldr	r3, [pc, #56]	; (80b8c <main+0x40>)
   80b54:	4798      	blx	r3
	delayInit();
   80b56:	4b0e      	ldr	r3, [pc, #56]	; (80b90 <main+0x44>)
   80b58:	4798      	blx	r3
	daccInit();
   80b5a:	4b0e      	ldr	r3, [pc, #56]	; (80b94 <main+0x48>)
   80b5c:	4798      	blx	r3
	configure_tc();
   80b5e:	4b0e      	ldr	r3, [pc, #56]	; (80b98 <main+0x4c>)
   80b60:	4798      	blx	r3
	pinMode(13, OUTPUT);
   80b62:	2102      	movs	r1, #2
   80b64:	200d      	movs	r0, #13
   80b66:	4b0d      	ldr	r3, [pc, #52]	; (80b9c <main+0x50>)
   80b68:	4798      	blx	r3
	// Insert application code here, after the board has been initialized.
	while(1)	/* repeat blink to infinity */
	{
		watchdogReload();
   80b6a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 80bac <main+0x60>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80b6e:	4f0c      	ldr	r7, [pc, #48]	; (80ba0 <main+0x54>)
		 ioport_set_pin_level(PIO_PB27_IDX, HIGH);
	
		//digitalWrite(13, 1); /* sets a bit of I/O port B to high */
		// printf("1");
		delayMicroseconds(750000);
   80b70:	4e0c      	ldr	r6, [pc, #48]	; (80ba4 <main+0x58>)
		watchdogReload();
   80b72:	47c0      	blx	r8
   80b74:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   80b78:	633d      	str	r5, [r7, #48]	; 0x30
		delayMicroseconds(750000);
   80b7a:	4630      	mov	r0, r6
   80b7c:	4c0a      	ldr	r4, [pc, #40]	; (80ba8 <main+0x5c>)
   80b7e:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80b80:	637d      	str	r5, [r7, #52]	; 0x34
		 ioport_set_pin_level(PIO_PB27_IDX, LOW);
		//digitalWrite(13, 0); /* clears a bit of I/O port B */
		// printf("0");
		delayMicroseconds(750000);
   80b82:	4630      	mov	r0, r6
   80b84:	47a0      	blx	r4
   80b86:	e7f4      	b.n	80b72 <main+0x26>
   80b88:	0008048d 	.word	0x0008048d
   80b8c:	000804f1 	.word	0x000804f1
   80b90:	00080415 	.word	0x00080415
   80b94:	000803ad 	.word	0x000803ad
   80b98:	000801dd 	.word	0x000801dd
   80b9c:	00080b0d 	.word	0x00080b0d
   80ba0:	400e1000 	.word	0x400e1000
   80ba4:	000b71b0 	.word	0x000b71b0
   80ba8:	00080451 	.word	0x00080451
   80bac:	00080401 	.word	0x00080401

00080bb0 <__libc_init_array>:
   80bb0:	b570      	push	{r4, r5, r6, lr}
   80bb2:	4e0f      	ldr	r6, [pc, #60]	; (80bf0 <__libc_init_array+0x40>)
   80bb4:	4d0f      	ldr	r5, [pc, #60]	; (80bf4 <__libc_init_array+0x44>)
   80bb6:	1b76      	subs	r6, r6, r5
   80bb8:	10b6      	asrs	r6, r6, #2
   80bba:	bf18      	it	ne
   80bbc:	2400      	movne	r4, #0
   80bbe:	d005      	beq.n	80bcc <__libc_init_array+0x1c>
   80bc0:	3401      	adds	r4, #1
   80bc2:	f855 3b04 	ldr.w	r3, [r5], #4
   80bc6:	4798      	blx	r3
   80bc8:	42a6      	cmp	r6, r4
   80bca:	d1f9      	bne.n	80bc0 <__libc_init_array+0x10>
   80bcc:	4e0a      	ldr	r6, [pc, #40]	; (80bf8 <__libc_init_array+0x48>)
   80bce:	4d0b      	ldr	r5, [pc, #44]	; (80bfc <__libc_init_array+0x4c>)
   80bd0:	f000 f8a8 	bl	80d24 <_init>
   80bd4:	1b76      	subs	r6, r6, r5
   80bd6:	10b6      	asrs	r6, r6, #2
   80bd8:	bf18      	it	ne
   80bda:	2400      	movne	r4, #0
   80bdc:	d006      	beq.n	80bec <__libc_init_array+0x3c>
   80bde:	3401      	adds	r4, #1
   80be0:	f855 3b04 	ldr.w	r3, [r5], #4
   80be4:	4798      	blx	r3
   80be6:	42a6      	cmp	r6, r4
   80be8:	d1f9      	bne.n	80bde <__libc_init_array+0x2e>
   80bea:	bd70      	pop	{r4, r5, r6, pc}
   80bec:	bd70      	pop	{r4, r5, r6, pc}
   80bee:	bf00      	nop
   80bf0:	00080d30 	.word	0x00080d30
   80bf4:	00080d30 	.word	0x00080d30
   80bf8:	00080d38 	.word	0x00080d38
   80bfc:	00080d30 	.word	0x00080d30

00080c00 <register_fini>:
   80c00:	4b02      	ldr	r3, [pc, #8]	; (80c0c <register_fini+0xc>)
   80c02:	b113      	cbz	r3, 80c0a <register_fini+0xa>
   80c04:	4802      	ldr	r0, [pc, #8]	; (80c10 <register_fini+0x10>)
   80c06:	f000 b805 	b.w	80c14 <atexit>
   80c0a:	4770      	bx	lr
   80c0c:	00000000 	.word	0x00000000
   80c10:	00080c21 	.word	0x00080c21

00080c14 <atexit>:
   80c14:	2300      	movs	r3, #0
   80c16:	4601      	mov	r1, r0
   80c18:	461a      	mov	r2, r3
   80c1a:	4618      	mov	r0, r3
   80c1c:	f000 b81e 	b.w	80c5c <__register_exitproc>

00080c20 <__libc_fini_array>:
   80c20:	b538      	push	{r3, r4, r5, lr}
   80c22:	4c0a      	ldr	r4, [pc, #40]	; (80c4c <__libc_fini_array+0x2c>)
   80c24:	4d0a      	ldr	r5, [pc, #40]	; (80c50 <__libc_fini_array+0x30>)
   80c26:	1b64      	subs	r4, r4, r5
   80c28:	10a4      	asrs	r4, r4, #2
   80c2a:	d00a      	beq.n	80c42 <__libc_fini_array+0x22>
   80c2c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80c30:	3b01      	subs	r3, #1
   80c32:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80c36:	3c01      	subs	r4, #1
   80c38:	f855 3904 	ldr.w	r3, [r5], #-4
   80c3c:	4798      	blx	r3
   80c3e:	2c00      	cmp	r4, #0
   80c40:	d1f9      	bne.n	80c36 <__libc_fini_array+0x16>
   80c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80c46:	f000 b877 	b.w	80d38 <_fini>
   80c4a:	bf00      	nop
   80c4c:	00080d48 	.word	0x00080d48
   80c50:	00080d44 	.word	0x00080d44

00080c54 <__retarget_lock_acquire_recursive>:
   80c54:	4770      	bx	lr
   80c56:	bf00      	nop

00080c58 <__retarget_lock_release_recursive>:
   80c58:	4770      	bx	lr
   80c5a:	bf00      	nop

00080c5c <__register_exitproc>:
   80c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80c60:	4d2c      	ldr	r5, [pc, #176]	; (80d14 <__register_exitproc+0xb8>)
   80c62:	4606      	mov	r6, r0
   80c64:	6828      	ldr	r0, [r5, #0]
   80c66:	4698      	mov	r8, r3
   80c68:	460f      	mov	r7, r1
   80c6a:	4691      	mov	r9, r2
   80c6c:	f7ff fff2 	bl	80c54 <__retarget_lock_acquire_recursive>
   80c70:	4b29      	ldr	r3, [pc, #164]	; (80d18 <__register_exitproc+0xbc>)
   80c72:	681c      	ldr	r4, [r3, #0]
   80c74:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80c78:	2b00      	cmp	r3, #0
   80c7a:	d03e      	beq.n	80cfa <__register_exitproc+0x9e>
   80c7c:	685a      	ldr	r2, [r3, #4]
   80c7e:	2a1f      	cmp	r2, #31
   80c80:	dc1c      	bgt.n	80cbc <__register_exitproc+0x60>
   80c82:	f102 0e01 	add.w	lr, r2, #1
   80c86:	b176      	cbz	r6, 80ca6 <__register_exitproc+0x4a>
   80c88:	2101      	movs	r1, #1
   80c8a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80c8e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80c92:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80c96:	4091      	lsls	r1, r2
   80c98:	4308      	orrs	r0, r1
   80c9a:	2e02      	cmp	r6, #2
   80c9c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80ca0:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80ca4:	d023      	beq.n	80cee <__register_exitproc+0x92>
   80ca6:	3202      	adds	r2, #2
   80ca8:	f8c3 e004 	str.w	lr, [r3, #4]
   80cac:	6828      	ldr	r0, [r5, #0]
   80cae:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80cb2:	f7ff ffd1 	bl	80c58 <__retarget_lock_release_recursive>
   80cb6:	2000      	movs	r0, #0
   80cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80cbc:	4b17      	ldr	r3, [pc, #92]	; (80d1c <__register_exitproc+0xc0>)
   80cbe:	b30b      	cbz	r3, 80d04 <__register_exitproc+0xa8>
   80cc0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80cc4:	f3af 8000 	nop.w
   80cc8:	4603      	mov	r3, r0
   80cca:	b1d8      	cbz	r0, 80d04 <__register_exitproc+0xa8>
   80ccc:	2000      	movs	r0, #0
   80cce:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80cd2:	f04f 0e01 	mov.w	lr, #1
   80cd6:	6058      	str	r0, [r3, #4]
   80cd8:	6019      	str	r1, [r3, #0]
   80cda:	4602      	mov	r2, r0
   80cdc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80ce0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80ce4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80ce8:	2e00      	cmp	r6, #0
   80cea:	d0dc      	beq.n	80ca6 <__register_exitproc+0x4a>
   80cec:	e7cc      	b.n	80c88 <__register_exitproc+0x2c>
   80cee:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80cf2:	4301      	orrs	r1, r0
   80cf4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80cf8:	e7d5      	b.n	80ca6 <__register_exitproc+0x4a>
   80cfa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80cfe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80d02:	e7bb      	b.n	80c7c <__register_exitproc+0x20>
   80d04:	6828      	ldr	r0, [r5, #0]
   80d06:	f7ff ffa7 	bl	80c58 <__retarget_lock_release_recursive>
   80d0a:	f04f 30ff 	mov.w	r0, #4294967295
   80d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80d12:	bf00      	nop
   80d14:	20070598 	.word	0x20070598
   80d18:	00080d20 	.word	0x00080d20
   80d1c:	00000000 	.word	0x00000000

00080d20 <_global_impure_ptr>:
   80d20:	20070170                                p.. 

00080d24 <_init>:
   80d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d26:	bf00      	nop
   80d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80d2a:	bc08      	pop	{r3}
   80d2c:	469e      	mov	lr, r3
   80d2e:	4770      	bx	lr

00080d30 <__init_array_start>:
   80d30:	00080c01 	.word	0x00080c01

00080d34 <__frame_dummy_init_array_entry>:
   80d34:	00080119                                ....

00080d38 <_fini>:
   80d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d3a:	bf00      	nop
   80d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80d3e:	bc08      	pop	{r3}
   80d40:	469e      	mov	lr, r3
   80d42:	4770      	bx	lr

00080d44 <__fini_array_start>:
   80d44:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007016c 	.word	0x2007016c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <value>:
2007012c:	000006a4 000007e5 000008f5 000009ac     ................
2007013c:	00000a82 000009ac 000008f5 000007e5     ................
2007014c:	000006a4 00000562 00000451 0000039b     ....b...Q.......
2007015c:	0000035c 00000398 00000451 00000562     \.......Q...b...

2007016c <SystemCoreClock>:
2007016c:	003d0900                                ..=.

20070170 <impure_data>:
20070170:	00000000 2007045c 200704c4 2007052c     ....\.. ... ,.. 
	...
20070218:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070228:	0005deec 0000000b 00000000 00000000     ................
	...

20070598 <__atexit_recursive_mutex>:
20070598:	2007062c                                ,.. 
